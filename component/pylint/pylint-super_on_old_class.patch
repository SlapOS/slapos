commit 6cf07b3483ec0d921296aefa8a28a8491f13786e
Author: Claudiu Popa <pcmanticore@gmail.com>
Date:   Sun Dec 6 14:54:52 2015 +0200

    Don't emit super-on-old-class on classes with unknown bases.
    
    
    The change also removes the confidence handling for super-on-old-class,
    which isn't used enough to merit its existence.
    Closes issue #721.

--- a/pylint/checkers/newstyle.py	2019-12-25 13:51:01.611586402 +0900
+++ b/pylint/checkers/newstyle.py	2019-12-25 13:50:31.861542768 +0900
@@ -127,12 +127,9 @@
             if isinstance(call, astroid.CallFunc) and \
                isinstance(call.func, astroid.Name) and \
                call.func.name == 'super':
-                confidence = (INFERENCE if has_known_bases(klass)
-                              else INFERENCE_FAILURE)
-                if not klass.newstyle:
+                if not klass.newstyle and has_known_bases(klass):
                     # super should not be used on an old style class
-                    self.add_message('super-on-old-class', node=node,
-                                     confidence=confidence)
+                    self.add_message('super-on-old-class', node=node)
                 else:
                     # super first arg should be the class
                     if not call.args and sys.version_info[0] == 3:
@@ -146,8 +143,7 @@
                         continue
 
                     if supcls is None:
-                        self.add_message('missing-super-argument', node=call,
-                                         confidence=confidence)
+                        self.add_message('missing-super-argument', node=call)
                         continue
 
                     if klass is not supcls:
@@ -163,8 +159,7 @@
                         if name is not None:
                             self.add_message('bad-super-call',
                                              node=call,
-                                             args=(name, ),
-                                             confidence=confidence)
+                                             args=(name, ))
 
 
 def register(linter):
