diff --git a/Makefile b/Makefile
index 49b1f6f..d88c866 100644
--- a/Makefile
+++ b/Makefile
@@ -41,7 +41,7 @@ CONFIG_DEFAULT_AR=y
 endif
 
 # installation directory
-prefix=/usr/local
+prefix=$(QUICKJS_DIR)
 
 # use the gprof profiler
 #CONFIG_PROFILE=y
@@ -107,7 +107,7 @@ ifdef CONFIG_WIN32
 DEFINES+=-D__USE_MINGW_ANSI_STDIO # for standard snprintf behavior
 endif
 
-CFLAGS+=$(DEFINES)
+CFLAGS+=$(DEFINES) -I$(MAVSDK_INC)
 CFLAGS_DEBUG=$(CFLAGS) -O0
 CFLAGS_SMALL=$(CFLAGS) -Os
 CFLAGS_OPT=$(CFLAGS) -O2
@@ -177,7 +177,7 @@ endif
 HOST_LIBS=-lm -ldl -lpthread
 LIBS=-lm
 ifndef CONFIG_WIN32
-LIBS+=-ldl -lpthread
+LIBS+=$(MAVSDK_LIB) -ldl -lstdc++ -lpthread
 endif
 LIBS+=$(EXTRA_LIBS)
 
@@ -201,7 +201,7 @@ $(QJSC): $(OBJDIR)/qjsc.host.o \
 
 endif #CROSS_PREFIX
 
-QJSC_DEFINES:=-DCONFIG_CC=\"$(QJSC_CC)\" -DCONFIG_PREFIX=\"$(prefix)\"
+QJSC_DEFINES:=-DCONFIG_CC=\"$(SLAPOS_GCC)\" -DCONFIG_PREFIX=\"$(prefix)\"
 ifdef CONFIG_LTO
 QJSC_DEFINES+=-DCONFIG_LTO
 endif
@@ -227,11 +227,13 @@ LTOEXT=
 endif
 
 libquickjs$(LTOEXT).a: $(QJS_LIB_OBJS)
-	$(AR) rcs $@ $^
+	$(AR) rcs $@ $^ $(MAVSDK_OBJS)
 
 ifdef CONFIG_LTO
+MAVSDK_OBJS = $(shell $(AR) t $(MAVSDK_LIB))
 libquickjs.a: $(patsubst %.o, %.nolto.o, $(QJS_LIB_OBJS))
-	$(AR) rcs $@ $^
+	$(AR) x $(MAVSDK_LIB)
+	$(AR) rcs $@ $^ $(MAVSDK_OBJS)
 endif # CONFIG_LTO
 
 repl.c: $(QJSC) repl.js
diff --git a/qjs.c b/qjs.c
index d56b843..32423a3 100644
--- a/qjs.c
+++ b/qjs.c
@@ -120,6 +120,7 @@ static JSContext *JS_NewCustomContext(JSRuntime *rt)
     /* system modules */
     js_init_module_std(ctx, "std");
     js_init_module_os(ctx, "os");
+    js_init_module_mavsdk(ctx, "mavsdk");
     return ctx;
 }
 
@@ -495,12 +496,14 @@ int main(int argc, char **argv)
 #endif
         js_std_add_helpers(ctx, argc - optind, argv + optind);
 
-        /* make 'std' and 'os' visible to non module code */
+        /* make 'std' and 'os' and 'mavsdk' visible to non module code */
         if (load_std) {
             const char *str = "import * as std from 'std';\n"
                 "import * as os from 'os';\n"
+                "import * as mavsdk from 'mavsdk';\n"
                 "globalThis.std = std;\n"
-                "globalThis.os = os;\n";
+                "globalThis.os = os;\n"
+                "globalThis.mavsdk = mavsdk;\n";
             eval_buf(ctx, str, strlen(str), "<input>", JS_EVAL_TYPE_MODULE);
         }
 
diff --git a/qjsc.c b/qjsc.c
index b9f1e4c..2d38666 100644
--- a/qjsc.c
+++ b/qjsc.c
@@ -452,6 +452,7 @@ static int output_executable(const char *out_filename, const char *cfilename,
     *arg++ = "-lm";
     *arg++ = "-ldl";
     *arg++ = "-lpthread";
+    *arg++ = "-lstdc++";
     *arg = NULL;
     
     if (verbose) {
@@ -513,6 +514,9 @@ int main(int argc, char **argv)
     namelist_add(&cmodule_list, "std", "std", 0);
     namelist_add(&cmodule_list, "os", "os", 0);
 
+    // mavsdk module
+    namelist_add(&cmodule_list, "mavsdk", "mavsdk", 0);
+
     for(;;) {
         c = getopt(argc, argv, "ho:cN:f:mxevM:p:S:D:");
         if (c == -1)
diff --git a/quickjs-libc.c b/quickjs-libc.c
index e180dd0..2c36cc7 100644
--- a/quickjs-libc.c
+++ b/quickjs-libc.c
@@ -70,6 +70,7 @@ typedef sig_t sighandler_t;
 #include "cutils.h"
 #include "list.h"
 #include "quickjs-libc.h"
+#include "mavsdk_wrapper.h"
 
 /* TODO:
    - add socket calls
@@ -3499,7 +3500,6 @@ static JSValue js_worker_postMessage(JSContext *ctx, JSValueConst this_val,
     js_free(ctx, data);
     js_free(ctx, sab_tab);
     return JS_EXCEPTION;
-    
 }
 
 static JSValue js_worker_set_onmessage(JSContext *ctx, JSValueConst this_val,
@@ -3712,6 +3712,223 @@ JSModuleDef *js_init_module_os(JSContext *ctx, const char *module_name)
     return m;
 }
 
+/**********************************************************/
+/* 'mavsdk' object */
+
+static JSValue js_mavsdk_start(JSContext *ctx, JSValueConst this_val,
+                              int argc, JSValueConst *argv)
+{
+    const char *url;
+    const char *log_file;
+    int timeout;
+    int res;
+
+    url = JS_ToCString(ctx, argv[0]);
+    log_file = JS_ToCString(ctx, argv[1]);
+    if (JS_ToInt32(ctx, &timeout, argv[2]))
+        return JS_EXCEPTION;
+
+    res = start(url, log_file, timeout);
+    JS_FreeCString(ctx, url);
+    JS_FreeCString(ctx, log_file);
+
+    return JS_NewInt32(ctx, res);
+}
+
+static JSValue js_mavsdk_stop(JSContext *ctx, JSValueConst this_val,
+                            int argc, JSValueConst *argv)
+{
+    return JS_UNDEFINED;
+}
+
+static JSValue js_mavsdk_arm(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    return JS_NewInt32(ctx, arm());
+}
+
+static JSValue js_mavsdk_setTargetCoordinates(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    double la_arg_double;
+    double lo_arg_double;
+    double a_arg_double;
+    double y_arg_double;
+
+    if (JS_ToFloat64(ctx, &la_arg_double, argv[0]))
+        return JS_EXCEPTION;
+    if (JS_ToFloat64(ctx, &lo_arg_double, argv[1]))
+        return JS_EXCEPTION;
+    if (JS_ToFloat64(ctx, &a_arg_double, argv[2]))
+        return JS_EXCEPTION;
+    if (JS_ToFloat64(ctx, &y_arg_double, argv[3]))
+        return JS_EXCEPTION;
+
+    return JS_NewInt32(ctx, setTargetCoordinates(la_arg_double, lo_arg_double, a_arg_double, y_arg_double));
+}
+
+static JSValue js_mavsdk_setTargetLatLong(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    double la_arg_double;
+    double lo_arg_double;
+
+    if (JS_ToFloat64(ctx, &la_arg_double, argv[0]))
+        return JS_EXCEPTION;
+    if (JS_ToFloat64(ctx, &lo_arg_double, argv[1]))
+        return JS_EXCEPTION;
+
+    return JS_NewInt32(ctx, setTargetLatLong(la_arg_double, lo_arg_double));
+}
+
+static JSValue js_mavsdk_setAltitude(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    double altitude;
+
+    if (JS_ToFloat64(ctx, &altitude, argv[0]))
+        return JS_EXCEPTION;
+
+    return JS_NewInt32(ctx, setAltitude(altitude));
+}
+static JSValue js_mavsdk_setAirspeed(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    double altitude;
+
+    if (JS_ToFloat64(ctx, &altitude, argv[0]))
+        return JS_EXCEPTION;
+
+    return JS_NewInt32(ctx, setAirspeed(altitude));
+}
+
+static JSValue js_mavsdk_getRoll(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    return JS_NewFloat64(ctx, getRoll());
+}
+static JSValue js_mavsdk_getPitch(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    return JS_NewFloat64(ctx, getPitch());
+}
+static JSValue js_mavsdk_getYaw(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    return JS_NewFloat64(ctx, getYaw());
+}
+static JSValue js_mavsdk_getLatitude(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    return JS_NewFloat64(ctx, getLatitude());
+}
+static JSValue js_mavsdk_getLongitude(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    return JS_NewFloat64(ctx, getLongitude());
+}
+static JSValue js_mavsdk_getAltitude(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    return JS_NewFloat64(ctx, getAltitude());
+}
+
+static JSValue js_mavsdk_loiter(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+
+    return JS_NewInt32(ctx, loiter());
+}
+
+static JSValue js_mavsdk_doParachute(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    int param;
+
+    if (JS_ToInt32(ctx, &param, argv[0]))
+        return JS_EXCEPTION;
+
+    return JS_NewInt32(ctx, doParachute(param));
+}
+
+static JSValue js_mavsdk_setTargetCoordinatesXYZ(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    double x_arg_double;
+    double y_arg_double;
+    double z_arg_double;
+
+    if (JS_ToFloat64(ctx, &x_arg_double, argv[0]))
+        return JS_EXCEPTION;
+    if (JS_ToFloat64(ctx, &y_arg_double, argv[1]))
+        return JS_EXCEPTION;
+    if (JS_ToFloat64(ctx, &z_arg_double, argv[2]))
+        return JS_EXCEPTION;
+
+    return JS_NewInt32(ctx, setTargetCoordinatesXYZ(x_arg_double, y_arg_double, z_arg_double));
+}
+
+static JSValue js_mavsdk_setTargetAltitude(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    double a_arg_double;
+
+    if (JS_ToFloat64(ctx, &a_arg_double, argv[0]))
+        return JS_EXCEPTION;
+
+    return JS_NewInt32(ctx, setTargetAltitude(a_arg_double));
+}
+
+static JSValue js_mavsdk_takeOff(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    return JS_NewInt32(ctx, takeOff());
+}
+
+static JSValue js_mavsdk_land(JSContext *ctx, JSValueConst this_val,
+                                          int argc, JSValueConst *argv)
+{
+    return JS_NewInt32(ctx, land());
+}
+
+static const JSCFunctionListEntry js_mavsdk_funcs[] = {
+    JS_CFUNC_DEF("start", 3, js_mavsdk_start ),
+    JS_CFUNC_DEF("stop", 0, js_mavsdk_stop ),
+    JS_CFUNC_DEF("arm", 0, js_mavsdk_arm ),
+    JS_CFUNC_DEF("setTargetCoordinates", 4, js_mavsdk_setTargetCoordinates ),
+    JS_CFUNC_DEF("setTargetLatLong", 2, js_mavsdk_setTargetLatLong ),
+    JS_CFUNC_DEF("setAltitude", 1, js_mavsdk_setAltitude ),
+    JS_CFUNC_DEF("setAirspeed", 1, js_mavsdk_setAirspeed ),
+    JS_CFUNC_DEF("loiter", 0, js_mavsdk_loiter ),
+    JS_CFUNC_DEF("doParachute", 1, js_mavsdk_doParachute ),
+    JS_CFUNC_DEF("setTargetCoordinatesXYZ", 3, js_mavsdk_setTargetCoordinatesXYZ ),
+    JS_CFUNC_DEF("setTargetAltitude", 1, js_mavsdk_setTargetAltitude ),
+    JS_CFUNC_DEF("getRoll", 0, js_mavsdk_getRoll ),
+    JS_CFUNC_DEF("getPitch", 0, js_mavsdk_getPitch ),
+    JS_CFUNC_DEF("getYaw", 0, js_mavsdk_getYaw ),
+    JS_CFUNC_DEF("getLatitude", 0, js_mavsdk_getLatitude ),
+    JS_CFUNC_DEF("getLongitude", 0, js_mavsdk_getLongitude ),
+    JS_CFUNC_DEF("getAltitude", 0, js_mavsdk_getAltitude ),
+    JS_CFUNC_DEF("takeOff", 0, js_mavsdk_takeOff ),
+    JS_CFUNC_DEF("land", 0, js_mavsdk_land ),
+};
+
+static int js_mavsdk_init(JSContext *ctx, JSModuleDef *m)
+{
+    return JS_SetModuleExportList(ctx, m, js_mavsdk_funcs,
+                                  countof(js_mavsdk_funcs));
+}
+
+JSModuleDef *js_init_module_mavsdk(JSContext *ctx, const char *module_name)
+{
+    JSModuleDef *m;
+    m = JS_NewCModule(ctx, module_name, js_mavsdk_init);
+    if (!m)
+        return NULL;
+    JS_AddModuleExportList(ctx, m, js_mavsdk_funcs, countof(js_mavsdk_funcs));
+    return m;
+}
+
 /**********************************************************/
 
 static JSValue js_print(JSContext *ctx, JSValueConst this_val,
diff --git a/quickjs-libc.h b/quickjs-libc.h
index fbbe5b0..63480ad 100644
--- a/quickjs-libc.h
+++ b/quickjs-libc.h
@@ -35,6 +35,7 @@ extern "C" {
 
 JSModuleDef *js_init_module_std(JSContext *ctx, const char *module_name);
 JSModuleDef *js_init_module_os(JSContext *ctx, const char *module_name);
+JSModuleDef *js_init_module_mavsdk(JSContext *ctx, const char *module_name);
 void js_std_add_helpers(JSContext *ctx, int argc, char **argv);
 void js_std_loop(JSContext *ctx);
 void js_std_init_handlers(JSRuntime *rt);
