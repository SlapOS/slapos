[buildout]
extends =
  gcc/buildout.cfg
  python-2.7/buildout.cfg
  python3/buildout.cfg
python = python

# Unless a software release needs several versions of either Python or GCC
# at the same time, the [pythonX.Y] & [gcc-X.Y] must not be referred directly,
# even if a component works only with specific versions.
# There may be exceptions in profiles that were written before this one.

[python]
recipe = slapos.recipe.build
part = python3
init =
  python = self.buildout[options['part']]
  for x in 'location', 'executable', 'version':
    options[x] = python[x]
  options.barrier()
update =
  import os
  path, os.environ['PYTHON'] = os.path.split(options['executable'])
  PATH = os.environ['PATH']
  if path not in PATH.split(os.pathsep):
    os.environ['PATH'] = path + os.pathsep + PATH
depends = ${gcc:recipe}

[gcc]
depends =
# requirements that are common to gcc & python
  ${gettext:recipe}
  ${perl:recipe}
# python requirements for which the compiler does not matter
  ${patch:recipe}
recipe = slapos.recipe.build
# By decreasing order of preference.
available = 10.5 9.5 12.3
# Minimum version for all components that might be required for
# slapos.rebootstrap (see https://bugs.python.org/issue34112 about Python 3.7+).
min-version += 5.4
init =
  import os, subprocess
  from zc.buildout import UserError
  parse_version = lambda ver: tuple(map(int, ver.split('.')))
  if False:
    current = None
  else:
    print("Checking for GCC")
    try:
      current = subprocess.check_output(('gcc', '-dumpfullversion'),
                                        stderr=subprocess.STDOUT,
                                        universal_newlines=True).strip()
    except subprocess.CalledProcessError: # BBB: old GCC
      current = subprocess.check_output(('gcc', '-dumpversion'),
                                        universal_newlines=True).strip()
# If we're still going to use the same GCC,
# the conditions have no impact on the dependant parts.
  print("Found (%s) for now" % current)
  available = options.pop('available').split()
  min_version = options.pop('min-version')
  min_version = max(map(parse_version, min_version.split()))
  max_version = options.pop('max-version', None)
  if max_version:
    max_version = min(map(parse_version, max_version.split()))
  else:
    max_version = float('inf'),
###
  print("max version (%s)" % max_version)
  print("min version (%s)" % min_version)
  if current and min_version <= parse_version(current) <= max_version:
    for path in os.getenv('PATH', '').split(os.pathsep): # PY3: shutil.which
      gcc = os.path.join(path, 'gcc')
      if os.access(gcc, os.X_OK) and not os.path.isdir(gcc):
        options['prefix'] = os.path.dirname(os.path.normpath(path))
        break
    self.system_version = current
  else:
    for version in available:
      if min_version <= parse_version(version) <= max_version:
        options['prefix'] = self.buildout['gcc-' + version]['location']
        break
    else:
      format_version = lambda ver: '.'.join(map(str, ver))
      raise UserError(
        '[%s] no available version given min-version=%s and max-version=%s'
        % (self.name, format_version(min_version), format_version(max_version)))
update =
  try:
    version = self.system_version
  except AttributeError:
    import os
    env = os.environ
    env['PATH'] = os.pathsep.join((
      os.path.join(options['prefix'], 'bin'),
      os.path.join(self.buildout['binutils']['location'], 'bin'),
      env['PATH']
    ))
  else:

    print("Using system GCC (%s)" % version)
