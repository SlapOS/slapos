[buildout]
extends =
	../pygolang/buildout.cfg

parts =

[virtual-env-base]
recipe = slapos.recipe.build
name = ${:_buildout_section_name_}
default-instance = true
init =
  from zc.buildout.easy_install import working_set
  import os
  name = options['name']
  eggs = options.get('eggs')
  self.message = options.get('message')
  self.chain = options.get('chain')
  environment = options.get('environment')
  scripts = options.get('scripts')

  eggs_template = """
  [.%(name)s.install-eggs]
  recipe = zc.recipe.egg
  eggs =
    %(eggs)s
  %(scripts)s

  [.%(name)s.install-interpreter]
  <= python-interpreter
  eggs +=
    %(eggs)s
  """

  instance_template = """
  [.%(name)s.instance]
  recipe = slapos.recipe.template
  output = ${buildout:directory}/instance.cfg
  depends = $%(cookbook)s
  inline =
    [buildout]
    parts = publish

    eggs-directory = ${buildout:eggs-directory}
    develop-eggs-directory = ${buildout:develop-eggs-directory}

    [publish]
    recipe = slapos.cookbook:publish
    activate-script = %(location)s
  """

  if eggs:
    self.buildout.parse(eggs_template % {
      "eggs": "\n  ".join(e.strip() for e in eggs.splitlines()),
      "name": name,
      "scripts": "scripts = " + scripts if scripts else "",
    })

  if is_true(options.get('default-instance')):
    self.buildout.parse(instance_template % {
      "cookbook": "{slapos-cookbook:recipe}",
      "location": location,
      "name": name,
    })

  env = {
    "PATH": self.buildout['buildout']['bin-directory'] + ":\$PATH",
    "PS1": "\"(" + self.name + ") \$PS1\"",
  }

  if environment:
    for line in environment.splitlines():
      key, value = line.split("=", 1)
      env[key.strip()] = value.strip()

  self.env = env

install =
  message = ""
  if self.message:
    message = "echo " + "\n  echo ".join(
      "%r" % line for line in self.message.splitlines())
    message += "\n  echo \'\'"

  chain = ""
  if self.chain:
    chain = "source " + "\n  source ".join(
      "%r" % line for line in self.chain.splitlines())

  with open(location, "w") as f:
    f.write(options['template'] % {
      "env": " ".join("%s %s" % (k, v) for k, v in self.env.items()),
      "message": message,
      "chain": chain,
    })

# Template virtual env for bash shell in posix
[virtual-env-base:posix]
template =
  #!/bin/bash
  if type deactivate > /dev/null 2>&1
  then
    array=( %(env)s )
    for ((idx=0; idx<${#array[@]}; idx=idx+2)); do
      if ! ( echo $_LIST_OLD_VENV | grep ${array[idx]} ) > /dev/null 2>&1
      then
        eval "_OLD_VENV_${array[idx]}=\$${array[idx]}"
        eval "export _LIST_OLD_VENV=\"${array[idx]} \$_LIST_OLD_VENV\""
      fi
      eval "export ${array[idx]}=\"${array[idx+1]}\""
    done
    %(chain)s
    %(message)s
  else
    array=( %(env)s )
    deactivate () {
      for ((idx=0; idx<${#array[@]}; idx=idx+2)); do
        eval "if [ \"\$_OLD_VENV_${array[idx]}\" ]; then ${array[idx]}=\$_OLD_VENV_${array[idx]}; else unset ${array[idx]}; fi; unset \$_OLD_VENV_${array[idx]}"
        shift
      done
      unset -f deactivate
      unset array
    }

    for ((idx=0; idx<${#array[@]}; idx=idx+2)); do
      echo "${array[idx]}" "${array[idx+1]}"
      eval "_OLD_VENV_${array[idx]}=\$${array[idx]}"
      eval "export ${array[idx]}=\"${array[idx+1]}\""
      eval "export _LIST_OLD_VENV=\"${array[idx]} \$_LIST_OLD_VENV\""
    done
    %(chain)s
    %(message)s
  fi
