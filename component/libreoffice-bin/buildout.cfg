[buildout]
extends =
  ../cpio/buildout.cfg
  ../rpm2cpio/buildout.cfg
  ../cups/buildout.cfg
  ../dbus/buildout.cfg
  ../gtk-2/buildout.cfg
  ../xorg/buildout.cfg
  ../fontconfig/buildout.cfg
  ../util-linux/buildout.cfg
  ../patchelf/buildout.cfg
  ../defaults.cfg
parts =
  libreoffice-bin

[libreoffice-bin]
recipe = slapos.recipe.build
# here, two %s are used, first one is for directory name (eg. x86_64), and second one is for filename (eg. x86-64).
version = 5.2.4.2
url = http://downloadarchive.documentfoundation.org/libreoffice/old/${:version}/rpm/%s/LibreOffice_${:version}_Linux_%s_rpm.tar.gz
# supported architectures md5sums
md5sum_x86 = 7a0b33a2d18f06143258c428c32de213
md5sum_x86-64 = cbea6cd17063b5bcbe0cb32f7819f0cf

# where office code can be found?
officedir = libreoffice5.2
install =
  import os
  import sys
  import glob
  import subprocess
  ARCH_DIR_MAP = { 'x86': 'x86', 'x86-64': 'x86_64' }
  platform = guessPlatform()
  url = options['url'] % (ARCH_DIR_MAP[platform], platform)
  md5sum = options['md5sum_' + platform]
  extract_dir = self.extract(self.download(url, md5sum))
  workdir = guessworkdir(extract_dir)
  storagedir = os.path.join(workdir, 'storage')
  os.mkdir(storagedir)
  rpmsdir = os.path.join(workdir, 'RPMS')
  for q in os.listdir(rpmsdir):
    if q.endswith('.rpm') and 'javafilter' not in q and 'xsltfilter' not in q:
      self.pipeCommand((
        (sys.executable, options['rpm2cpio'], os.path.join(rpmsdir, q)),
        (options['cpio'], '-idum'),
      ), cwd=storagedir)
  self.copyTree(os.path.join(storagedir, 'opt', options['officedir']),
                location, ['ure-link'])
  os.symlink('ure', os.path.join(location, 'ure-link'))
  # backward compatibility for cloudooo configuration
  os.mkdir(os.path.join(location, 'basis-link'))
  os.symlink(os.path.join('..', 'program'),
             os.path.join(location, 'basis-link', 'program'))
  
  # ajust rpath on executables (but not on scripts)
  rpath = '%s:%s' % (os.path.join(location, 'program'), ':'.join(p.strip() for p in '''${:rpath}'''.splitlines()))
  scripts = { 'gengal', 'libpython3.5m.so-gdb.py', 'python', 'sbase', 'scalc', 'sdraw', 'senddoc', 'simpress', 'smath', 'soffice', 'swriter', 'uno', 'unoinfo', 'unopkg', 'unpack_update', }
  for binary in glob.glob(os.path.join(location, 'program', '*')):
    if os.path.isfile(binary) and os.access(binary, os.X_OK) and os.path.basename(binary) not in scripts:
      print("Adjusting rpath on", binary)
      try:
        subprocess.check_call(['${patchelf:location}/bin/patchelf', '--set-rpath', rpath, binary])
      except Exception as e:
        print (e)
        import pdb; pdb.set_trace()
 
rpath =
  ${cairo:location}/lib/
  ${cups:location}/lib/
  ${cups:location}/lib64/
  ${dbus:location}/lib/
  ${dbus-glib:location}/lib/
  ${file:location}/lib/
  ${fontconfig:location}/lib/
  ${freetype:location}/lib/
  ${gcc:prefix}/lib/
  ${gcc:prefix}/lib64/
  ${glib:location}/lib/
  ${glu:location}/lib/
  ${libICE:location}/lib/
  ${libSM:location}/lib/
  ${libX11:location}/lib/
  ${libXau:location}/lib/
  ${libXdmcp:location}/lib/
  ${libXext:location}/lib/
  ${libXinerama:location}/lib/
  ${libXrender:location}/lib/
  ${libXrandr:location}/lib/
  ${libexpat:location}/lib/
  ${libffi:location}/lib/
  ${libffi:location}/lib64/
  ${libpng12:location}/lib/
  ${libxcb:location}/lib/
  ${mesa:location}/lib/
  ${pixman:location}/lib/
  ${xdamage:location}/lib/
  ${xfixes:location}/lib/
  ${zlib:location}/lib/
  ${util-linux:location}/lib/

# helper binaries
cpio = ${cpio:location}/bin/cpio
rpm2cpio = ${rpm2cpio:target}
