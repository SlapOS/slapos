[buildout]
extends =
# Build dependencies: note that bash, bzip2, getconf, grep, tar, and xz are already in /bin and /usr/bin
# TODO: I think findutils is only here to expose xargs, which is already in /usr/bin, so see if we can get away with not requiring it
# If the Python version doesn't default to 2, it might be necessary to include Python 2 as a component and then prepend it to the PATH or some similar trick.
  ../coreutils/buildout.cfg
  ../curl/buildout.cfg
  ../depot_tools/buildout.cfg
  ../git/buildout.cfg
  ../gperf/buildout.cfg
  ../pkgconfig/buildout.cfg
# Runtime dependencies:
  ../fonts/buildout.cfg
  ../fontconfig/buildout.cfg
  ../nspr/buildout.cfg
  ../nss/buildout.cfg

parts =
  chromium-wrapper

# Note that we'll need to proxy the websocket connection to the headless
# Chromium shell, for several reasons. The web server that Chromium
# spins up refuses HTTP requests unless the Host header is localhost or
# an IP address [0], but we need SSL (i.e. wss://) because the frontend
# page is loaded over HTTPS, and the mixed-content policy prevents us
# from loading an ordinary ws:// connection.
# [0] Security issue; see
# https://bugs.chromium.org/p/chromium/issues/detail?id=813540

# TODO: it may be more appropriate to manage our own copy of depot_tools, because I think some of the "gclient sync" commands may modify depot_tools, which could be problematic if other components or software releases depend on a shared copy, and at any rate it causes some build errors: when updating depot_tools, git complains because HEAD has been moved. Is there a way to guarantee a private copy? (This may be a moot point, since I don't think it's used by anything else, anyway, and trying again fixes the git issue.)

# There's nothing special about version 91.0.4472.132. It just happened to be
# the current Chromium stable version at the time of writing.
# TODO: set source URL as a parameter to avoid duplication?
# TODO: change to use either slapos.recipe.build:gitclone or depot tools fetch. Note that if you use gitclone, set develop = true.
[chromium-source]
recipe = plone.recipe.command
path = ${buildout:parts-directory}/${:_buildout_section_name_}
version = 91.0.4472.132
command =
  PATH=$PATH:${git:location}/bin
  rm -rf ${:path}
  mkdir -p ${:path}
  cd ${:path}
  git clone https://chromium.googlesource.com/chromium/src.git
  cd src
  git checkout ${:version}

[chromium]
recipe = slapos.recipe.cmmi
path = ${chromium-source:path}/src
location = ${:path}/out/headless

# Configuration file for GN, the tool to build the actual compilation configuration file.
default-gclient-config =
  solutions = [
    {
      "name": "src",
      "url": "https://chromium.googlesource.com/chromium/src.git",
      "managed": False,
      "custom_deps": {},
      "custom_vars": {},
    },
  ]

# Build configuration options
build-config-options =
  import("//build/args/headless.gn")
  is_debug = false
  symbol_level = 0
  blink_symbol_level = 0

# Create a headless build configuration.
configure-command =
# Sync build dependencies---this is a little finnicky.
  echo '${:default-gclient-config}' > ${chromium-source:path}/.gclient
  gclient sync --revision ${chromium-source:version}
  gclient runhooks
# Generate build configuration files.
  mkdir -p ${:location}
  echo '${:build-config-options}' > ${:location}/args.gn
  gn gen ${:location}

# You can run the headless Chromium shell using
# ${:location}/headless-chromium --remote-debugging-port=1234
# Note that your client browser must be Chromium-based, since Firefox
# and Safari do not support constructible stylesheets yet (see e.g.
# https://bugzilla.mozilla.org/show_bug.cgi?id=1520690).
make-binary =
  autoninja -C ${:location} headless_shell
environment =
# Possible foot-gun: if you specify PATH=...:$PATH, it will literally insert the string '$PATH' on your PATH; buildout won't do the expansion unless you use %(PATH)s
# TODO: make sure it's appropriate for SlapOS components to depend on things in /bin, /usr/bin, etc.
  PATH=${depot_tools:location}:${gperf:location}/bin:${pkgconfig:location}/bin:${coreutils:location}/bin:${git:location}/bin:${curl:location}/bin:%(PATH)s

# Runtime libraries
runtime-libraries =
  ${nspr:location}/lib
  ${nss:location}/lib

# Runtime path
# TODO: see if this part is really necessary
runtime-path =
  ${fontconfig:location}/bin

promises =
  ${:location}/headless_shell

# A default font configuration to fall back on, same as the Firefox one.
[default-font-config]
recipe = slapos.recipe.template:jinja2
template = ${template-fonts-conf:output}
rendered = ${buildout:parts-directory}/${:_buildout_section_name_}/fonts.conf
context =
  key cachedir :cache-dir
  key fonts :fonts
  key includes :includes
fonts =
  ${liberation-fonts:location}
includes =
  ${fontconfig:location}/etc/fonts/conf.d
cache-dir =
  ~/.fontconfig-chromium/

# Create a wrapper around the headless Chromium shell. The wrapper sets some default values for environment variables and is based on the Firefox one.
[chromium-wrapper]
wrapper-name = headless-chromium
part = ${chromium:location}

recipe = slapos.recipe.build
location = ${buildout:bin-directory}/${:wrapper-name}

install =
  import os
  chromium = options['part']
  part = self.buildout[os.path.basename(chromium)]
  with open(location, 'w') as f:
    f.write("""#!/bin/sh -e
  cd {}
  export LD_LIBRARY_PATH={}
  export PATH={}:$PATH
  [ -z $FONTCONFIG_FILE ] && export FONTCONFIG_FILE=${default-font-config:rendered}
  exec ${chromium:path}/out/headless/headless_shell "$@"
  """.format(
    chromium,
    ':'.join(part['runtime-libraries'].split()),
    ':'.join(part['runtime-path'].split()),
  ))
    os.fchmod(f.fileno(), 0o755)
