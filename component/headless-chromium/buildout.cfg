[buildout]
extends =
# Build dependencies:
  ../coreutils/buildout.cfg
  ../curl/buildout.cfg
  ../depot_tools/buildout.cfg
  ../git/buildout.cfg
  ../gperf/buildout.cfg
  ../pkgconfig/buildout.cfg
# Runtime dependencies:
  ../nspr/buildout.cfg
  ../nss/buildout.cfg

parts =
  chromium-wrapper

# TODO: it may be more appropriate to manage our own copy of
# depot_tools, because I think some of the "gclient sync" commands may
# modify depot_tools, which could be problematic if other components or
# software releases depend on a shared copy, and at any rate it causes
# some build errors: when updating depot_tools, git complains because
# HEAD has been moved. Is there a way to guarantee a private copy? (This
# may be a moot point, since I don't think it's used by anything else,
# anyway, and trying again fixes the git issue.)

# Note that the Chromium project recommends using their own `fetch' tool
# rather than doing a `git clone', but it should work just fine.
[chromium-source]
recipe = slapos.recipe.build:gitclone
repository = https://chromium.googlesource.com/chromium/src.git
ignore-cloning-submodules = true
revision = ${:version}
develop = true
git-executable = ${git:location}/bin/git

# We should place the .gclient directory in the parent directory of the
# checkout/repository itself.
location = ${:gclient-location}/${:name}
gclient-location = ${buildout:parts-directory}/${:_buildout_section_name_}

# Theoretically the checkout can be put anywhere as long as you specify
# "name" appropriately in the .gclient file, but in practice it seems
# that some automated tools break. It's safest to put it in a directory
# called "src".
name = src

# There's nothing special about version 91.0.4472.132. It just happened
# to be the current Chromium stable version at the time of writing.
version = 91.0.4472.132

[chromium]
recipe = slapos.recipe.cmmi
path = ${chromium-source:location}
location = ${:path}/out/headless

# Configuration file for GN, the tool to build the actual compilation
# configuration file.
# TODO: consider using
#   target_os = [ "linux" ]
#   target_os_only = True
# to potentially get rid of strip's complaining that it can't recognize
# Android binaries?
default-gclient-config =
  solutions = [
    {
      "name": "${chromium-source:name}",
      "url": "${chromium-source:repository}",
      "managed": False,
      "custom_deps": {},
      "custom_vars": {},
    },
  ]

# Build configuration options
build-config-options =
  import("//build/args/headless.gn")
  is_debug = false
  symbol_level = 0
  blink_symbol_level = 0

# Create a headless build configuration.
configure-command =
# Sync build dependencies---this is a little finnicky.
  echo '${:default-gclient-config}' > ${chromium-source:gclient-location}/.gclient
  gclient sync --revision ${chromium-source:version}
  gclient runhooks
# Generate build configuration files.
  mkdir -p ${:location}
  echo '${:build-config-options}' > ${:location}/args.gn
  gn gen ${:location}

# You can run the headless Chromium shell using
# ${:location}/headless_shell --remote-debugging-port=1234
make-binary =
  autoninja -C ${:location} headless_shell
environment =
  PATH=${depot_tools:location}:${gperf:location}/bin:${pkgconfig:location}/bin:${coreutils:location}/bin:${git:location}/bin:${curl:location}/bin:%(PATH)s

# Make sure to compile libraries needed at runtime.
runtime-libraries =
  ${nspr:location}/lib
  ${nss:location}/lib

# Expose devtools frontend location.
devtools-frontend = ${:location}/gen/third_party/devtools-frontend/src/front_end

binary = ${:location}/headless_shell
promises = ${:binary}

# Place a wrapper script at bin/headless-chromium.
[chromium-wrapper]
recipe = slapos.recipe.template:jinja2
template = ${:_profile_base_location_}/wrapper-template.in
rendered = ${buildout:bin-directory}/headless-chromium
context =
  key chromium_binary chromium:binary
