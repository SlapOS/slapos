[buildout]
# slaposcookbook_recipe_location = ${:parts-directory}/slaposcookbook

extends =
  ../git/buildout.cfg
  ../python3/buildout.cfg
  ../ccache/buildout.cfg
  ../nodejs/buildout.cfg
  ../wget/buildout.cfg
  ../tar/buildout.cfg
  ../libyaml/buildout.cfg
  ../libqhull/buildout.cfg
  ../python-PyYAML/buildout.cfg
  ../cmake/buildout.cfg
  ../bzip2/buildout.cfg
  ../file/buildout.cfg
  ../gcc/buildout.cfg
  ../gdbm/buildout.cfg
  ../gettext/buildout.cfg
  ../libexpat/buildout.cfg
  ../libffi/buildout.cfg
  ../libpng/buildout.cfg
  ../freetype/buildout.cfg
  ../pkgconfig/buildout.cfg
  ../ncurses/buildout.cfg
  ../openssl/buildout.cfg
  ../patch/buildout.cfg
  ../readline/buildout.cfg
  ../sqlite3/buildout.cfg
  ../xz-utils/buildout.cfg
  ../zlib/buildout.cfg
  ../f2c/buildout.cfg

parts =
  pyodide
  nodejs
  npm
  python3.7.2-PyYAML

[node-less]
recipe = slapos.recipe.build:npm
packages = less
node = nodejs
environment =
  PATH=${nodejs:location}/bin:%(PATH)s

[node-uglify-js]
recipe = slapos.recipe.build:npm
packages = uglify-js
node = nodejs
environment =
  PATH=${nodejs:location}/bin:%(PATH)s

[pyodide-src]
recipe = slapos.recipe.build:gitclone
git-executable = ${git:location}/bin/git
repository = https://lab.nexedi.com/Daetalus/pyodide.git
location = ${buildout:parts-directory}/${:_buildout_section_name_}
branch = master

[pyodide-script]
recipe = slapos.recipe.build
location = ${buildout:parts-directory}/${:_buildout_section_name_}
build_dir =  ${buildout:parts-directory}/pyodide-script-test
part_dir = ${buildout:parts-directory}
git-executable = ${git:location}/bin/git
emsdk_set_env_script = ${:build_dir}/emsdk/emsdk/emsdk_set_env.sh
repository = https://lab.nexedi.com/Daetalus/pyodide.git
PKG_CONFIG_PATH=${freetype:location}/lib/pkgconfig:${zlib:location}/lib/pkgconfig:${libpng:location}/lib/pkgconfig
PATH=${git:location}/bin:${pkgconfig:location}/bin:${freetype:location}/bin:${nodejs:location}/bin/:${f2c:location}/bin:${python3.7.2:location}/bin:${cmake:location}/bin:${ccache:location}/bin:${gcc-8.2:location}/bin:${node-less:location}/node_modules/.bin:${node-uglify-js:location}/node_modules/.bin:${xz-utils:location}/bin
CC=${gcc-8.2:location}/bin/gcc
CXX=${gcc-8.2:location}/bin/g++
CPPFLAGS=-I${f2c:location}/include -I${zlib:location}/include -I${xz-utils:location}/include -I${readline:location}/include -I${libexpat:location}/include -I${libffi:location}/include -I${ncurses:location}/include -I${ncurses:location}/include/ncursesw -I${bzip2:location}/include  -I${gdbm:location}/include -I${openssl:location}/include -I${sqlite3:location}/include -I${gettext:location}/include
LD_LIBRARY_PATH_EMSDK=${gcc-8.2:location}/lib:${gcc-8.2:location}/lib64
LD_LIBRARY_PATH=${libpng:location}/lib:${openssl:location}/lib:${readline:location}/lib:${libexpat:location}/lib:${xz-utils:location}/lib:${sqlite3:location}/lib:${gdbm:location}/lib:${bzip2:location}/lib:${ncurses:location}/lib:${libffi:location}/lib
LDFLAGS=-L${zlib:location}/lib -L${xz-utils:location}/lib -L${readline:location}/lib -L${libexpat:location}/lib -L${libffi:location}/lib -L${ncurses:location}/lib -L${bzip2:location}/lib -L${gdbm:location}/lib -L${openssl:location}/lib -L${sqlite3:location}/lib -Wl,-rpath=${zlib:location}/lib -Wl,-rpath=${xz-utils:location}/lib -Wl,-rpath=${readline:location}/lib -Wl,-rpath=${libexpat:location}/lib -Wl,-rpath=${libffi:location}/lib -Wl,-rpath=${ncurses:location}/lib -Wl,-rpath=${bzip2:location}/lib -Wl,-rpath=${gdbm:location}/lib -Wl,-rpath=${openssl:location}/lib -Wl,-rpath=${sqlite3:location}/lib -L${gettext:location}/lib -Wl,-rpath=${gettext:location}/lib -Wl,-rpath=${file:location}/lib
PYTHON_EXECUTABLE=${python3.7.2:location}/bin/
C_INCLUDE_PATH=/srv/slapgrid/slappart19/srv/runner/software/100608c416350c3c5f1f11bde4d11d82/parts/gcc-8.2/include:
openssl_location = ${openssl:location}
stop-on-error=true
script =
  import subprocess, os, shutil
  # shutil.rmtree(self.options['build_dir'], ignore_errors=True)
  # os.mkdir(self.options['location'])
  # call(['rm -rf', self.options['location']], cwd=self.options['part_dir']) 
  #call(['mkdir', self.options['location'])
  cpython_makefile_command = 'sed -ie "s@./configure --prefix@./configure --with-openssl=' + self.options['openssl_location'] + ' --prefix@" ' + self.options['build_dir'] + '/cpython/Makefile'
  change_python3_name = 'ln -s ' + self.options['PYTHON_EXECUTABLE'] + 'python3 ' + self.options['PYTHON_EXECUTABLE'] + 'python'
  command_list = [
    # {'cmd': self.options['git-executable'] + ' clone ' + self.options['repository'] + ' pyodide-script-test', 'cwd': self.options['part_dir']},
    # {'cmd': change_python3_name, 'cwd': self.options['build_dir']},
    {'cmd': 'python --version && make -C emsdk', 'cwd': self.options['build_dir']},
    {'cmd': cpython_makefile_command, 'cwd': self.options['build_dir']},
    {'cmd': 'source ./emsdk/emsdk/emsdk_env.sh', 'cwd': self.options['build_dir']},
  ]
  env = {
    'PKG_CONFIG_PATH':self.options['PKG_CONFIG_PATH'],
    'PATH':self.options['PATH'] + ':' + os.environ['PATH'],
    # 'CPPFLAGS':self.options['CPPFLAGS'],
    'LD_LIBRARY_PATH':self.options['LD_LIBRARY_PATH_EMSDK'],
    'C_INCLUDE_PATH':self.options['C_INCLUDE_PATH'],
    # 'LDFLAGS':self.options['LDFLAGS'],
    'PYTHON_EXECUTABLE':self.options['PYTHON_EXECUTABLE'],
    'CC':self.options['CC'],
    'CXX':self.options['CXX'],
  }

  for command in command_list:
    print(command['cmd'])
    print('1')
    pipe = subprocess.Popen(command['cmd'], cwd=command['cwd'], env=env, shell=True)
    pipe.wait()
  
  # We need to execute the command "./emsdk/emsdk/emsdk_env.sh" to add the emsdk related environment variables.
  # Run "emsdk_env.sh" first, then read the content of "emsdk_set_env.sh" to get the environment variables
  # while not os.file.is_file("./emsdk/emsdk/emsdk_set_env.sh"):
  #  continue
  emsdk_env_content = open(self.options['emsdk_set_env_script'])
  for content in emsdk_env_content:
    # remove "export "
    content = content[7:]
    key, value = content.split('=')
    value = value.rstrip().strip('"')
    try:
      env[key] += ':' + value
    except KeyError:
      env[key] = value
  env['C_INCLUDE_PATH'] += env['EMSCRIPTEN'] + '/system/include/'
  env['CPPFLAGS'] = self.options['CPPFLAGS']
  env['LD_LIBRARY_PATH'] += ':' + self.options['LD_LIBRARY_PATH']
  env['LDFLAGS'] = self.options['LDFLAGS']

  print("Merged environment:")
  print("Merged environment:")
  print("Merged environment:")
  print(env)
  command_list_2 = [
    {'cmd': 'make -C cpython', 'cwd': self.options['build_dir']},
    # make -C CPLAPACK twice, because the first time will report can not find the file './a.out'
    # call make again, the problem gone...
    {'cmd': 'make build/pyodide.asm.js;,'cwd': self.options['build_dir']},
    {'cmd': 'make -C CPLAPACK', 'cwd': self.options['build_dir']},
    {'cmd': 'make -C CPLAPACK', 'cwd': self.options['build_dir']},
    # black magic: Try to compile matplot and scipy, scikit-leanr, pandas lib manually
    # error happened in here
    {'cmd': 'make -C packages', 'cwd': self.options['build_dir']},   
  ]
  
  for command_2 in command_list_2:
    pipe = subprocess.Popen(command_2['cmd'], cwd=command_2['cwd'], env=env, shell=True)
    pipe.wait()

  # clean the LDFLAGS and LD_LIBRARY_PATH, otherwise the matplotlib qhull will get trucated object file.
  env['LDFLAGS'] = ''
  env['LD_LIBRARY_PATH'] = ''
  command_list_3 = [
    {'cmd': 'make -C packages', 'cwd': self.options['build_dir']},
    {'cmd': 'make -e', 'cwd': self.options['build_dir']},
  ]
  
  for command_3 in command_list_3:
    pipe = subprocess.Popen(command_3['cmd'], cwd=command_3['cwd'], env=env, shell=True)
    pipe.wait()

  for i in range(10):
    print("Hello World")

[python3.7.2-PyYAML]
recipe = slapos.recipe.cmmi
python_bin = ${python3.7.2:location}/bin/python3.7
url = https://pyyaml.org/download/pyyaml/PyYAML-3.13.tar.gz
configure-command = true
make-binary = ${:python_bin} setup.py install
environment =
  C_INCLUDE_PATH=${libyaml:location}/include
location = ${buildout:parts-directory}/${:_buildout_section_name_}

[pyodide-emsdk]
recipe = slapos.recipe.cmmi
path = ${pyodide-src:location}/emsdk
configure-command= alias python=${python3.7.2:location}/bin/python3 && make clean
make-options = -e
environment =
  PATH=${f2c:location}/bin:${python3.7.2:location}/bin:${cmake:location}/bin:${ccache:location}/bin:${gcc-8.2:location}/bin:%(PATH)s
  CC=${gcc-8.2:location}/bin/gcc
  CXX=${gcc-8.2:location}/bin/g++
  LD_LIBRARY_PATH=${libpng:location}/lib:${gcc-8.2:location}/lib:${gcc-8.2:location}/lib64
  PYTHON_EXECUTABLE=${python3.7.2:location}/bin/python3.7
make-targets =

# Build pyodide cpython with custom configuration. Otherwise we will get a cpython without ssl support
# The pyodide cpython **must** been build **AFTER** emsdk
[pyodide-cpython]
recipe = slapos.recipe.cmmi
path = ${pyodide-src:location}/cpython
configure-command = sed -ie "s@./configure --prefix@./configure --with-openssl=${openssl:location} --prefix@" ${pyodide-src:location}/cpython/Makefile && source ${pyodide-emsdk:path}/emsdk/emsdk_env.sh
make-options = -e
environment =
  PATH=${xz-utils:location}/bin:${gcc-8.2:location}/bin:%(PATH)s
  CPPFLAGS=-I${zlib:location}/include -I${xz-utils:location}/include -I${readline:location}/include -I${libexpat:location}/include -I${libffi:location}/include -I${ncurses:location}/include -I${ncurses:location}/include/ncursesw -I${bzip2:location}/include  -I${gdbm:location}/include -I${openssl:location}/include -I${sqlite3:location}/include -I${gettext:location}/include
  LDFLAGS=-L${zlib:location}/lib -L${xz-utils:location}/lib -L${readline:location}/lib -L${libexpat:location}/lib -L${libffi:location}/lib -L${ncurses:location}/lib -L${bzip2:location}/lib -L${gdbm:location}/lib -L${openssl:location}/lib -L${sqlite3:location}/lib -Wl,-rpath=${zlib:location}/lib -Wl,-rpath=${xz-utils:location}/lib -Wl,-rpath=${readline:location}/lib -Wl,-rpath=${libexpat:location}/lib -Wl,-rpath=${libffi:location}/lib -Wl,-rpath=${ncurses:location}/lib -Wl,-rpath=${bzip2:location}/lib -Wl,-rpath=${gdbm:location}/lib -Wl,-rpath=${openssl:location}/lib -Wl,-rpath=${sqlite3:location}/lib -L${gettext:location}/lib -Wl,-rpath=${gettext:location}/lib -Wl,-rpath=${file:location}/lib
  CC=${gcc-8.2:location}/bin/gcc
  CXX=${gcc-8.2:location}/bin/g++
  LD_LIBRARY_PATH=${libpng:location}/lib:${gcc-8.2:location}/lib:${gcc-8.2:location}/lib64
make-targets =

[pyodide-packages]
recipe = slapos.recipe.cmmi
path = ${pyodide-src:location}
configure-command = alias python3=${pyodide-cpython:path}/build/3.7.0/host/bin/python3 && source ${pyodide-emsdk:path}/emsdk/emsdk_env.sh
make-options = -e
make-targets =
environment =
  PKG_CONFIG_PATH=${freetype:location}/lib/pkgconfig:${zlib:location}/lib/pkgconfig:${libpng:location}/lib/pkgconfig:$PKG_CONFIG_PATH
  PATH=${gcc-8.2:location}/bin:${f2c:location}/bin:${pkgconfig:location}/bin:${pyodide-cpython:path}/build/3.7.0/host/bin:${nodejs:location}/bin:${node-less:location}/node_modules/.bin:${node-uglify-js:location}/node_modules/.bin:%(PATH)s
  LD_LIBRARY_PATH=${libpng:location}/lib:${gcc-8.2:location}/lib:${gcc-8.2:location}/lib64

[pyodide]
recipe = slapos.recipe.cmmi
path = ${pyodide-src:location}
configure-command = make -e
make-binary =
make-targets = cp -r ./* ${buildout:parts-directory}/${:_buildout_section_name_} 
# configure-command = echo ${python3.7.2-PyYAML:location} && echo ${pyodide-cpython:path} && echo ${pyodide-emsdk:path} && echo ${node-uglify-js:location} && echo ${node-less:location}# ${pyodide-packages:path}
configure-command = echo ${python3.7.2-PyYAML:location} && echo ${pyodide-script:path}
environment =
  PKG_CONFIG_PATH=${freetype:location}/lib/pkgconfig:${zlib:location}/lib/pkgconfig:${libpng:location}/lib/pkgconfig:$PKG_CONFIG_PATH
  PATH=${pkgconfig:location}/bin:${freetype:location}/bin:${nodejs:location}/bin/:${f2c:location}/bin:${python3.7.2:location}/bin:${cmake:location}/bin:${ccache:location}/bin:${gcc-8.2:location}/bin:${node-less:location}/node_modules/.bin:${node-uglify-js:location}/node_modules/.bin:${xz-utils:location}/bin:%(PATH)s
  CC=${gcc-8.2:location}/bin/gcc
  CXX=${gcc-8.2:location}/bin/g++
  CPPFLAGS=-I${f2c:location}/include -I${zlib:location}/include -I${xz-utils:location}/include -I${readline:location}/include -I${libexpat:location}/include -I${libffi:location}/include -I${ncurses:location}/include -I${ncurses:location}/include/ncursesw -I${bzip2:location}/include  -I${gdbm:location}/include -I${openssl:location}/include -I${sqlite3:location}/include -I${gettext:location}/include
  LD_LIBRARY_PATH=${libpng:location}/lib:${gcc-8.2:location}/lib:${gcc-8.2:location}/lib64:${openssl:location}/lib:${readline:location}/lib:${libexpat:location}/lib:${xz-utils:location}/lib:${sqlite3:location}/lib:${gdbm:location}/lib:${bzip2:location}/lib:${ncurses:location}/lib:${libffi:location}/lib
  LDFLAGS=-L${zlib:location}/lib -L${xz-utils:location}/lib -L${readline:location}/lib -L${libexpat:location}/lib -L${libffi:location}/lib -L${ncurses:location}/lib -L${bzip2:location}/lib -L${gdbm:location}/lib -L${openssl:location}/lib -L${sqlite3:location}/lib -Wl,-rpath=${zlib:location}/lib -Wl,-rpath=${xz-utils:location}/lib -Wl,-rpath=${readline:location}/lib -Wl,-rpath=${libexpat:location}/lib -Wl,-rpath=${libffi:location}/lib -Wl,-rpath=${ncurses:location}/lib -Wl,-rpath=${bzip2:location}/lib -Wl,-rpath=${gdbm:location}/lib -Wl,-rpath=${openssl:location}/lib -Wl,-rpath=${sqlite3:location}/lib -L${gettext:location}/lib -Wl,-rpath=${gettext:location}/lib -Wl,-rpath=${file:location}/lib
  PYTHON_EXECUTABLE=${python3.7.2:location}/bin/python3.7

[pyodide-xxx]
recipe = slapos.recipe.cmmi
path = ${pyodide-src:location}
configure-command = export ${:path}/emsdk/emsdk/emscripten/tag-1.38.22/system/include/
environment =
  PKG_CONFIG_PATH=${freetype:location}/lib/pkgconfig:${zlib:location}/lib/pkgconfig:${libpng:location}/lib/pkgconfig:$PKG_CONFIG_PATH
  PATH=${pkgconfig:location}/bin:${freetype:location}/bin:${nodejs:location}/bin/:${f2c:location}/bin:${python3.7.2:location}/bin:${cmake:location}/bin:${ccache:location}/bin:${gcc-8.2:location}/bin:${node-less:location}/node_modules/.bin:${node-uglify-js:location}/node_modules/.bin:${xz-utils:location}/bin:%(PATH)s
  CC=${gcc-8.2:location}/bin/gcc
  CXX=${gcc-8.2-8.2:location}/bin/g++
  CPPFLAGS=-I${f2c:location}/include -I${zlib:location}/include -I${xz-utils:location}/include -I${readline:location}/include -I${libexpat:location}/include -I${libffi:location}/include -I${ncurses:location}/include -I${ncurses:location}/include/ncursesw -I${bzip2:location}/include  -I${gdbm:location}/include -I${openssl:location}/include -I${sqlite3:location}/include -I${gettext:location}/include
  LD_LIBRARY_PATH=${libpng:location}/lib:${gcc-8.2:location}/lib:${gcc-8.2:location}/lib64:${openssl:location}/lib:${readline:location}/lib:${libexpat:location}/lib:${xz-utils:location}/lib:${sqlite3:location}/lib:${gdbm:location}/lib:${bzip2:location}/lib:${ncurses:location}/lib:${libffi:location}/lib
  LDFLAGS=-L${zlib:location}/lib -L${xz-utils:location}/lib -L${readline:location}/lib -L${libexpat:location}/lib -L${libffi:location}/lib -L${ncurses:location}/lib -L${bzip2:location}/lib -L${gdbm:location}/lib -L${openssl:location}/lib -L${sqlite3:location}/lib -Wl,-rpath=${zlib:location}/lib -Wl,-rpath=${xz-utils:location}/lib -Wl,-rpath=${readline:location}/lib -Wl,-rpath=${libexpat:location}/lib -Wl,-rpath=${libffi:location}/lib -Wl,-rpath=${ncurses:location}/lib -Wl,-rpath=${bzip2:location}/lib -Wl,-rpath=${gdbm:location}/lib -Wl,-rpath=${openssl:location}/lib -Wl,-rpath=${sqlite3:location}/lib -L${gettext:location}/lib -Wl,-rpath=${gettext:location}/lib -Wl,-rpath=${file:location}/lib
  PYTHON_EXECUTABLE=${python3.7.2:location}/bin/python3.7
make-options = -e
configure-command = echo ${python3.7.2-PyYAML:location} && echo ${pyodide-cpython:path}