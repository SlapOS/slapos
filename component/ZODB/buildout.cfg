# SlapOS component for ZODB.
# https://zodb.org/

[buildout]
extends =
    ../git/buildout.cfg
    ../python-cffi/buildout.cfg

parts = ZODB/scripts


# ZODB allows to use either ZODB3, ZODB4 or ZODB5.
# To select which version to use users should do:
#
#   [ZODB]
#   major = <ZODB-version-major>
#
# By default ZODB4 is used.
[ZODB]
recipe = slapos.recipe.build
major  = 4
init =
  # link/depend ZODB -> ZODB<X>
  zodb_x = 'ZODB'+options['major']
  zodb_x = self.buildout[zodb_x]
  options['depends'] = '$${%s:egg}' % zodb_x.name

  options['egg'] = zodb_x['egg']
  options['location'] = zodb_x['setup']

  # for ZODB3 also depend on _ZODB3-{ZODB,persistent,BTrees,ZEO}.
  # installing those eggs ensures forward compatibility with ZODB4/5 where
  # instead of single ZODB3 egg, there are separate ZODB,persistent,BTrees,... distributions.
  if options['major'] == '3':
    for egg in ['ZODB','persistent','BTrees','ZEO']:
      z3egg = self.buildout['_ZODB3-%s' % egg]
      options['depends'] += '\n$${%s:egg}' % z3egg.name

  # update [versions] from what is needed by ZODB<X>
  for _ in zodb_x['egg_versions'].splitlines():
    if _ == '' or _.startswith('#'):
        continue
    egg, eq, version = _.split() # 'transaction = 1.7.0'
    assert eq == '='
    self.buildout['versions'][egg] = version
  # propagate updated [versions] -> easy_install
  # (buildout does this in Buildout constructor)
  import zc.buildout.easy_install
  zc.buildout.easy_install.default_versions(self.buildout['versions'])


# ZODB/scripts installs scripts from ZODB
[ZODB/scripts]
recipe  = zc.recipe.egg:scripts
eggs    = ${ZODB:egg}


[_ZODB-git-repository]
recipe  = slapos.recipe.build:gitclone
repository = https://lab.nexedi.com/nexedi/ZODB.git
git-executable = ${git:location}/bin/git

[_ZODB45]
recipe  = zc.recipe.egg:develop
egg     = ZODB
depends = ${persistent:egg} ${BTrees:egg}

# eggs versions that are used by all ZODB{4,5}.
egg_versions =
  BTrees = 4.5.1
  persistent = 4.6.4
  zodbpickle = 1.0.4

  # Provide ZODB3 for those eggs that still care about ZODB3 compatibility -
  # for example wendelin.core. ZODB3 3.11 is just a dependency egg on _latest_
  # ZODB, persistent, BTrees and ZEO.
  ZODB3 = 3.11.0


# ZODB4: we maintain our own 4-nxd branch with patches for wendelin.core to work
# correctly. The patches are backports of what is in ZODB master (ZODB5).
[ZODB4]
<= _ZODB45
setup = ${ZODB4-repository:location}

egg_versions +=
  transaction = 1.7.0

[ZODB4-repository]
<= _ZODB-git-repository
location = ${buildout:parts-directory}/ZODB4
branch   = 4-nxd
revision = 4.4.5-8-g401163753


# ZODB3: similarly to ZODB4 we maintain our 3.10-nxd branch.
[ZODB3]
recipe  = zc.recipe.egg:develop
setup   = ${ZODB3-repository:location}
egg     = ZODB3

egg_versions =
  transaction = 1.6.1
  zdaemon = 2.0.7

[ZODB3-repository]
<= _ZODB-git-repository
location = ${buildout:parts-directory}/ZODB3
branch   = 3.10-nxd
revision = 3.10.7-9-gc72883108

# Stub eggs for ZODB3 to be forward-compatible with ZODB4/5.
[_ZODB3-ZODB45-compat-egg]
recipe  = zc.recipe.egg:develop
setup   = ${ZODB3-repository:location}/ZODB45-compat/${:egg}/setup.py
depends = ${ZODB3:recipe}

[_ZODB3-ZODB]
<= _ZODB3-ZODB45-compat-egg
egg = ZODB

[_ZODB3-persistent]
<= _ZODB3-ZODB45-compat-egg
egg = persistent

[_ZODB3-BTrees]
<= _ZODB3-ZODB45-compat-egg
egg = BTrees

[_ZODB3-ZEO]
<= _ZODB3-ZODB45-compat-egg
egg = ZEO


# ZODB5: pristine upstream
[ZODB5]
<= _ZODB45
setup = ${ZODB5-repository:location}

egg_versions +=
  transaction = 2.4.0

[ZODB5-repository]
<= _ZODB-git-repository
location = ${buildout:parts-directory}/ZODB5
branch   = master
revision = 5.6.0-0-g3d06c0462


# XXX: buildout fails to install properly eggs with setup_requires
[BTrees]
recipe = zc.recipe.egg:custom
egg = ${:_buildout_section_name_}
setup-eggs = ${persistent:egg}

[persistent]
recipe = zc.recipe.egg:custom
egg = ${:_buildout_section_name_}
setup-eggs = ${python-cffi:egg}
