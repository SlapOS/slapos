[service-fluentd]
recipe = slapos.cookbook:wrapper
{%- if slapparameter_dict.get("tls-transport-enabled", False) %}
wrapper-path = {{ directory['bin'] }}/fluentd-service
{%- else %}
wrapper-path = {{ directory['service'] }}/fluentd-service
{%- endif %}
command-line = ${fluentd:location}/bin/fluentd -v -c {{ fluentd_agent_conf }}
environment =
  GEM_PATH=${fluentd:location}/lib/ruby/gems/

{% if slapparameter_dict.get("tls-transport-enabled", False) %}
[fluentd-cert]
recipe = slapos.recipe.build
slapparameter-dict = $${slap-configuration:configuration}
fluentd-agent-conf = {{ fluentd_agent_conf }}
key-file = $${ca-directory:certs}/fluentd.key
cert-file = $${ca-directory:certs}/fluentd.crt
init =
  import os

  fluentd_agent_conf = options['fluentd-agent-conf']
  tls_config_text = (
    "  <transport tls>\n"
    "    cert_path %s\n"
    "    private_key_path %s\n"
    "    private_key_passphrase\n"
    "  </transport>\n"
  ) % (options['cert-file'], options['key-file'])
  tls_tag = "<transport tls>"
  add_tls_section = True
  insert_index = 1

  with open(fluentd_agent_conf, "r+") as conf:
    contents = conf.readlines()
    if any([tls_tag in line for line in contents]):
        add_tls_section = False

    if add_tls_section:
      contents.insert(insert_index, tls_config_text)
      conf.seek(0)
      conf.writelines(contents)
      conf.truncate()

[ca-fluentd]
<= certificate-authority
recipe = slapos.cookbook:certificate_authority.request
key-file = $${fluentd-cert:key-file}
cert-file = $${fluentd-cert:cert-file}
executable = $${service-fluentd:wrapper-path}
wrapper = {{ directory['service'] }}/fluentd-service
{%- endif %}

[publish]
recipe = slapos.cookbook:publish
ipv6-address = {{ ipv6_random }}

{% set part_list = [] -%}

{% for port in port_list -%}
{%   set promise_section_title = 'fluentd-port-' ~ port ~ '-listening' -%}
{%   do part_list.append(promise_section_title) -%}
[{{ promise_section_title }}]
<= monitor-promise-base
promise = check_socket_listening
name = {{ promise_section_title }}.py
config-host = $${slap-configuration:ipv6-random}
config-port = {{ port }}
{% endfor %}

[buildout]
extends = ${monitor-template:output}

parts =
  {%- if slapparameter_dict.get("tls-transport-enabled", False) %}
  certificate-authority-service
  ca-fluentd
  {%- else %}
  service-fluentd
  {%- endif %}
  publish
{%- for part in part_list %}
  {{ part }}
{%- endfor %}
