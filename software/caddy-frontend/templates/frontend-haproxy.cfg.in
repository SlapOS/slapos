global
  pidfile {{ configuration['pid-file'] }}
  # master-worker is compatible with foreground with process management
  master-worker
  expose-experimental-directives
  log {{ configuration['log-socket'] }} local0

defaults
  mode http
  log global
  option httplog
{#-  timeout queue XXX TODO #}
{#-  timeout server XXX TODO #}
{#-  timeout client XXX TODO #}
{#-  timeout connect XXX TODO #}
{#-  retries XXX TODO #}

{%- set SCHEME_PREFIX_MAPPING = { 'http': 'backend-http-info', 'https': 'backend-https-info'} %}
{%- macro frontend_entry(slave_instance, scheme, wildcard) %}
{#-   wildcard switch allows to put dangerous entries in the end, as haproxy parses with first match #}
{#-   if slave_instance[SCHEME_PREFIX_MAPPING[scheme]]['hostname'] and slave_instance[SCHEME_PREFIX_MAPPING[scheme]]['port'] #}
{%-     set host_list = (slave_instance.get('server-alias') or  '').split() %}
{%-     if slave_instance.get('custom_domain') not in host_list %}
{%-       do host_list.append(slave_instance.get('custom_domain')) %}
{%-     endif %}
{%-     set matched = {'count': 0} %}
{%-     for host in host_list %}
{#-       Match up to the end or optional port (starting with ':') #}
{#-       Please note that this matching is quite sensitive to changes and hard to test, so avoid needless changes #}
{%-       if wildcard and host.startswith('*.') %}
{%-         do matched.__setitem__('count', matched['count'] + 1) %}
# match wildcard {{ host }}
  acl is_{{ slave_instance['slave_reference'] }} hdr_reg(host) -i {{ host[2:] }}($|:.*)
{%-       elif not wildcard and not host.startswith('*.') %}
{%-         do matched.__setitem__('count', matched['count'] + 1) %}
  acl is_{{ slave_instance['slave_reference'] }} hdr_reg(host) -i ^{{ host }}($|:.*)
{%-       endif %}
{%-     endfor %}
{%-     if matched['count'] > 0 %}
  use_backend {{ slave_instance['slave_reference'] }}-{{ scheme }} if is_{{ slave_instance['slave_reference'] }}
{%-     endif %}
{#-   endif #}
{%- endmacro %}

{%- macro frontend_common() %}
  # normalize URIs as it's expected by the backends
  http-request normalize-uri path-merge-slashes
  http-request normalize-uri path-strip-dot
  http-request normalize-uri path-strip-dotdot
  # Combined Log Format
  capture request header REMOTE_USER len 255
  capture request header Referer len 255
  capture request header User-Agent len 255
  log-format "%{+E}o %b %ci - %[capture.req.hdr(0)] [%trl] \"%HM %HU %HV\" %ST %B \"%[capture.req.hdr(1)]\" \"%[capture.req.hdr(2)]\" %Ta"
  # setup Via
  http-response add-header Via "%HV rapid-cdn-frontend-{{ configuration['node-id'] }}-{{ configuration['version-hash'] }}"
  # setup Date
  http-after-response set-header Date %[date(),http_date]
  # setup X-Forwarded-For
  http-request set-header X-Forwarded-For "%ci"
{%- endmacro %}
{%- macro hsts_header(slave_instance, scheme) %}
{%-   if scheme == 'https' %}
{%-     if slave_instance['strict-transport-security'] > 0 %}
{%-       set strict_transport_security = ['max-age=%i' % (slave_instance['strict-transport-security'],)] %}
{%-       if slave_instance['strict-transport-security-sub-domains'] %}
{%-         do strict_transport_security.append('; includeSubDomains') %}
{%-       endif %}
{%-       if slave_instance['strict-transport-security-preload'] %}
{%-         do strict_transport_security.append('; preload') %}
{%-       endif %}
    http-response set-header Strict-Transport-Security "{{ ''.join(strict_transport_security) }}"
{%-     endif %}
{%-   endif %}
{%- endmacro %} {# hsts_header #}
frontend http-frontend
  bind {{ configuration['local-ipv4'] }}:{{ configuration['http-port'] }}
{{ frontend_common() }}
  http-request set-header X-Forwarded-Proto http
  http-request set-header X-Forwarded-Port {{ configuration['http-port'] }}
# Here use Host header
{%- for slave_instance in frontend_slave_list -%}
{{ frontend_entry(slave_instance, 'http', False) }}
{%- endfor %}
{%- for slave_instance in frontend_slave_list -%}
{{ frontend_entry(slave_instance, 'http', True) }}
{%- endfor %}

frontend https-frontend
  bind {{ configuration['local-ipv4'] }}:{{ configuration['https-port'] }} ssl crt-list {{ crt_list }}
{{ frontend_common() }}
  http-request set-header X-Forwarded-Proto https
  http-request set-header X-Forwarded-Port {{ configuration['https-port'] }}
# Here use ssl_fc_sni and fallback to Host header
{%- for slave_instance in frontend_slave_list -%}
{{ frontend_entry(slave_instance, 'https', False) }}
{%- endfor %}
{%- for slave_instance in frontend_slave_list -%}
{{ frontend_entry(slave_instance, 'https', True) }}
{%- endfor %}

# Backends
{%- for slave_instance in frontend_slave_list %}
{%-   for (scheme, prefix) in SCHEME_PREFIX_MAPPING.items() %}
{%-     set info_dict = slave_instance.get(prefix, slave_instance.get('backend-http-info')) %}
backend {{ slave_instance['slave_reference'] }}-{{ scheme }}
{%- for disabled_cookie in slave_instance['disabled-cookie-list'] %}
  {#- It's much easier to debug and less prone to errors if done step by step, thus many regexes #}
  # Remove cookie {{ disabled_cookie }} from client Cookies - if in the beginning
  http-request replace-header Cookie ^{{ disabled_cookie }}=[^;]*; *(.*) \1
  # Remove cookie {{ disabled_cookie }} from client Cookies - if in the middle
  http-request replace-header Cookie (.*){{ disabled_cookie }}=[^;]*;? *(.*) \1\3
  # Remove cookie {{ disabled_cookie }} from client Cookies - if in the end
  http-request replace-header Cookie (.*); +{{ disabled_cookie }}=[^;]*;? * \1
{%- endfor %}
{%-   if not slave_instance['disable-via-header'] %}
  http-request add-header Via "%HV rapid-cdn-frontend-{{ configuration['node-id'] }}-{{ configuration['version-hash'] }}"
{%-   endif %}

{{ hsts_header(slave_instance, scheme) }}

{%-     if scheme == 'http' and slave_instance['https-only'] %}
{#-     Support https-only if connected via http #}
  redirect scheme https code 302
{%-     else %}
{%-       if 'hostname' in info_dict and 'port' in info_dict %}
  server {{ slave_instance['slave_reference'] }}-backend-{{ scheme }} {{ info_dict['hostname'] }}:{{ info_dict['port'] }}
{%-         if info_dict['path'] %}
  http-request set-path {{ info_dict['path'] }}%[path]
{%-         endif %} {# if info_dict['path'] #}
{%-       endif %} {# if 'hostname' in info_dict and 'port' in info_dict #}
{%-     endif %} {# if scheme == 'http' and slave_instance['https-only'] #}
{%-   endfor %} {# for (scheme, prefix) in SCHEME_PREFIX_MAPPING.items() #}
{%-   for k, v in slave_instance.items() %}
{#- #  {{ k }} => {{ v }} #}
{%-   endfor %}
{% endfor %}
