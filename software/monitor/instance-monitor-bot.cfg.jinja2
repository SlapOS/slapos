{%- set CONFIGURATION = {} %}
{%- for k, v in slap_configuration.items() %}
{%-   if k.startswith('configuration.') %}
{%-     do CONFIGURATION.__setitem__(k[14:], v) %}
{%-   endif %}
{%- endfor %}
{% set slave_instance_list = [] %}
{% set extra_slave_instance_list = slapparameter_dict.get('extra_slave_instance_list') %}
{% if extra_slave_instance_list %}
{# Create slaves to process with setting up defaults #}
{%   for slave in json_module.loads(extra_slave_instance_list) %}
{%   if 'check_http_code' not in slave %}
{%     do slave.__setitem__('check_http_code', CONFIGURATION['check_http_code']) %}
{%   endif %}
{%   if 'check_frontend_ip' not in slave %}
{%     do slave.__setitem__('check_frontend_ip', CONFIGURATION['check_frontend_ip']) %}
{%   endif %}
{%   do slave_instance_list.append(slave) %}
{%   endfor %}
{% endif %}
{% set part_list = [] %}
{% for slave in slave_instance_list %}
{%   set part_id = slave['slave_reference'] ~ '-promise' %}
{%   do part_list.append(part_id) %}
{%   set safe_name = part_id.replace('_', '').replace('.', '-').replace(' ', '-') %}
[{{part_id}}]
<= monitor-promise-base
module = check_command_execute
name = {{ safe_name }}.py
config-command =
  {{ template_urlchecker_check_result }} ${urlchecker-config:db} {{ slave['url'] }} {{ slave['check_http_code'] }} '{{ slave['check_frontend_ip'] }}'
{% endfor %}

[buildout]
extends = {{ monitor_template_output }}

parts =
  cron
  monitor-base
  publish-connection-information
  urlchecker
{% for part_id in part_list %}
  {{ part_id }}
{% endfor %}

eggs-directory = {{ eggs_directory }}
develop-eggs-directory = {{ develop_eggs_directory }}
offline = true

[urlchecker-config]
recipe = slapos.recipe.template:jinja2
db = ${directory:srv}/urlchecker.db
rendered = ${directory:etc}/urlchecker.ini
template = {{ template_urlchecker_ini }}
slave_instance_list = {{ dumps(slave_instance_list) }}
dns = {{ dumps(CONFIGURATION['dns']) }}

context =
  import json_module json
  key db :db
  key dns :dns
  key slave_instance_list :slave_instance_list

[urlchecker]
recipe = slapos.cookbook:wrapper
config = ${urlchecker-config:rendered}
command-line =
  {{ urlchecker_binary }} bot ${:config}
# XXX: hash-files is workaround until urlchecker will re-read config on each iteration
hash-files =
  ${:config}
wrapper-path = ${monitor-directory:service}/urlchecker

[publish-connection-information]
recipe = slapos.cookbook:publish.serialised
monitor-base-url = ${monitor-publish-parameters:monitor-base-url}
monitor-url = ${monitor-publish-parameters:monitor-url}
monitor-user = ${monitor-publish-parameters:monitor-user}
monitor-password = ${monitor-publish-parameters:monitor-password}

[monitor-instance-parameter]
cors-domains = {{ slapparameter_dict.get('monitor-cors-domains', 'monitor.app.officejs.com') }}
{% if slapparameter_dict.get('monitor-username', '') -%}
username = {{ slapparameter_dict['monitor-username'] }}
{% endif -%}
{% if slapparameter_dict.get('monitor-password', '') -%}
password = {{ slapparameter_dict['monitor-password'] }}
{% endif -%}
interface-url = {{ slapparameter_dict.get('monitor-interface-url', 'https://monitor.app.officejs.com') }}


[monitor-directory]
service = ${buildout:directory}/etc/service
var = ${buildout:directory}/var
srv = ${buildout:directory}/srv
server-log = ${:private}/server-log
monitor-log = ${:private}/monitor-log
cache = ${:var}/cache
mod-ssl = ${:cache}/httpd_mod_ssl

[python-symlink]
recipe = plone.recipe.command
command = ln -sf {{ buildout_bin }}/pythonwitheggs ${monitor-directory:bin}/python
update-command = ${:command}

[slap-configuration]
recipe = slapos.cookbook:slapconfiguration.serialised
computer = ${slap-connection:computer-id}
partition = ${slap-connection:partition-id}
url = ${slap-connection:server-url}
key = ${slap-connection:key-file}
cert = ${slap-connection:cert-file}

[slap-parameter]
