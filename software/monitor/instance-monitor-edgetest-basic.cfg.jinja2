{#- PREPARE #}
{%- set DEFAULT_DICT = {
  'check-status-code': 200,
  'check-http-header-dict': {},
  'check-certificate-expiration-days': 15,
  'failure-amount': 2,
  'check-maximum-elapsed-time': 2
} %}
{%- for default_key in ['check-frontend-ip-list', 'nameserver-list'] %}
{%-   if default_key in slapparameter_dict %}
{%-     do DEFAULT_DICT.__setitem__(default_key, slapparameter_dict[default_key]) %}
{%-   endif %}
{%- endfor %}
{%- set check_dict = {} %}
{%- for check_name, check_definition in slapparameter_dict['check-dict'].items() %}
{%-   set check = DEFAULT_DICT.copy()  %}
{%-   do check.update(check_definition) %}
{%-   do check.__setitem__('-name', check_name) %}
{%-   if 'url' in check %}
{%-     set class = check['check-maximum-elapsed-time'] %}
{%-     if class not in check_dict %}
{%-       do check_dict.__setitem__(class, []) %}
{%-     endif %}
{%-     do check_dict[class].append(check) %}
{%-   endif %}
{%- endfor %}


{#- CONFIGURE #}
{%- set part_list = [] %}
{%- for class, check_list in check_dict.items() %}
{#- class is used to separate surykatka with different timeouts #}
{%-   for check in check_list | sort(attribute='-name') %}
{%-     set part_id = 'http-query-' ~ hashlib_module.md5(check['-name'].encode('utf-8')).hexdigest() ~ '-promise' %}
{%-     do part_list.append(part_id) %}
{%-     set safe_name = part_id.replace('_', '').replace('.', '-').replace(' ', '-') %}
[{{part_id}}]
<= monitor-promise-base
module = check_surykatka_json
name = {{ safe_name }}.py
config-report = http_query
config-url = {{ check['url'] }}
config-status-code = {{ check['check-status-code'] }}
config-http-header-dict = {{ json_module.dumps(check['check-http-header-dict']) }}
config-certificate-expiration-days = {{ check['check-certificate-expiration-days'] }}
config-failure-amount = {{ check['failure-amount'] }}
config-maximum-elapsed-time = {{ check['check-maximum-elapsed-time'] }}
config-ip-list = {{ ' '.join(check['check-frontend-ip-list']) }}
config-json-file = ${surykatka-config-{{ class }}:json}
{%-   endfor %}

[surykatka-bot-promise-{{ class }}]
<= monitor-promise-base
module = check_surykatka_json
name = surykatka-bot-promise-{{ class }}.py
config-report = bot_status
config-json-file = ${surykatka-config-{{ class }}:json}

[surykatka-config-{{ class }}]
recipe = slapos.recipe.template:jinja2
db = ${directory:srv}/surykatka-{{ class }}.db
rendered = ${directory:etc}/surykatka-{{ class }}.ini
template = {{ template_surykatka_ini }}
#slave_instance_list = {{ dumps(slave_instance_list) }}
nameserver_list = {{ dumps(CONFIGURATION['nameserver-list']) }}
json = ${directory:srv}/surykatka-{{ class }}.json
{#- timeout is just a bit bigger than class time #}
timeout = {{ int(class) + 2 }}

context =
  import json_module json
  key db :db
  key nameserver_list :nameserver_list
{#  key slave_instance_list :slave_instance_list #}
  key timeout :timeout

[surykatka-{{ class }}]
recipe = slapos.cookbook:wrapper
config = ${surykatka-config-{{ class }}:rendered}
command-line =
  {{ surykatka_binary }} --run crawl --reload --configuration ${:config}
wrapper-path = ${monitor-directory:service}/${:_buildout_section_name_}
hash-existing-files = ${buildout:directory}/software_release/buildout.cfg

[surykatka-status-json-{{ class }}]
recipe = slapos.recipe.template:jinja2
json = ${surykatka-config-{{ class }}:json}
template = inline:#!/bin/sh
  if {{ surykatka_binary }} --run status --configuration ${surykatka-{{ class }}:config} --output json > ${:json}.tmp ; then                          
    mv -f ${:json}.tmp ${:json}
  else
    rm -f ${:json}.tmp
  fi
rendered = ${monitor-directory:bin}/${:_buildout_section_name_}
mode = 0755

[cron-entry-surykatka-status-{{ class }}]
recipe = slapos.cookbook:cron.d
cron-entries = ${directory:etc}/cron.d
name = surykatka-status-{{ class }}
frequency = */2 * * * *
command = ${surykatka-status-json-{{ class }}:rendered}
{%-   do part_list.append('surykatka-%i'% (class,)) %}
{%-   do part_list.append('surykatka-bot-promise-%i' % (class,)) %}
{%-   do part_list.append('cron-entry-surykatka-status-%i' % (class,)) %}
{%- endfor %}

[buildout]
extends = {{ instance_base_monitor }}
parts +=
{% for part_id in sorted(part_list) %}
  {{ part_id }}
{% endfor %}

# check_dict
# {{ check_dict }}
# slapparameter_dict
{%- for k, v in slapparameter_dict.items() %}
# {{ k }}  ==> {{ v }}
{%- endfor %}
