[buildout]
extends =
  ${monitor2-template:output}
eggs-directory = ${buildout:eggs-directory}
develop-eggs-directory = ${buildout:develop-eggs-directory}
parts =
  publish
  slapproxy_promise
  haproxy_promise


[publish]
<= monitor-publish
recipe = slapos.cookbook:publish
ipv4-url = $${slapproxy:url}
ipv6-url = $${haproxy:url}


[directory]
recipe = slapos.recipe.build:mkdirectory
etc = $${buildout:directory}/etc
service = $${:etc}/service
var = $${buildout:directory}/var
run = $${:var}/run


[macro.promise]
<= monitor-promise-base
name = $${:_buildout_section_name_}.py


[slapproxy.cfg]
recipe = slapos.recipe.template:jinja2
output = $${directory:etc}/$${:_buildout_section_name_}
inline =
  [slapproxy]
  computer_id = {{ slap_connection['computer-id'] }}
  host = $${:ipv4}
  port = $${:port}
  database_uri = $${directory:etc}/slapproxy.db
ipv4 = {{ private_ipv4 }}
port = 4000


[slapproxy]
recipe = slapos.cookbook:wrapper
wrapper-path = $${directory:service}/$${:_buildout_section_name_}
command-line =
  ${slapos-command:bin-directory}/slapos proxy start
    --cfg $${slapproxy.cfg:output}
hash-files =
  $${slapproxy.cfg:output}
ipv4 = $${slapproxy.cfg:ipv4}
port = $${slapproxy.cfg:port}
url = http://$${:ipv4}:$${:port}


[slapproxy_promise]
<= macro.promise
promise = check_url_available
config-url = $${slapproxy:url}


[haproxy.cfg]
recipe = slapos.recipe.template:jinja2
url = ${stack-haproxy-default-backend-config:target}
output = $${directory:etc}/$${:_buildout_section_name_}
context =
  key content :content
  key pidfile :pidfile
  key accepted :accepted-ipv6
pidfile = $${directory:run}/haproxy.pid
content =
  listen slapproxy
    log global
    bind $${:ipv6}:$${:port}
    mode http
    option httplog
    server slapproxy $${slapproxy:ipv4}:$${slapproxy:port}
    tcp-request connection reject if !{ src $${:accepted-ipv6} }
accepted-ipv6 = {{ slapparameter_dict['accepted-client-ipv6'] }}
ipv6 = {{ public_ipv6 }}
port = 4000


[haproxy]
recipe = slapos.cookbook:wrapper
wrapper-path = $${directory:service}/$${:_buildout_section_name_}
socket-path =  $${directory:run}/haproxy.sock
command-line =
  ${haproxy:location}/sbin/haproxy
    -S $${:socket-path},level,operator
    -f $${haproxy.cfg:output}
hash-files = $${haproxy.cfg:output}
url = http://[$${haproxy.cfg:ipv6}]:$${haproxy.cfg:port}


[haproxy_promise]
<= macro.promise
promise = check_socket_listening
config-pathname = $${haproxy:socket-path}
