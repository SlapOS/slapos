[buildout]
extends =
  ${monitor-template:output}

parts =
  peertube-yaml
  peertube-service
  peertube-listen-promise
  peertube-parameters
  publish-connection-parameter

eggs-directory = ${buildout:eggs-directory}
develop-eggs-directory = ${buildout:develop-eggs-directory}
offline = true

[peertube-passwd]
recipe = slapos.cookbook:generate.password
storage-path = {{ directory_etc }}/.peertube_user
bytes = 8
username = root

[peertube-yaml]
recipe = slapos.recipe.template
url = ${template-peertube-yaml:output}
output = {{ directory_config }}/peertube.yaml

[peertube-listen-promise]
<= monitor-promise-base
promise = check_url_available
name = peertube_listen.py
config-verify = 0
config-url = https://$${frontend:connection-domain}

[peertube-service]
recipe = slapos.recipe.template
url = ${template-peertube-service:output}
output = {{ directory_services }}/peertube

[frontend]
<= slap-connection
recipe = slapos.cookbook:requestoptional
name = PeerTube Server Frontend
# XXX We have hardcoded SR URL here.
software-url = http://git.erp5.org/gitweb/slapos.git/blob_plain/HEAD:/software/apache-frontend/software.cfg
slave = true
{% if slapparameter_dict.get('frontend-url', 'false') != 'false' -%}
state = stopped
{% endif -%}
config-type = websocket
config-websocket-path-list = /socket.io /socket /tracker/socket
config-url = https://[{{ nginx_ip }}]:{{ nginx_port }}
return = domain secure_access

[peertube-parameters]
recipe = slapos.recipe.build
slapparameter-dict = {{ slapparameter_dict }}
default-frontend-url = $${frontend:config-url}
working-dir = ${peertube:location}
node-config-dir={{ directory_config }}
node-env=production
npm-bin=${nodejs:location}/bin/npm
default-parameters =
  {
    "name" : "Peertube in Slapos",
    "frontend-url" : "",
    "short_description" : "PeerTube, an ActivityPub-federated video streaming platform using P2P directly in your web browser.",
    "description" : "Welcome to this PeerTube instance!",
    "terms" : "No terms for now.",
    "code_of_conduct" : "",
    "moderation_information" : "",
    "creation_reason" : "",
    "administrator" : "",
    "maintenance_lifetime" : "",
    "business_model" : "",
    "hardware_information" : ""
  }
init =
  from six.moves.urllib.parse import urlparse
  import json
  default_parameters = json.loads(options.get('default-parameters').strip())
  default_parameters['frontend-url'] = options['default-frontend-url']
  parameters = dict(default_parameters, **options['slapparameter-dict'])
  # options is not a dict...
  options['name'] = parameters['name']
  options['frontend-url'] = parameters['frontend-url']
  options['short_description'] = parameters['short_description']
  options['description'] = parameters['description']
  options['terms'] = parameters['terms']
  options['code_of_conduct'] = parameters['code_of_conduct']
  options['moderation_information'] = parameters['moderation_information']
  options['creation_reason'] = parameters['creation_reason']
  options['administrator'] = parameters['administrator']
  options['maintenance_lifetime'] = parameters['maintenance_lifetime']
  options['business_model'] = parameters['business_model']
  options['hardware_information'] = parameters['hardware_information']
  url = urlparse(options.get('frontend-url'))
  if url.port:
    options['host'] = '[' + url.hostname + ']'
    options['port'] = str(url.port)
  else:
    options['host'] = url.hostname
    options['port'] = str(443)

[publish-connection-parameter]
recipe = slapos.cookbook:publish
frontend-hostname = $${frontend:connection-domain}
backend-url = $${frontend:config-url}
frontend-url = $${peertube-parameters:frontend-url}
password = $${peertube-passwd:passwd}
username = root
