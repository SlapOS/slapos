[buildout]
extends =
  ${monitor-template:output}

parts =
  service-redis
  promise-redis
  postgresql
  postgresql-extension
  nginx-service
  nginx-listen-promise
  peertube-service
  peertube-configuration


eggs-directory = ${buildout:eggs-directory}
develop-eggs-directory = ${buildout:develop-eggs-directory}
offline = true

[directory]
recipe = slapos.cookbook:mkdirectory
etc = $${buildout:directory}/etc
srv = $${buildout:directory}/srv
var = $${buildout:directory}/var
log = $${:var}/log
run = $${:var}/run
www = $${:srv}/www
nginx = $${:etc}/nginx
nginx_sites-available = $${:nginx}/sites-available
nginx_sites-enabled = $${:nginx}/sites-enabled
varnginx = $${:var}/nginx
services = $${:etc}/service
peertube_directory = $${:srv}/var/www/peertube
config = $${:var}/www/peertube/config
storage = $${:var}/www/peertube/storage
versions = $${:var}/www/peertube/versions
ssl = $${:etc}/ssl

[peertube-configuration]
recipe = slapos.recipe.build
production_config_template = ${peertube:location}/config/production.yaml.example
peertube_directory = $${directory:peertube_directory}
production_config_prod = $${directory:config}/production.yaml
default_yaml = ${peertube:location}/config/default.yaml
default_yaml_prod = $${directory:config}/default.yaml
nginx_sites-available = ${peertube:location}/support/nginx/peertube
nginx_sites-available_prod = $${directory:nginx_sites-available}/peertube
nginx_sites-enabled_prod = $${directory:nginx_sites-enabled}/peertube
peertube_service = ${peertube:location}/support/systemd/peertube.service
peertube_service_prod = $${directory:services}/peertube.service
peertube_config = $${directory:config}
peertube_code_dir = ${peertube:location}
install =
  import shutil, os
  shutil.copyfile(options['default_yaml'],  options['default_yaml_prod'])

  with open(options['nginx_sites-available'], "r", encoding='utf-8') as example_file:
    with open(options['nginx_sites-available_prod'], "w", encoding='utf-8') as prod_file:
      for line in example_file:
          if "WEBSERVER_HOST" in line:
            line = line.replace('$', '')
            line = line.replace("{WEBSERVER_HOST}", "https://[$${nginx-configuration:ip}]/$${nginx-configuration:port}")
          if "{PEERTUBE_HOST}" in line:
            line = line.replace('$', '')
            line = line.replace("{PEERTUBE_HOST}", "127.0.0.1:9000")
          if "ssl_certificate" in line:
            line = ''
          prod_file.write(line)

  if not os.path.exists(options['nginx_sites-enabled_prod']):
    os.symlink(options['nginx_sites-available_prod'], options['nginx_sites-enabled_prod'])

  with open(options['production_config_template'], "r", encoding='utf-8') as example_file:
    with open(options['production_config_prod'], "w", encoding='utf-8') as prod_file:
      for line in example_file:
          if "hostname: 'example.com'" in line:
            line = line.replace("example.com", "https://[$${nginx-configuration:ip}]/$${nginx-configuration:port}")
          if "password: 'peertube'" in line:
            line = line.replace("peertube", "$${postgresql:password}")
          if "/var/www/peertube" in line:
            line = line.replace("/var/www/peertube", options['peertube_directory'])
          prod_file.write(line)

[peertube-service]
recipe = slapos.recipe.template
url = ${template-peertube-service:output}
output = $${directory:services}/peertube

[postgresql-password]
recipe = slapos.cookbook:generate.password

[postgresql]
recipe = slapos.cookbook:postgres
bin = ${postgresql10:location}/bin/
services = $${directory:services}
dbname  = peertube_prod
superuser = peertube
password = $${postgresql-password:passwd}
pgdata-directory = $${directory:srv}/postgresql

ipv4 = $${instance-parameter:ipv4-random}
# disable listening on ipv6
ipv6 =
port = 5432

[postgresql-extension]
recipe = slapos.cookbook:wrapper
wrapper-path = $${directory:bin}/$${:_buildout_section_name_}
command-line =
    $${postgresql:bin}/psql -c "CREATE EXTENSION pg_trgm;" $${postgresql:dbname}
    $${postgresql:bin}/psql -c "CREATE EXTENSION unaccent;" $${postgresql:dbname}

[service-postgresql]
recipe  = slapos.cookbook:postgres
bin     = {{ postgresql_location }}/bin
services= $${directory:service}

#################################
# Nginx service
#################################
[nginx-service]
recipe = slapos.recipe.template
url = ${template-nginx-service:output}
output = $${directory:services}/nginx
virtual-depends =
  $${nginx-configuration:ip}

[nginx-listen-promise]
<= monitor-promise-base
promise = check_url_available
name = nginx_listen.py
config-host = [$${nginx-configuration:ip}]
config-port = $${nginx-configuration:port}
config-url = https://$${:config-host}/$${:config-port}

[nginx-configuration]
recipe = slapos.recipe.template
url = ${template-nginx-configuration:output}
output = $${directory:etc}/nginx.cfg
access_log = $${directory:log}/nginx-access.log
error_log = $${directory:log}/nginx-error.log
nginx_sites-available = $${directory:nginx_sites-available}/peertube
nginx_sites-enabled = $${directory:nginx_sites-enabled}/peertube
ip = $${instance-parameter:ipv6-random}
port = 9443
ssl_key = $${directory:ssl}/nginx.key
ssl_csr = $${directory:ssl}/nginx.csr
ssl_crt = $${directory:ssl}/nginx.crt

#############
#   Redis   #
#############
[redis]
recipe  = slapos.cookbook:mkdirectory
srv     = $${directory:srv}/redis
log     = $${directory:log}/redis


[service-redis]
recipe  = slapos.cookbook:redis.server
wrapper = $${directory:services}/redis
promise-wrapper = $${directory:bin}/redis-promise

server-dir  = $${redis:srv}
config-file = $${directory:etc}/redis.conf
log-file    = $${redis:log}/redis.log
pid-file    = $${directory:run}/redis.pid
use-passwd  = false
unixsocket  = $${:server-dir}/redis.socket
# port = 0 means "don't listen on TCP at all" - listen only on unix socket
ipv6    = ::1
port    = 0

# server-bin  = ${buildout:parts-directory}/redis/bin/redis-server
server-bin = ${redis28:location}/bin/redis-server
cli-bin  = ${redis28:location}/bin/redis-cli
depend  =
    $${logrotate-entry-redis:recipe}

[promise-redis]
<= monitor-promise-base
promise = check_command_execute
name = promise-redis.py
config-command = $${service-redis:promise-wrapper}

[logrotate-entry-redis]
<= logrotate-entry-base
log     = $${redis:log}/*.log
name = redis

#################################
# SlapOS service
#################################
[instance-parameter]
recipe = slapos.cookbook:slapconfiguration
computer = $${slap-connection:computer-id}
partition = $${slap-connection:partition-id}
url = $${slap-connection:server-url}
key = $${slap-connection:key-file}
cert = $${slap-connection:cert-file}
configuration._ = {}

[publish-connection-parameter]
recipe = slapos.cookbook:publish
# url = $${peertube-instance:url}
