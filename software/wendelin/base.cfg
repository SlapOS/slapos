[eggs]
initialization =
  import scipy.spatial.ckdtree # load our own libstdc++ explicitly at the very beginning
extra-paths +=
  ${wendelin:location}
eggs +=
  astor
  ${scipy:egg}
  ${msgpack-python:egg}
  ${msgpack-numpy:egg}
  ${ipython:egg}

[generic_testrunner_init]
recipe = slapos.recipe.build
init =
  import struct
  gcc = self.buildout['gcc']
  options['initialization'] %= (
    gcc['prefix'] + '/lib%s/libstdc++.so' % (8 * struct.calcsize("P"))
    ) if 'part' in gcc else ''
initialization =
  # The 4 lines below will replace the process with another one, with the proper
  # LD_PRELOAD environment variable. This is necessary because LD_PRELOAD is only
  # taken into account when the process starts. Modifying it in runtime doesn't
  # work.
  import os
  if not os.getenv('LD_PRELOAD'):
    os.environ['LD_PRELOAD'] = %r
    os.execve(os.path.realpath(__file__), sys.argv, os.environ)

[test_suite_runner]
# we need to override the test suite runner to add our custom libstdc++ dynamic
# library to the path
initialization +=
  ${generic_testrunner_init:initialization}

[testrunner]
# we need to override the test suite runner to add our custom libstdc++ dynamic
# library to the path
initialization +=
  ${generic_testrunner_init:initialization}

[erp5_repository_list]
repository_id_list += wendelin

[default-bt5]
list =
  erp5_full_text_mroonga_catalog
  erp5_wendelin_configurator

[local-bt5-repository]
list += ${wendelin:location}/bt5

# Jupyter is by default enabled in Wendelin
# and also the soft limit of open file descriptors is set
# to the hard limit.
[erp5-defaults]
jupyter-enable-default = true
with-max-rlimit-nofile-enable-default = true

[wendelin]
recipe = slapos.recipe.build:gitclone
git-executable = ${git:location}/bin/git
repository = https://lab.nexedi.com/nexedi/wendelin.git
branch = master

