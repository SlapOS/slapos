#!/usr/bin/env python3
import os
import sys
import subprocess
import logging
import time
from datetime import datetime

# Configure logging
log_file = "{{ directory['log'] }}/ollama-model-download.log"
logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)


def main():
    model_name = "{{ slap_configuration.get('model', 'deepseek-r1:14b') }}"
    models_dir = "{{ directory['models'] }}"
    ollama_bin = "{{ ollama_location }}/ollama"
    state_file = "{{ directory['var'] }}/run/ollama-model-download.state"

    # Ensure the state file directory exists
    os.makedirs(os.path.dirname(state_file), exist_ok=True)

    logging.info(f"Starting model download: {model_name}")
    logging.info(f"Models will be stored at: {models_dir}")

    # Ensure the models directory exists
    os.makedirs(models_dir, exist_ok=True)

    # Set environment variable for Ollama models path
    env = os.environ.copy()
    env["OLLAMA_MODELS"] = models_dir

    # Check if the model already exists
    try:
        result = subprocess.run(
            [ollama_bin, "list"],
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        if model_name in result.stdout:
            logging.info(f"Model {model_name} already exists, skipping download")
            # Update state file to indicate success
            with open(state_file, 'w') as f:
                f.write('')  # empty file indicates success
            return 0
    except Exception as e:
        logging.error(f"Error checking for existing model: {str(e)}")
        # Update state file to indicate error
        with open(state_file, 'w') as f:
            f.write(f"Error checking model: {str(e)}")
        return 1

    # Download the model
    try:
        logging.info(f"Beginning download of model {model_name}...")
        start_time = time.time()

        process = subprocess.Popen(
            [ollama_bin, "pull", model_name],
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1
        )

        # Log download progress in real time
        for line in iter(process.stdout.readline, ''):
            logging.info(line.strip())
            sys.stdout.write(line)
            sys.stdout.flush()

        process.stdout.close()
        return_code = process.wait()

        end_time = time.time()
        duration = end_time - start_time

        if return_code == 0:
            logging.info(f"Model {model_name} downloaded successfully in {duration:.2f} seconds")
            # Update state file to indicate success
            with open(state_file, 'w') as f:
                f.write('')  # empty file indicates success
            return 0
        else:
            logging.error(f"Model download failed with return code: {return_code}")
            # Update state file to indicate error
            with open(state_file, 'w') as f:
                f.write(f"Download failed, return code: {return_code}")
            return 1

    except Exception as e:
        logging.error(f"Error during model download: {str(e)}")
        # Update state file to indicate error
        with open(state_file, 'w') as f:
            f.write(f"Error downloading model: {str(e)}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
