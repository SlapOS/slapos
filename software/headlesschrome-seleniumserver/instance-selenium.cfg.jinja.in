{% set parameter_dict = dict(default_parameter_dict, **parameter_dict) -%}
[buildout]
parts =
  monitor-base
  promises
  publish-connection-parameter

extends = ${monitor-template:output}

[fontconfig-conf]
recipe = slapos.recipe.template:jinja2
url = ${template-fonts-conf:output}
output = $${directory:etc}/fonts.conf
context =
    key cachedir directory:fontconfig-cache
    key fonts :fonts
    key includes :includes
fonts =
    ${android-fonts:location}
    ${dejavu-fonts:location}
    ${ipa-fonts:location}
    ${ipaex-fonts:location}
    ${liberation-fonts:location}
    ${ocrb-fonts:location}
    $${directory:fonts}
# XXX we don't include conf.d for now, to keep compatibility with current font selection problems.
includes =
#    ${fontconfig:location}/etc/fonts/conf.d

# For selenium server options:
# https://github.com/SeleniumHQ/selenium/wiki/Grid2#configuring-the-nodes-by-command-line
[selenium-server-hub-instance]
recipe = slapos.cookbook:wrapper
wrapper-path = $${directory:services}/$${:_buildout_section_name_}
command-line =
  ${java-re-8:location}/bin/java
    -jar ${selenium-server:target}
    -host $${:hostname}
    -port $${:port}
    -role hub
    -maxSession {{ parameter_dict['slotQuantity'] }}
    -newSessionWaitTimeout 600000
    --debug

# newSessionWaitTimeout: let clients wait in the queue when no node are available
# maxSession: to accept enough clients
hostname =  {{ partition_ipv4 }}
port = 4444
base-url = http://$${:hostname}:$${:port}
url = $${:base-url}/wd/hub
register-url = $${:base-url}/grid/register/
api-url = $${:base-url}/grid/api/hub


[selenium-server-node-instance]
# Macro for a selenium server node
capabilities =
port =
java-args =

recipe = slapos.cookbook:wrapper
wrapper-path = $${directory:services}/$${:_buildout_section_name_}
command-line =
  ${java-re-8:location}/bin/java $${:java-args}
    -jar ${selenium-server:target}
    -host $${:hostname}
    -port $${:port}
    -role node
    -timeout 300
    -hub $${selenium-server-hub-instance:register-url}
    -capabilities $${:capabilities}
    --debug

# browsers and drivers are in buildout bin-directory, so we add that directory to to $PATH
environment =
  PATH=${buildout:bin-directory}
  FONTCONFIG_FILE=$${fontconfig-conf:output}
hostname = {{ partition_ipv4 }}

[chromium-address]
recipe = slapos.cookbook:free_port
minimum = 7781
maximum = 7791
ip = $${selenium-server-node-instance:hostname}

[selenium-server-node-instance-chromium-120]
<= selenium-server-node-instance
capabilities = browserName=chrome,maxInstances={{ parameter_dict['slotQuantity'] }},platform=LINUX,version=${chromium-120:version},chrome_binary=${chromium-wrapper-120:location}
java-args = -Dwebdriver.chrome.driver=${chromedriver-wrapper-120:location}
port = $${chromium-address:port}

[selenium-server-admin-password]
recipe = slapos.cookbook:generate.password
username = admin
bytes = 12

[selenium-server-selenium-password]
recipe = slapos.cookbook:generate.password
username = selenium
bytes = 12

[selenium-server-frontnend-certificate]
recipe = plone.recipe.command
command =
  if [ ! -e $${:cert-file} ]
  then
    ${openssl-output:openssl} req -x509 -nodes -days 3650 \
      -subj "/C=AA/ST=X/L=X/O=Dis/CN=$${:common-name}" \
      -newkey rsa:2048 -keyout $${:cert-file} \
      -out $${:cert-file}
  fi
update-command = $${:command}
cert-file = $${directory:var}/$${:_buildout_section_name_}.pem
common-name = $${selenium-server-frontend-configuration:ip}
location =
  $${:cert-file}

[server-address]
recipe = slapos.cookbook:free_port
minimum = 9430
maximum = 9458
ip = $${selenium-server-frontend-configuration:ip}

[selenium-server-frontend-configuration]
ip = {{ partition_ipv6 }}
hostname = [$${:ip}]
port = $${server-address:port}
path-admin = /grid/console
path-hub = /wd/hub
pidfile = $${directory:run}/haproxy.pid

[selenium-server-frontend-config]
recipe = slapos.recipe.template:jinja2
url = ${stack-haproxy-default-backend-config:target}
output = $${directory:etc}/$${:_buildout_section_name_}
context =
  key pidfile selenium-server-frontend-configuration:pidfile
  key content :content

content =
  frontend app
    log global
    bind $${selenium-server-frontend-configuration:ip}:$${selenium-server-frontend-configuration:port} ssl crt $${selenium-server-frontnend-certificate:cert-file} alpn h2,http/1.1
    use_backend hub if { path_beg $${selenium-server-frontend-configuration:path-hub} }
    use_backend admin if { path_beg $${selenium-server-frontend-configuration:path-admin} }

  userlist hub
    user $${selenium-server-selenium-password:username} insecure-password $${selenium-server-selenium-password:passwd}
  backend hub
    acl auth_ok http_auth(hub)
    http-request auth realm "Selenium Server" unless auth_ok
    server hub $${selenium-server-hub-instance:hostname}:$${selenium-server-hub-instance:port}

  userlist admin
    user $${selenium-server-admin-password:username} insecure-password $${selenium-server-admin-password:passwd}
  backend admin
    acl auth_ok http_auth(admin)
    http-request auth realm "Grid Admin" unless auth_ok
    server admin $${selenium-server-hub-instance:hostname}:$${selenium-server-hub-instance:port}


[selenium-server-frontend-instance]
recipe = slapos.cookbook:wrapper
wrapper-path = $${directory:services}/$${:_buildout_section_name_}
command-line =
  ${haproxy:location}/sbin/haproxy -f $${selenium-server-frontend-config:output}
hash-existing-files = $${buildout:directory}/software_release/buildout.cfg
hash-files =
  $${selenium-server-frontend-config:output}
ip = $${selenium-server-frontend-configuration:ip}
hostname = $${selenium-server-frontend-configuration:hostname}
port = $${selenium-server-frontend-configuration:port}
admin-url = https://$${selenium-server-admin-password:username}:$${selenium-server-admin-password:passwd}@$${:hostname}:$${:port}$${selenium-server-frontend-configuration:path-admin}
url = https://$${selenium-server-selenium-password:username}:$${selenium-server-selenium-password:passwd}@$${:hostname}:$${:port}$${selenium-server-frontend-configuration:path-hub}

[selenium-server-apache-frontend]
<= slap-connection
recipe = slapos.cookbook:requestoptional
name = Selenium Public Frontend
# XXX We have hardcoded SR URL here.
software-url = http://git.erp5.org/gitweb/slapos.git/blob_plain/HEAD:/software/apache-frontend/software.cfg
shared = true
config-url = $${selenium-server-frontend-instance:url}

config-https-only = true
return = domain secure_access

[promises]
recipe =
instance-promises =
  $${selenium-server-frontend-listen-promise:name}
  $${selenium-server-hub-listen-promise:name}
  $${selenium-server-hub-nodes-registered-promise:name}
  $${selenium-server-node-instance-chromium-120-listen-promise:name}

[check-port-listening-promise]
<= monitor-promise-base
promise = check_socket_listening
name = $${:_buildout_section_name_}.py

[selenium-server-frontend-listen-promise]
<= check-port-listening-promise
config-host = $${selenium-server-frontend-instance:ip}
config-port = $${selenium-server-frontend-instance:port}

[selenium-server-hub-listen-promise]
<= check-port-listening-promise
config-host = $${selenium-server-hub-instance:hostname}
config-port = $${selenium-server-hub-instance:port}

# Promise waiting for all nodes to be registered
[selenium-server-hub-nodes-registered-promise]
<= monitor-promise-base
promise = check_command_execute
name = $${:_buildout_section_name_}.py
config-command =
  $${selenium-server-check-nodes-registered:output} $${selenium-server-hub-instance:api-url} $${:expected-node-count}
expected-node-count = {{ parameter_dict['slotQuantity'] }}

[selenium-server-check-nodes-registered]
recipe = slapos.recipe.template
output = $${directory:bin}/$${:_buildout_section_name_}
mode = 0755
inline =
  #!${buildout:executable}
  import json, urllib.request, sys
  api_url = sys.argv[1]
  expected_node_count = int(sys.argv[2])
  actual_node_count = json.load(urllib.request.urlopen(api_url))['slotCounts']['total']
  sys.exit(0 if expected_node_count == actual_node_count else 1)

[selenium-server-node-instance-chromium-120-listen-promise]
<= check-port-listening-promise
config-host = $${selenium-server-node-instance-chromium-120:hostname}
config-port = $${selenium-server-node-instance-chromium-120:port}

[publish-connection-parameter]
recipe = slapos.cookbook:publish
backend-url = $${selenium-server-hub-instance:url}
url = $${selenium-server-frontend-instance:url}
admin-url = $${selenium-server-frontend-instance:admin-url}
frontend-url = $${selenium-server-apache-frontend:connection-secure_access}
user = $${selenium-server-selenium-password:username}
pass = $${selenium-server-selenium-password:passwd}

[directory]
recipe = slapos.cookbook:mkdirectory
etc = $${buildout:directory}/etc
var = $${buildout:directory}/var
srv = $${buildout:directory}/srv
bin = $${buildout:directory}/bin

services = $${:etc}/service
fonts = $${:srv}/fonts/
fontconfig-cache = $${buildout:directory}/.fontconfig

run = $${:var}/run
