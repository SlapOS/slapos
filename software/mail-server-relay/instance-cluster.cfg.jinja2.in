[buildout]
extends =
  ${monitor2-template:output}
parts =
  monitor-base
  publish-connection-information
  publish-shared

eggs-directory = ${buildout:eggs-directory}
develop-eggs-directory = ${buildout:develop-eggs-directory}
offline = true

[request-relay-base]
<= slap-connection
recipe = slapos.cookbook:request.serialised
software-url = $${slap-connection:software-release-url}
software-type = relay
config-monitor-password = $${monitor-instance-parameter:password}
{% for key, value in slapparameter_dict['default-relay-config'].items() -%}
config-{{ key }} = {{ dumps(value) }}
{% endfor -%}
{% set mail_domains = list(slap_configuration.get('valid-shared-instance-list', []) | map(attribute='parameters')) -%}
{% set whitelist = set(slapparameter_dict['outbound-domain-whitelist']) -%}
{% for domain in mail_domains -%}
{%  do domain.__setitem__('can-send', domain['name'] in whitelist) -%}
{% endfor -%}
config-mail-domains = {{ dumps(mail_domains) }}
return =
  smtp-ipv6
  smtp-port

{% if "relay-domain" in slapparameter_dict %}
{% set relay_host = slapparameter_dict['relay-domain'] %}
{% else %}
{% set relay_host = "$${request-relay-" + next(iter(slapparameter_dict['topology'].keys())) + ":connection-smtp-ipv6}" %}
{% endif %}

[publish-connection-information]
recipe = slapos.cookbook:publish.serialised
<= monitor-publish
dns-entries =
{% for domain in mail_domains | selectattr('can-send', 'eq', True) %}
  {{ domain['name'] }} MX 10 {{ relay_host }}
{%- endfor %}

{% for relay_name, config in slapparameter_dict['topology'].items() -%}
[request-relay-{{ relay_name }}]
<= request-relay-base
name = {{ relay_name }}
state = {{ config.get('state', 'started') }}

{% for key, value in config.get('config', {}).items() -%}
config-{{ key }} = {{ dumps(value) }}
{% endfor -%}

{% for key, value in config.get('sla', {}).items() -%}
sla-{{ key }} = {{ dumps(value) }}
{% endfor -%}

{% endfor -%}

[request-all-relays]
depends =
{% for relay_name in slapparameter_dict['topology'].keys() %}
  $${request-relay-{{ relay_name }}:recipe}
{% endfor -%}


# Shared instances (domains)
# ----------------------------

[publish-shared]
recipe = slapos.recipe.build
depends =
  $${request-all-relays:depends}
# JSON store for mapping domain -> slave reference
# Requesting same (reference, domain) again is a no-op, this happens normally
# Error only if a different reference claims an already assigned domain
target = $${directory:etc}/relay-domains.json
init =
  import json, os
  whitelist = {{ whitelist }}
  target = options['target']

  try:
    with open(target, 'r') as fp:
      data = json.load(fp)
  except Exception:
    data = {}

  persistent_mapping = dict(data)
  current_mapping = dict(data)

  slaves = {{ (slap_configuration.get('valid-shared-instance-list', [])) }}
  for slave in slaves:
    ref = slave['reference']
    name = slave['parameters']['name']

    base_section = f"""
  [publish-{ref}]
  recipe = slapos.cookbook:publish.serialised
  -slave-reference = {ref}"""

    existing_ref = current_mapping.get(name)

    if existing_ref == ref:
      pass  # nothing to do
    elif existing_ref is None:
      current_mapping[name] = ref  # claim it
      if name not in persistent_mapping:
        persistent_mapping[name] = ref
    else:
      error_value = 'duplicate_domain_existing' if name in persistent_mapping else 'duplicate_domain_in_request'
      section = base_section + f"""
  domain = {name}
  error = {error_value}
      """
      self.buildout.parse(section)
      continue

    section = base_section + """
  dns-entries =
    """
    if name in whitelist:
      section_extra = """
  outbound-host = {{ relay_host }}
  outbound-smtp-port = 10025"""
    else:
      section_extra = """
  outbound-host =
  outbound-smtp-port = """
    self.buildout.parse(section + section_extra)

  self.output = json.dumps(persistent_mapping, sort_keys=True)

  options['location'] = ''  # we don't care about the part folder existing
install =
  with open(options['target'], 'w') as fp:
    fp.write(self.output)
