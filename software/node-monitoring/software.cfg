[buildout]
extends =
# Python components
  ../../component/pandas/buildout.cfg
  ../../component/scipy/buildout.cfg
  ../../component/statsmodels/buildout.cfg
# Generics
  ../../component/defaults.cfg
  ../../stack/monitor/buildout.cfg
  ../../stack/slapos.cfg
<<<<<<< HEAD
  buildout.hash.cfg
=======
>>>>>>> xav/node-monitoring-sr

parts =
  slapos-cookbook
  instance.cfg

# >>>>>>>>>>>>
[slapos.toolbox-repository]
recipe = slapos.recipe.build:gitclone
<<<<<<< HEAD
repository = https://lab.nexedi.com/Just1/slapos.toolbox.git
branch = json-promise
git-executable = ${git:location}/bin/git

=======
repository = https://lab.nexedi.com/xavier_thompson/slapos.toolbox.git
branch = check_disk_space_on_json_promise
git-executable = ${git:location}/bin/git

[slapos-toolbox-dependencies]
eggs +=
  ${pandas:egg}
  ${statsmodels:egg}
  ${scipy:egg}

>>>>>>> xav/node-monitoring-sr
[slapos-toolbox-dev]
<= slapos-toolbox
recipe = zc.recipe.egg:develop
setup = ${slapos.toolbox-repository:location}

[slapos-toolbox]
prerequisite = ${slapos-toolbox-dev:recipe}
<<<<<<< HEAD
=======
eggs = slapos.toolbox
>>>>>>> xav/node-monitoring-sr

[versions]
slapos.toolbox =
# <<<<<<<<<<<<

# Build GCC with Fortran for OpenBLAS (scipy & numpy)
[gcc]
max_version = 0

[macro.mkdir]
recipe = slapos.recipe.build
install =
  import os
  os.mkdir(location)
<<<<<<< HEAD

=======
  
>>>>>>> xav/node-monitoring-sr
[promise-dir]
<= macro.mkdir
location = ${buildout:directory}/promise

[macro.download.promise]
recipe = slapos.recipe.build:download
url = ${:_profile_base_location_}/promise/${:_buildout_section_name_}
destination = ${promise-dir:location}/${:_buildout_section_name_}

[storage.py]
<= macro.download.promise

<<<<<<< HEAD
[eggs]
recipe = zc.recipe.egg:eggs
eggs =
  ${slapos-toolbox:eggs}
  ${pandas:egg}
  ${scipy:egg}
  ${statsmodels:egg}

[instance.cfg]
recipe = slapos.recipe.template
output = ${buildout:directory}/${:_buildout_section_name_}
=======
[instance.cfg]
recipe = slapos.recipe.template
output = ${buildout:directory}/${:_buildout_section_name_}
requires = ${slapos-toolbox:recipe}
>>>>>>> xav/node-monitoring-sr
inline =
  [buildout]
  eggs-directory = ${buildout:eggs-directory}
  develop-eggs-directory = ${buildout:develop-eggs-directory}

  extends =
    ${monitor-template:output}

  parts =
    publish
    monitor-base
<<<<<<< HEAD
    check-storage.py
=======
    check-disk-space.py
    check-partition-space.py
    check-cpu-temperature.py
    check-ram-usage.py
    check-network.py
>>>>>>> xav/node-monitoring-sr

  [publish]
  <= monitor-publish
  recipe = slapos.cookbook:publish

<<<<<<< HEAD
  [check-storage.py]
  recipe = slapos.cookbook:promise.plugin
  depends = ${eggs:recipe}
  eggs =
    ${slapos-toolbox:eggs}
    ${pandas:egg}
    ${scipy:egg}
    ${statsmodels:egg}
  file = ${storage.py:destination}
  output = $${directory:plugins}/$${:_buildout_section_name_}
  config-collectordb = $${monitor-instance-parameter:collector-db}
  # config-threshold =
  config-nb-days-predicted = 10
  config-display-prediction = 1
  config-display-partition = 1

=======
  [macro.promise]
  <= monitor-promise-base
  name = $${:_buildout_section_name_}

  [check-disk-space.py]
  <= macro.promise
  eggs = slapos.toolbox[prediction]
  promise = check_free_disk_space
  config-collectordb = $${monitor-instance-parameter:collector-db}
  config-threshold =
  config-nb-days-predicted =
  config-display-partition = 1
  config-display-prediction = 1

  [check-partition-space.py]
  <= macro.promise
  eggs = slapos.toolbox[pandas]
  promise = monitor_partition_space
  config-collectordb = $${monitor-instance-parameter:collector-db}
  config-threshold-ratio =

  [check-cpu-temperature.py]
  <= macro.promise
  promise = check_cpu_temperature
  config-testing = false
  config-max-spot-temp = 90
  config-max-avg-temp = 80
  config-avg-temp-duration = 15
  config-last-avg-computation-file = $${directory:var}/promise_cpu_temperature_last_avg_file

  [check-ram-usage.py]
  <= macro.promise
  promise = check_ram_usage
  # config-min-threshold-ram =
  # config-min-avg-ram =
  # config-avg-ram-period-sec =
  # config-avg-ram-period
  config-last-avg-ram-file = $${directory:var}/promise_ram_space_last_avg_file

  [check-network.py]
  <= macro.promise
  promise = check_network
  # config-max-lost-packets =
  # config-max_error_messages =
>>>>>>> xav/node-monitoring-sr

[versions]
statsmodels = 0.11.1
patsy = 0.5.1
