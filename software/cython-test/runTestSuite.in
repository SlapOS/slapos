#!{{ runTestSuite_py }}
"""
  Script to run the Cython test suite using Nexedi's test node framework.
"""
import argparse, json, os, subprocess, sys, traceback
from time import gmtime, strftime, time
from unittest import TextTestResult
from erp5.util import taskdistribution, testsuite

os.environ['TEMP'] = {{ repr(tmpdir) }}

command = """. {{ cython_env_sh }}
make all test
"""

def parseTestStdOut(data):
  """
  Parse output of Cython testrunner script.
  """
  data = data.rsplit(b'\n' + TextTestResult.separator2.encode() + b'\n', 1)[1]
  status_dict = {}
  search = testsuite.TestSuite.RUN_RE.search(data)
  if search:
    groupdict = search.groupdict()
    status_dict.update(duration=float(groupdict['seconds']),
                       test_count=int(groupdict['all_tests']))
  search = testsuite.TestSuite.STATUS_RE.search(data)
  if search:
    groupdict = search.groupdict()
    status_dict.update(
      error_count=int(groupdict['errors'] or 0),
      failure_count=int(groupdict['failures'] or 0)
                   +int(groupdict['unexpected_successes'] or 0),
      skip_count=int(groupdict['skips'] or 0)
                +int(groupdict['expected_failures'] or 0))
  return status_dict

class DummyTestResult:

  class DummyTestResultLine:

    def stop(self, **kw):
      with open(self.name + '.json', 'w') as f:
        json.dump(kw, f)

  done = 0

  def __init__(self, test_name_list):
    self.test_name_list = test_name_list

  def start(self):
    test_result_line = self.DummyTestResultLine()
    try:
      test_result_line.name = self.test_name_list[self.done]
    except IndexError:
      return
    self.done += 1
    return test_result_line

def main():
  parser = argparse.ArgumentParser(description='Run a test suite.')
  parser.add_argument('--test_suite', help='The test suite name')
  parser.add_argument('--test_suite_title', help='The test suite title')
  parser.add_argument('--test_node_title', help='The test node title')
  parser.add_argument('--project_title', help='The project title')
  parser.add_argument('--revision', help='The revision to test',
                      default='dummy_revision')
  parser.add_argument('--node_quantity', help='ignored', type=int)
  parser.add_argument('--master_url',
                      help='The Url of Master controling many suites')

  args = parser.parse_args()

  test_suite_title = args.test_suite_title or args.test_suite

  test_name_list = 'cython',

  if args.master_url:
    tool = taskdistribution.TaskDistributor(portal_url = args.master_url)
    test_result = tool.createTestResult(args.revision,
                                        test_name_list,
                                        args.test_node_title,
                                        test_title=test_suite_title,
                                        project_title=args.project_title)
    if test_result is None:
      return
  else:
    test_result = DummyTestResult(test_name_list)
  # run NEO tests
  while 1:
    test_result_line = test_result.start()
    if not test_result_line:
      break

    try:
      with open(os.devnull) as stdin:
        p = subprocess.Popen(command, shell=True, stdin=stdin,
                             stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                             cwd={{repr(cython_repository)}})
    except Exception:
      end = time()
      stderr = traceback.format_exc()
      status_dict = {}
      sys.stderr.write(stderr)
    else:
      stdout, stderr = p.communicate()
      end = time()
      os.write(1, stdout)
      os.write(2, stderr)
      status_dict = parseTestStdOut(stderr)
      if str is not bytes:
        stdout = stdout.decode('utf-8')
        stderr = stderr.decode('utf-8')
      status_dict['stdout'] = stdout

    # report status back to Nexedi ERP5
    test_result_line.stop(
      command=command,
      date=strftime("%Y/%m/%d %H:%M:%S", gmtime(end)),
      stderr=stderr,
      **status_dict)

if __name__ == "__main__":
    main()
