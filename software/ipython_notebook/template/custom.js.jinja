// leave at least 2 line with only a star on it below, or doc generation fails
/**
 *
 *
 * Placeholder for custom user javascript
 * mainly to be overridden in profile/static/custom/custom.js
 * This will always be an empty file in IPython
 *
 * User could add any javascript in the `profile/static/custom/custom.js` file.
 * It will be executed by the ipython notebook at load time.
 *
 * Same thing with `profile/static/custom/custom.css` to inject custom css into the notebook.
 *
 *
 * The object available at load time depend on the version of IPython in use.
 * there is no guaranties of API stability.
 *
 * The example below explain the principle, and might not be valid.
 *
 * Instances are created after the loading of this file and might need to be accessed using events:
 *     define([
 *        'base/js/namespace',
 *        'base/js/events'
 *     ], function(IPython, events) {
 *         events.on("app_initialized.NotebookApp", function () {
 *             IPython.keyboard_manager....
 *         });
 *     });
 *
 * __Example 1:__
 *
 * Create a custom button in toolbar that execute `%qtconsole` in kernel
 * and hence open a qtconsole attached to the same kernel as the current notebook
 *
 *    define([
 *        'base/js/namespace',
 *        'base/js/events'
 *    ], function(IPython, events) {
 *        events.on('app_initialized.NotebookApp', function(){
 *            IPython.toolbar.add_buttons_group([
 *                {
 *                    'label'   : 'run qtconsole',
 *                    'icon'    : 'icon-terminal', // select your icon from http://fortawesome.github.io/Font-Awesome/icons
 *                    'callback': function () {
 *                        IPython.notebook.kernel.execute('%qtconsole')
 *                    }
 *                }
 *                // add more button here if needed.
 *                ]);
 *        });
 *    });
 *
 * __Example 2:__
 *
 * At the completion of the dashboard loading, load an unofficial javascript extension
 * that is installed in profile/static/custom/
 *
 *    define([
 *        'base/js/events'
 *    ], function(events) {
 *        events.on('app_initialized.DashboardApp', function(){
 *            require(['custom/unofficial_extension.js'])
 *        });
 *    });
 *
 * __Example 3:__
 *
 *  Use `jQuery.getScript(url [, success(script, textStatus, jqXHR)] );`
 *  to load custom script into the notebook.
 *
 *    // to load the metadata ui extension example.
 *    $.getScript('/static/notebook/js/celltoolbarpresets/example.js');
 *    // or
 *    // to load the metadata ui extension to control slideshow mode / reveal js for nbconvert
 *    $.getScript('/static/notebook/js/celltoolbarpresets/slideshow.js');
 *
 *
 * @module IPython
 * @namespace IPython
 * @class customjs
 * @static
 */

$([IPython.events]).on('notebook_loaded.Notebook', function(){
  var kernelname = IPython.notebook.kernel_selector.current_selection;
  var display_text="<div class='output_subarea output_text output_result'>\
  <pre>Follow these steps to customize your notebook with ERP5 kernel :-</br>\
  1. Add <b>%erp5_url &lt;your_erp5_url&gt;/erp5/Base_executeJupyter</b>.</br>\
  Make sure you have 'erp5_data_notebook' business template installed in your erp5</br>\
  2. <b>%notebook_set_reference &lt;your_notebook_refernce&gt;</b></br>\
  It would be better to set the reference to match with erp5 reference pattern.</br>\
  3. <b>%erp5_user &lt;your_erp5_username&gt;</b></br>\
  4. <b>%erp5_password &lt;your_erp5_password&gt;</b></br>\
  5. As soon as you see 'Please Proceed' message you can now access your erp5 using notebook.</br>\
  <p><u>OTHER USEFUL MAGICS</u> -</br>\
  <b>%my_notebooks</b> -This is used to display all the notebooks created by the specific user.</br>\
  NOTE: Do not dynamically alter imported module objects as they are not being saved in DB, </br>\
  so changes to them would be disregarded and would throw an error.</br>\
  </pre></div>";
  if (kernelname=="erp5"){
  $('div#notebook-container').prepend(display_text);
  }
  });