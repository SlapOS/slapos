{% set url = slave_parameter.get('url') -%}
{% set https_url = slave_parameter.get('https-url', url) -%}
{% if url.startswith("http://") or url.startswith("https://") -%}
{%   set upstream = url.split("/")[2] -%}
{%   set https_upstream = https_url.split("/")[2] -%}
{%   set protocol = url.split("/")[0] -%}
{%   set https_protocol = https_url.split("/")[0] -%}
{%   set proxy_pass = '%s//%s' % (protocol, slave_parameter.get('slave_reference')) -%}
{%   set https_proxy_pass = '%s//https_%s' % (protocol, slave_parameter.get('slave_reference')) -%}
{%- set ssl_configuration_list = [('ssl_certificate', 'path_to_ssl_crt'),
                                 ('ssl_certificate_key', 'path_to_ssl_key')] -%}


upstream {{ slave_parameter.get('slave_reference') }} {
  server {{ upstream }};
}

upstream https_{{ slave_parameter.get('slave_reference') }} {
  server {{ https_upstream }};
}


server {
  listen [{{ global_ipv6 }}]:{{ nginx_http_port }};
  listen {{ local_ipv4 }}:{{ nginx_http_port }};

  server_name {{ slave_parameter.get('custom_domain') }};

  error_log {{ slave_parameter.get('error_log') }} error; 
  access_log {{ slave_parameter.get('access_log') }} custom;
  
  location /pub {
    push_stream_publisher;
    push_stream_channels_path $arg_id;
    # store messages in memory
    push_stream_store_messages  off;

    # Message size limit
    # client_max_body_size MUST be equal to client_body_buffer_size or
    # you will be sorry.
    client_max_body_size 16k;
    client_body_buffer_size 16k;

   }

   location ~ /sub/(.*) {
     # activate subscriber mode for this location
     add_header "Access-Control-Allow-Origin" "*";
     add_header 'Access-Control-Allow-Credentials' 'false';
     add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS';
     add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';

     push_stream_subscriber eventsource;
     # positional channel path
     push_stream_channels_path $1;

     # content-type
     default_type "text/event-stream; charset=utf-8";
  }

}

server {
  listen [{{ global_ipv6 }}]:{{ nginx_https_port }} ssl;
  listen {{ local_ipv4 }}:{{ nginx_https_port }} ssl;

  server_name {{ slave_parameter.get('custom_domain') }};

  error_log {{ slave_parameter.get('error_log') }} error;
  access_log {{ slave_parameter.get('access_log') }} custom;

  ssl on;
  
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:HIGH:!aNULL:!MD5';
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;

{% for key, value in ssl_configuration_list -%}
{%   if value in slave_parameter -%}
{{ '  %s' % key }} {{ slave_parameter.get(value) }};
{% endif -%}
{% endfor %}

  location /pub {
    push_stream_publisher;
    push_stream_channels_path $arg_id;
    # store messages in memory
    push_stream_store_messages  off;

    # Message size limit
    # client_max_body_size MUST be equal to client_body_buffer_size or
    # you will be sorry.
    client_max_body_size 16k;
    client_body_buffer_size 16k;

   }

   location ~ /sub/(.*) {
     # activate subscriber mode for this location
     add_header "Access-Control-Allow-Origin" "*";
     add_header 'Access-Control-Allow-Credentials' 'false';
     add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS';
     add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';

     push_stream_subscriber eventsource;
     # positional channel path
     push_stream_channels_path $1;

     # content-type
     default_type "text/event-stream; charset=utf-8";
  }
}
{% endif -%}
