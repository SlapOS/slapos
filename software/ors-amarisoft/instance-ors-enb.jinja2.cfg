{#- TODO automatically load ORS/enb and ORS/gnb defaults from JSON schema #}
{%- set ors_enb_defaults = {
  "bandwidth": "20 MHz",
  "n_antenna_dl": 2,
  "n_antenna_ul": 2,
  "rf_mode": "tdd",
  "tdd_ul_dl_config": "[Configuration 2] 5ms 2UL 6DL (default)",
  "pci": 1,
  "cell_id": "0x01",
  "tac": "0x0001",
  "root_sequence_index": 204,
  "enb_id": "0x1A2D0",
  "gtp_addr": "127.0.1.1",
  "lte_handover_a3_offset": 6,
  "lte_handover_a3_time_to_trigger": 480,
  "inactivity_timer": 10000,
  "disable_sdr": false
} %}

{%- set ors_gnb_defaults = {
  "nr_bandwidth": 40,
  "n_antenna_dl": 2,
  "n_antenna_ul": 2,
  "rf_mode": "tdd",
  "tdd_ul_dl_config": "5ms 2UL 7DL 4/6 (default)",
  "pci": 500,
  "cell_id": "0x01",
  "gnb_id": "0x12345",
  "gnb_id_bits": 28,
  "nr_handover_a3_offset": 6,
  "nr_handover_time_to_trigger": 100,
  "inactivity_timer": 10000,
  "disable_sdr": false
} %}

{#- enb_mode indicates with which mode ors' enb is instantiated with - enb | gnb #}
{%- set enb_mode = slap_configuration['slap-software-type'] %}
{%- do assert(enb_mode in ('enb', 'gnb'), enb_mode) %}

{%- set ors_defaults = {'enb': ors_enb_defaults, 'gnb': ors_gnb_defaults} [enb_mode]  %}
{%- for k,v in ors_defaults|dictsort %}
{%-   do slapparameter_dict.setdefault(k, v) %}
{%- endfor %}

{# inject ru+cell synthesized from ORS-specific parameters
   make real ru/cell shared instances to be rejected in ORS mode #}
{%- set ishared_list = slap_configuration.setdefault('slave-instance-list', [])  %}
{%- for ishared in ishared_list %}
{%-   set _ = json_module.loads(ishared['_']) %}
{%-   if 'ru_type' in _  or  'cell_type' in _ %}
{%-     do ishared.update({'_': {'REJECT': 1}|tojson})  %}
{%-   endif %}
{%- endfor  %}

{%- do ishared_list.append({
    'slave_title':      '%s_RU' % slap_configuration['slap-computer-partition-id'],
    'slave_reference':  'XXX',
    '_': {
      'ru_type':      'sdr',
      'ru_link_type': 'sdr',
      'sdr_dev_list': [0],
      'n_antenna_dl': slapparameter_dict.n_antenna_dl,
      'n_antenna_ul': slapparameter_dict.n_antenna_ul,
      'tx_gain':      ors_version['current-tx-gain'],
      'rx_gain':      ors_version['current-rx-gain'],
      'txrx_active':  'ACTIVE',
    } |tojson
  })
%}

{%- if enb_mode == 'enb' %}
{%-   set cell = {
      'cell_type':  'lte',
      'dl_earfcn':  ors_version['current-earfcn'],
      'bandwidth':  slapparameter_dict.bandwidth,
      'tac':        slapparameter_dict.tac,
      'root_sequence_index':  slapparameter_dict.root_sequence_index,
    }
%}
{%- elif enb_mode == 'gnb' %}
{%-   set cell = {
      'cell_type':  'nr',
      'dl_nr_arfcn':  ors_version['current-nr-arfcn'],
      'nr_band':      ors_version['current-nr-band'],
      'bandwidth':    slapparameter_dict.nr_bandwidth,
      'root_sequence_index':  1,
    }
%}
{%- endif %}

{%- do cell.update({
      'rf_mode':    slapparameter_dict.rf_mode,
      'pci':        slapparameter_dict.pci,
      'cell_id':    slapparameter_dict.cell_id,
      'tdd_ul_dl_config': slapparameter_dict.tdd_ul_dl_config,
      'inactivity_timer': slapparameter_dict.inactivity_timer,

      'ru': { 'ru_type':  'ru_ref',
              'ru_ref':   'RU' }
    })
%}

{%- do ishared_list.append({
    'slave_title':      '%s_CELL' % slap_configuration['slap-computer-partition-id'],
    'slave_reference':  'XXX',
    '_': cell | tojson
  })
%}

{%- include 'instance-enb-base.jinja2.cfg' %}


# let all templates know we are running in ORS mode
[config-base]
context -=
   json ors false
context +=
   json ors {{ ors_version | tojson }}


# add ORS-specific bits to published information
[publish-connection-information]
ors-version = {{ ors_version['ors-version'] }}
frequency-range-rating = {{ ors_version['range'] }}
current-tx-power-estimate = {{ ors_version['power-estimate'] }}
current-tx-gain = {{ ors_version['current-tx-gain'] }}
current-rx-gain = {{ ors_version['current-rx-gain'] }}

# XXX only enb
current-earfcn  = {{ ors_version['current-earfcn'] }}

# XXX only gnb
current-nr-arfcn = {{ ors_version['current-nr-arfcn'] }}
current-nr-band = {{ ors_version['current-nr-band'] }}


# hide ru-list and cell-list from published information
[publish-connection-information]
depends += ${publish-connection-information-ors-cleanup:recipe}
[publish-connection-information-ors-cleanup]
recipe = slapos.recipe.build
init =
  publish = self.buildout['publish-connection-information']
  del publish['ru-list']
  del publish['cell-list']
