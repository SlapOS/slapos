# instance-ors-enb translates ORS enb/gnb into generic enb/gnb with 1 SDR RU and 1 CELL.

{#- enb_mode indicates with which mode ors' enb is instantiated with - enb | gnb #}
{%- set enb_mode = slap_configuration['slap-software-type'] %}
{%- do assert(enb_mode in ('enb', 'gnb'), enb_mode) %}

{#- defaults for ORS parameters.
    TODO automatically load ORS/enb and ORS/gnb defaults from JSON schema #}
{%- set ors_enb_defaults = {
  "bandwidth": str(default_lte_bandwidth),
  "n_antenna_dl": int(default_n_antenna_dl),
  "n_antenna_ul": int(default_n_antenna_ul),
  "rf_mode": "tdd",
  "tdd_ul_dl_config": "[Configuration 2] 5ms 2UL 6DL (default)",
  "pci": 1,
  "cell_id": "0x01",
  "tac": "0x0001",
  "root_sequence_index": 204,
  "enb_id": "0x1A2D0",
  "mme_list":  {'1': {'mme_addr': '127.0.1.100'}},
  "plmn_list": {"1": {'plmn': '00101'}},
  "inactivity_timer": int(default_lte_inactivity_timer),
} %}
{%- set ors_gnb_defaults = {
  "nr_bandwidth": float(default_nr_bandwidth),
  "n_antenna_dl": int(default_n_antenna_dl),
  "n_antenna_ul": int(default_n_antenna_ul),
  "rf_mode": "tdd",
  "tdd_ul_dl_config": "5ms 2UL 7DL 4/6 (default)",
  "ssb_pos_bitmap": default_nr_ssb_pos_bitmap,
  "pci": 500,
  "cell_id": "0x01",
  "gnb_id": "0x12345",
  "gnb_id_bits": 28,
  "amf_list":  {'1': {'amf_addr': '127.0.1.100'}},
  "plmn_list": {'1': {'plmn': '00101', 'tac': 100}},
  "inactivity_timer": int(default_nr_inactivity_timer),
} %}

{%- set ors_defaults = {'enb': ors_enb_defaults, 'gnb': ors_gnb_defaults} [enb_mode]  %}
{%- for k,v in ors_defaults|dictsort %}
{%-   do slapparameter_dict.setdefault(k, v) %}
{%- endfor %}


{#- make real cell_list to be rejected in ORS mode #}
{%- set cell_list = slapparameter_dict.setdefault('cell_list', {}) %}
{%- if len(cell_list) > 0 %}
{%-   do error('ORS mode does not support cell_list parameter') %}
{%- endif %}


{#- inject ru+cell synthesized from ORS-specific parameters #}
{%- set ru = {
        'ru_type':      'sdr',
        'ru_link_type': 'sdr',
        'sdr_dev':      0,
        'n_antenna_dl': slapparameter_dict.n_antenna_dl,
        'n_antenna_ul': slapparameter_dict.n_antenna_ul,
        'tx_gain':      ors_version['current-tx-gain'],
        'rx_gain':      ors_version['current-rx-gain'],
    }
%}

{%- if enb_mode == 'enb' %}
{%-   set cell = {
      'dl_earfcn':  ors_version['current-earfcn'],
      'bandwidth':  slapparameter_dict.bandwidth,
      'tac':        slapparameter_dict.tac,
      'root_sequence_index':  slapparameter_dict.root_sequence_index,
    }
%}
{%- elif enb_mode == 'gnb' %}
{%-   set cell = {
      'dl_nr_arfcn':  ors_version['current-nr-arfcn'],
      'nr_band':      ors_version['current-nr-band'],
      'bandwidth':    slapparameter_dict.nr_bandwidth,
      'ssb_pos_bitmap': slapparameter_dict.ssb_pos_bitmap,
      'root_sequence_index':  1,
    }
%}
{%- endif %}

{%- do cell.update({
      'rf_mode':    slapparameter_dict.rf_mode,
      'pci':        slapparameter_dict.pci,
      'cell_id':    slapparameter_dict.cell_id,
      'tdd_ul_dl_config': slapparameter_dict.tdd_ul_dl_config,
      'inactivity_timer': slapparameter_dict.inactivity_timer,
      'ru':         ru,
    })
%}

{%- do cell_list.update({'CELL': cell}) %}


{#- backward compatibility: if ORS is running in gnb mode, and gnb_* parameters
    are present, replace their generic enb_* counterparts with gnb_* ones #}
{%- if enb_mode == 'gnb'  %}
{%-   set _ = slapparameter_dict  %}
{%-   if 'gnb_config_link' in _ %}
{%-     do _.update({
          'enb_config_link':    _.gnb_config_link,
          'enb_config_version': _.get('gnb_config_version'),
        })  %}
{%-   endif %}
{%-   if 'gnb_stats_fetch_period' in _  %}
{%-     do _.update({'enb_stats_fetch_period': _.gnb_stats_fetch_period}) %}
{%-   endif %}
{%-   if 'gnb_drb_stats_enabled' in _  %}
{%-     do _.update({'enb_drb_stats_enabled':  _.gnb_drb_stats_enabled}) %}
{%-   endif %}
{%- endif %}


# code of generic enb
{%  include 'instance-enb-base.jinja2.cfg' %}


# let all templates know we are running in ORS mode
[config-base]
context -=
   json ors false
context +=
   key ors :ors
ors = {{ dumps(ors_version) }}


# add ORS-specific bits to published information
[publish-connection-information]
ors-version = {{ ors_version['ors-version'] }}
frequency-range-rating = {{ ors_version['range'] }}
current-tx-power-estimate = {{ ors_version['power-estimate'] }}
current-tx-gain = {{ ors_version['current-tx-gain'] }}
current-rx-gain = {{ ors_version['current-rx-gain'] }}

{%- if enb_mode == 'enb'  %}
current-earfcn  = {{ ors_version['current-earfcn'] }}
{%- elif enb_mode == 'gnb' %}
current-nr-arfcn = {{ ors_version['current-nr-arfcn'] }}
current-nr-band = {{ ors_version['current-nr-band'] }}
{%- endif %}


# hide <cell>-* from published information
[publish-connection-information]
depends += ${publish-connection-information-ors-cleanup:recipe}
[publish-connection-information-ors-cleanup]
recipe = slapos.recipe.build
init =
  publish = self.buildout['publish-connection-information']
  cell_ref = "CELL"
  for k in publish.keys():
    if k.startswith('%s-' % cell_ref):
      del publish[k]
