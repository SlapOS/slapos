#!/usr/bin/env -S slapos console
"""request ors/enb for kirr"""

# XXX workaround for `slapos console` not setting up sys.path the same way as std python does
import sys
from os.path import dirname
sys.path.insert(0, dirname(__file__))
import kslap

import json
from pprint import pprint

ors = "/srv/slapgrid/slappart35/srv/project/slapos/software/ors-amarisoft/software.cfg"

enb = request(ors,
        software_type="enb",
        partition_reference="kenb",
        filter_kw={"computer_guid": "slaprunner"},
        partition_parameter_kw={"_": json.dumps({
            'testing': True,
        })})


print('enb:', enb)
print('ref(enb):', kslap.ref_of_instance(slap, enb))

# enb -> enb_part to retrieve all information about instance state
# (see about core_part in krequest_ors.core for details)
enb_part = slap.registerComputerPartition(enb.slap_computer_id, enb.slap_computer_partition_id)

print('enb_part:', enb_part)
print('enb_part.getInstanceParameterDict:')
pprint(enb_part.getInstanceParameterDict())


def request_ru(enb, **kw):
    1/0

def request_cell(enb, cell_ref, kw):
    assert 'cell_type' in kw
    enb_ref  = kslap.ref_of_instance(slap, enb)
    enb_guid = enb.getInstanceGuid()
    cell = request(ors,
        software_type="enb",
        partition_reference=cell_ref,
        shared=True,
        filter_kw={"instance_guid": enb_guid},
        partition_parameter_kw={"_": json.dumps(kw
        )})
    return cell

def request_peer(enb, **kw):
    1/0

RU1 = {
    'ru_type':      'sdr',
    'ru_link_type': 'sdr',
    'sdr_dev_list': [0, 1],
    'n_antenna_dl': 4,
    'n_antenna_ul': 2,
    'tx_gain':      51,
    'rx_gain':      52,
}

CELL1_a = {
    'cell_type':    'lte',
    'rf_mode':      'tdd',
    'bandwidth':    '5 MHz',
    'dl_earfcn':    38050,      # 2600 MHz
    'pci':          1,
    'cell_id':      '0x01',
    'ru':           RU1,        # RU definition embedded into CELL
}

iCELL1_a = request_cell(enb, 'CELL1_a', CELL1_a)
print('iCELL1_a:', iCELL1_a)


CELL1_b = {
    'cell_type':    'lte',
    'rf_mode':      'tdd',
    'bandwidth':    '5 MHz',
    'dl_earfcn':    38100,      # 2605 MHz
    'pci':          2,
    'cell_id':      '0x02',
    'ru':           {           # CELL1_b shares RU with CELL1_a referring to it via cell
        'ru_type':      'ruincell_ref',
        'ruincell_ref': 'CELL1_a'
    }
}

iCELL1_b = request_cell(enb, 'CELL1_b', CELL1_b)
print('iCELL1_b:', iCELL1_b)

