#!/usr/bin/env python3

from jinja2 import Template
import argparse
import os

parser = argparse.ArgumentParser()
parser.add_argument('-d', '--delete', action='store_true')
args = parser.parse_args()

global_context = {
        'generated_file_message': "This file was generated using a jinja2 template and the render-templates script, don't modify directly."
}

ors =   {
            'software_name'                : 'ors',
            'bbu'                          : 'ors',
        }

generic = {
            'software_name'                : 'generic',
            'bbu'                          : 'server',
        }

defaults = {
            'default_lte_bandwidth'        : "20 MHz",
            'default_lte_inactivity_timer' : 10000,
            'default_nr_bandwidth'         : 40,
            'default_nr_ssb_pos_bitmap'    : "10000000",
            'default_n_antenna_dl'         : 2,
            'default_n_antenna_ul'         : 2,
            'default_nr_inactivity_timer' : 10000,
            'default_imsi'                 : "001010123456789",
            'default_k'                    : "00112233445566778899aabbccddeeff",
}

with open('software.cfg.json.jinja2', 'r') as f:
    software_json_template = Template(f.read())

instance_json_template_map = {}
for software_type in ['enb', 'gnb', 'ue']:
    with open('instance-{}-input-schema.json.jinja2'.format(software_type), 'r') as f:
        instance_json_template_map[software_type] = Template(f.read())

with open('software.jinja2.cfg', 'r') as f:
    software_template = Template(f.read())

# emit updates file @ path with data on regular run and deletes it on --delete.
def emit(path, data):
    data += '\n'
    if args.delete:
        os.remove(path)
    else:
        with open(path, 'w+') as f:
            f.write(data)

for software in (ors, generic):
    ctx = software | defaults | global_context
    if software is generic:
        v = ''
    else:
        v = '-'+software['software_name']

    emit('software{}.cfg.json'.format(v),
         software_json_template.render(**ctx))
    emit('software{}.cfg'.format(v),
         software_template.render(**ctx))
    for software_type in ['enb', 'gnb', 'ue']:
        # no ue for ors
        if software['bbu'] == 'ors' and software_type == 'ue':
            continue
        emit('instance{}-{}-input-schema.json'.format(
               v,
               software_type),
             instance_json_template_map[software_type].render(**ctx))

# render emits file @ path from path.jinja2
def render(path):
    with open('%s.jinja2' % path, 'r') as f:
        template = Template(f.read())
    emit(path, template.render(**defaults, **global_context))

for path in ('ue/common.json', 'ue/lte/input-schema.json', 'ue/nr/input-schema.json'):
    render(path)
