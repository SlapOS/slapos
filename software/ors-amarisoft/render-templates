#!/usr/bin/env python3

from jinja2 import Template
import argparse
import os

parser = argparse.ArgumentParser()
parser.add_argument('-d', '--delete', action='store_true')
args = parser.parse_args()

global_context = {
        'generated_file_message': "This file was generated using a jinja2 template and the render-templates script, don't modify directly."
}

ors =   {
            'software_name'                : 'ors',
            'bbu'                          : 'ors',
        }

generic = {
            'software_name'                : 'generic',
            'bbu'                          : 'server',
        }

with open('software.jinja2.cfg', 'r') as f:
    software_template = Template(f.read())

# emit updates file @ path with data on regular run and deletes it on --delete.
def emit(path, data):
    data += '\n'
    if args.delete:
        os.remove(path)
    else:
        with open(path, 'w+') as f:
            f.write(data)

for software in (ors, generic):
    ctx = software | global_context
    if software is generic:
        v = ''
    else:
        v = '-'+software['software_name']

    emit('software{}.cfg'.format(v),
         software_template.render(**ctx))
