#!/usr/bin/env python3

from jinja2 import Template
import argparse
import os

parser = argparse.ArgumentParser()
parser.add_argument('-d', '--delete', action='store_true')
args = parser.parse_args()

global_context = {
        'generated_file_message': "This file was generated using a jinja2 template and the render-templates script, don't modify directly."
}

software_list = [
        {
            'software_name'                : 'tdd-ors',
            'rf_mode'                      : 'tdd',
            'trx'                          : 'sdr',
            'bbu'                          : 'ors',
            'ru'                           : 'ors',
        }, {
            'software_name'                : 'fdd-ors',
            'rf_mode'                      : 'fdd',
            'trx'                          : 'sdr',
            'bbu'                          : 'ors',
            'ru'                           : 'ors',
        }, {
            'software_name'                : 'tdd-m2ru',
            'rf_mode'                      : 'tdd',
            'trx'                          : 'cpri',
            'bbu'                          : 'server',
            'ru'                           : 'm2ru',
        }, {
            'software_name'                : 'fdd-lopcomm',
            'rf_mode'                      : 'fdd',
            'trx'                          : 'cpri',
            'bbu'                          : 'server',
            'ru'                           : 'lopcomm',
        }, {
            'software_name'                : 'fdd',
            'rf_mode'                      : 'fdd',
            'trx'                          : 'sdr',
            'bbu'                          : 'server',
            'ru'                           : 'any',
        }, {
            'software_name'                : 'tdd',
            'rf_mode'                      : 'tdd',
            'trx'                          : 'sdr',
            'bbu'                          : 'server',
            'ru'                           : 'any',
        }
]

for i in range (len(software_list)):
    software_list[i].update({
            'default_lte_bandwidth'        : "20 MHz",
            'default_lte_imsi'             : "001010123456789",
            'default_lte_k'                : "00112233445566778899aabbccddeeff",
            'default_lte_inactivity_timer' : 10000,
            'default_nr_bandwidth'         : 40,
            'default_nr_imsi'              : "001010123456789",
            'default_nr_k'                 : "00112233445566778899aabbccddeeff",
            'default_nr_ssb_pos_bitmap'    : "10000000",
            'default_n_antenna_dl'         : 2,
            'default_n_antenna_ul'         : 2,
            'default_nr_inactivity_timer' : 10000,
    })

with open('software.cfg.json.jinja2', 'r') as f:
    software_json_template = Template(f.read())

instance_json_template_map = {}
for software_type in ['enb', 'gnb', 'ue-lte', 'ue-nr']:
    with open('instance-{}-input-schema.json.jinja2'.format(software_type), 'r') as f:
        instance_json_template_map[software_type] = Template(f.read())

with open('software.jinja2.cfg', 'r') as f:
    software_template = Template(f.read())
with open('test/test.jinja2.py', 'r') as f:
    test_template = Template(f.read())

# emit updates file @ path with data on regular run and deletes it on --delete.
def emit(path, data):
    data += '\n'
    if args.delete:
        os.remove(path)
    else:
        with open(path, 'w+') as f:
            f.write(data)

for software in software_list:
    emit('software-{}.cfg.json'.format(software['software_name']),
         software_json_template.render(**software, **global_context))
    emit('test/test{}.py'.format(software['software_name'].upper()),
         test_template.render(**software, **global_context))
    emit('software-{}.cfg'.format(software['software_name']),
         software_template.render(**software, **global_context))
    for software_type in ['enb', 'gnb', 'ue-lte', 'ue-nr']:
        emit('instance-{}-{}-input-schema.json'.format(
               software['software_name'],
               software_type),
             instance_json_template_map[software_type].render(**software, **global_context))
