{#- Package slaplte provides helpers for configuring Amarisoft LTE services in SlapOS.

    - load_cell initializes cell registry.
    - ru_config emits RF driver configuration for specified Radio Units.

    The following utilities are also provided:

    - J should be used around macro calls to retrieve returned objects.
    - error reports instantiation error.
-#}


{#- J is used around macro calls to retrieve returned objects.

    It is needed to workaround jinja2 limitation that macro can return only
    strings - not arbitrary objects: we return objects as JSON-encoded string
    and J decodes them.

    By convention macros that return JSON-encoded objects start with "j" prefix.

    Usage example:

      set obj = J(jmymacro(...))
#}
{%- set J = json_module.loads %}


{#- tap indicates tap interface, that slapos told us to use,
    or 'xxx-notap-xxx' if slapos provided us either nothing or empty string. #}
{%- set tap = slap_configuration.get('tap-name', '')   %}
{%- if tap == '' %}
{%-   set tap = 'xxx-notap-xxx'   %}
{%- endif %}


{#- bug indicates an error in template logic.
    it should not happen. #}
{%- macro bug(msg)  %}
{%-   do assert(False, 'BUG: %s' % (msg,)) %}
{%- endmacro  %}

{#- error reports instantiation error. #}
{%- macro error(msg)  %}
{%-   set msg = 'Instantiation Error: %s\n' % msg %}
{%-   do assert(False, msg) %}
{%- endmacro  %}



{#- ---- loading ---- #}

{#- load_cell initializes cell registry.

    cell_dict keeps configured cells: {} cell reference -> cell parameters
#}
{%- macro load_cell(cell_dict)	%}
{%-   do cell_dict.update( slapparameter_dict.get('cell_list', {'default': {}}) )  %}
{%-   for i, k in enumerate(cell_dict) %}
{%-     set cell = cell_dict[k] %}
{%-     do cell.setdefault('cpri_port_number', i) %}
{%-   endfor %}

{#-   assign TAP interfaces to RUs  #}
{%-   for i, (cell_ref, cell) in enumerate(cell_dict|dictsort)  %}
{%-     if len(cell_dict) > 1 %}
{%-       set ru_tap = "%s-%d" % (tap, i+1) %}
{%-     else  %}
{%-       set ru_tap = tap  %}
{%-     endif %}
{%-     do cell.update({'_tap': ru_tap})  %}
{%-   endfor  %}
{%- endmacro  %}


{#- ---- building configuration ---- #}

{#- ru_config emits RF driver configuration for specified Radio Units. #}
{%- macro ru_config(ru, cell_dict, slapparameter_dict) %}
{% if ru.ru_type == "lopcomm" %}
  rf_driver: {
{%- if slapparameter_dict.get('disable_sdr', False) %}
      name: "dummy",
{%- else %}
      name: "sdr",
{%- endif %}
        args: "dev0=
        {%- for i, k in enumerate(cell_dict) %}
        {%- set cpri_port = cell_dict[k].cpri_port_number %}
        {%- if i != 0 -%}
        ,
        {%- endif -%}
          /dev/sdr{{ slapparameter_dict.get('sdr_number', 0) }}@{{ cpri_port }}
        {%- endfor -%}
        ",
      cpri_mapping: "hw",
      {%- set cpri_mult = slapparameter_dict.get('cpri_mult', 16) %}
      cpri_mult: "
        {%- for i, k in enumerate(cell_dict) %}
        {%- if i != 0 -%}
        ,
        {%- endif -%}
          {{ cpri_mult }}
        {%- endfor -%}
        ",
      cpri_rx_delay: "
        {%- for i, k in enumerate(cell_dict) %}
        {%- if i != 0 -%}
        ,
        {%- endif -%}
          {{ cell_dict[k].get('cpri_rx_delay', 0) }}
        {%- endfor -%}
        ",
      cpri_tx_delay: "
        {%- for i, k in enumerate(cell_dict) %}
        {%- if i != 0 -%}
        ,
        {%- endif -%}
          {{ cell_dict[k].get('cpri_tx_delay', 0) }}
        {%- endfor -%}
        ",
      cpri_tx_dbm: "
        {%- for i, k in enumerate(cell_dict) %}
        {%- if i != 0 -%}
        ,
        {%- endif -%}
          {{ cell_dict[k].get('cpri_tx_dbm', 0) }}
        {%- endfor -%}
        ",
      ifname: "{{ cell_dict.values() | map(attribute='_tap') | join(',') }}",
  },
  tx_gain: 0,
  rx_gain: 0,
{% elif ru.ru_type == "sunwave" %}
  rf_driver: {
{%- if slapparameter_dict.get('disable_sdr', False) %}
      name: "dummy",
{%- else %}
      name: "sdr",
{%- endif %}
      args: "dev0=/dev/sdr0@0",
      cpri_mapping: "bf1",
      cpri_mult: 16,
      cpri_rx_delay: 11.0,
      cpri_tx_delay: 0,
      ifname: "cpri0",
      cpri_tx_dbm: 42.0,
  },
  tx_gain: 0,
  rx_gain: 0,
{% elif ors %}
  rf_driver: {
{%- if slapparameter_dict.get('disable_sdr', False) %}
      name: "dummy",
{%- else %}
      name: "sdr",
{%- endif %}
      args: "dev0=/dev/sdr0",
{% if slapparameter_dict.get('gps_sync', False) %}
      sync: "gps",
{% endif %}
      rx_antenna:"tx_rx",
      tdd_tx_mod: 1,
  },
  tx_gain: {{ tx_gain }},
  rx_gain: {{ rx_gain }},
{% endif %}
{%- endmacro  %}
