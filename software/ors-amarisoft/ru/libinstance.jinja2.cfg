{#- Package ru/libinstance provides common instance code for handling Radio Units and cells.

    Set global icell_kind=enb|ue before importing to indicate which kind of
    cells (server- or client-level) need to be configured. Then, after
    importing, use buildout() macro to emit instance-level code to
    handle configured RUs and cells.

    NOTE: before importing package amari_slap.jinja2 needs to already loaded as

      {%- import 'amari_slap.jinja2'  as slaplte     with context %}

    NOTE: driver-specific logic is implemented in rudrv.buildout_iru().   XXX review
#}

{#- iru_dict and icell_dict keep RU and cell registries
    iru_dict:    reference -> iru
    icell_dict:  reference -> icell
#}
{%- set iru_dict   = {}                                              %}
{%- set icell_dict = {}                                              %}
{%- do slaplte.load_iru_and_icell(iru_dict, icell_dict, icell_kind)  %}


{%- macro buildout()	%}

{#-   part emits new buildout section and registers it into buildout.parts  #}
{%-   set parts_list = [] %}
{%-   macro part(name) %}
{%-     do parts_list.append(name)  %}
[{{ name }}]
{%-   endmacro    %}

{#-   promise emits new buildout section for a promise    #}
{%-   macro promise(name)                                 %}
{#-     show in monitor RU1-... instead of COMP-ENB/RU1-  #}
{%-     set root = slap_configuration['instance-title']   %}
{%-     set pretty_name = name.removesuffix('%s.' % root) %}
{{ part('promise-'+name) }}
<= monitor-promise-base
name = {{ pretty_name }}.py
config-testing = {{ slapparameter_dict.get("testing", False) }}
{%-   endmacro %}

{#-   import RU drivers                           #}
{%-   set J              = slaplte.J              %}
{%-   set jref_of_shared = slaplte.jref_of_shared %}
{%-   set jcell_ru_ref   = slaplte.jcell_ru_ref   %}
{%-   import 'ru_sdr_libinstance.jinja2.cfg'      as rudrv_sdr      with context %}
{%-   import 'ru_lopcomm_libinstance.jinja2.cfg'  as rudrv_lopcomm  with context %}
{%-   import 'ru_sunwave_libinstance.jinja2.cfg'  as rudrv_sunwave  with context %}
{%-   set rudrv_dict = namespace(sdr=rudrv_sdr,
                                 lopcomm=rudrv_lopcomm,
                                 sunwave=rudrv_sunwave) %}

{#-   go through all RUs and for each RU emit generic promises and invoke
      RU-specific buildout handler #}
{%-   for ru_ref, iru in iru_dict|dictsort %}
{%-     set ru = iru['_']  %}

{#-     cells that are using iru  #}
{%-     set iru_icell_list = [] %}
{%-     for cell_ref, icell in icell_dict|dictsort %}
{%-       if ru_ref == J(jcell_ru_ref(icell, icell_dict)) %}
{%-         do iru_icell_list.append(icell) %}
{%-       endif   %}
{%-     endfor %}

# {{ ru_ref }} {{ ru.n_antenna_dl }}T{{ ru.n_antenna_ul }}R  ({{ ru.ru_type }})
# XXX + serving which cells
{%-     if ru.ru_link_type == 'sdr'  %}
{%-       for (i, n) in enumerate(ru.sdr_dev_list)  %}
{{ promise('%s-sdr-busy%s' % (ru_ref, '-%d' % (i+1)  if i > 0  else '')) }}
promise = check_sdr_busy
config-sdr = {{ sdr }}
config-sdr_dev  = {{ n }}
config-dma_chan = 0
{%-       endfor  %}

{%-     elif ru.ru_link_type == 'cpri'  %}
{{ promise('%s-sdr-busy' % ru_ref) }}
promise = check_sdr_busy
config-sdr = {{ sdr }}
config-sdr_dev  = {{ ru.cpri_link.sdr_dev }}
config-dma_chan = {{ ru.cpri_link.sfp_port }}

{{ promise('%s-cpri-lock' % ru_ref) }}
promise = check_cpri_lock
config-sdr_dev  = {{ ru.cpri_link.sdr_dev }}
config-sfp_port = {{ ru.cpri_link.sfp_port }}
config-amarisoft-rf-info-log = ${amarisoft-rf-info-template:log-output}
config-stats-period = {{ slapparameter_dict.get("enb_stats_fetch_period", 60) }}

{%-     else %}
{%-       do bug('unreachable') %}
{%-     endif %}

{{ promise('%s-rx-saturated' % ru_ref) }}
promise = check_rx_saturated
config-rf-rx-chan-list = {{ list(range(ru._rf_chan_rx, ru._rf_chan_rx + ru.n_antenna_ul)) }}
config-amarisoft-stats-log = ${amarisoft-stats-template:log-output}
config-stats-period = {{ slapparameter_dict.get("enb_stats_fetch_period", 60) }}
config-max-rx-sample-db = {{ slapparameter_dict.get("max_rx_sample_db", 0) }}

{#-     driver-specific part #}
{%-     set rudrv = rudrv_dict[ru.ru_type] %}
{{      rudrv.buildout_iru(iru, iru_icell_list) }}

# XXX publish something for each RU
# XXX publish something for each cell

{%-   endfor %}

[buildout]
parts +=
{%- for part in parts_list %}
    {{ part }}
{%- endfor %}
{%- endmacro  %}
