{#- Package ru/libinstance provides common instance code for handling Radio Units and cells.

    Set global icell_kind=enb|ue before importing to indicate which kind of
    cells (server- or client-level) need to be configured. Then, after
    importing, use buildout() macro to emit instance-level code to
    handle configured RUs and cells.

    NOTE: before importing package amari_slap.jinja2 needs to already loaded as

      {%- import 'amari_slap.jinja2'  as slaplte     with context %}
#}


{%- set iru_dict   = {}                                              %}
{%- set icell_dict = {}                                              %}
{%- do slaplte.load_iru_and_icell(iru_dict, icell_dict, icell_kind)  %}


{%- macro buildout()	%}
{%-   set parts_list = [] %}
{%-   macro part(name) %}
{%-     do parts_list.append(name)  %}
[{{ name }}]
{%-   endmacro    %}
{%-   for ru_ref, iru in iru_dict|dictsort %}
{%-     set ru = iru['_']  %}

# {{ ru_ref }} {{ ru.n_antenna_dl }}T{{ ru.n_antenna_ul }}R   XXX + ru arg
{%-     if ru.ru_link_type == 'sdr'  %}
{%-       for (i, n) in enumerate(ru.sdr_dev_list)  %}
{{ part('%s-check-sdr-busy%s.py' % (ru_ref, '-%d' % (i+1)  if i > 0  else '')) }}
<= macro.promise
promise = check_sdr_busy
config-testing = {{ slapparameter_dict.get("testing", False) }}
config-sdr = {{ sdr }}
config-sdr_dev = {{ n }}
config-dma_chan = 0
{%-       endfor  %}
{%-     elif ru.ru_link_type == 'cpri'  %}
{{ part('%s-check-sdr-busy.py' % ru_ref) }}
<= macro.promise
promise = check_sdr_busy
config-testing = {{ slapparameter_dict.get("testing", False) }}
config-sdr = {{ sdr }}
config-sdr_dev = {{ ru.cpri_link.sdr_dev }}
config-dma_chan = {{ ru.cpri_link.sfp_port }}
{%-     else %}
{%-       do bug('unreachable') %}
{%-     endif %}
{%-   endfor %}

[buildout]
parts +=
{%- for part in parts_list %}
    {{ part }}
{%- endfor %}
{%- endmacro  %}
