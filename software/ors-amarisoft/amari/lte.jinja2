{#- Package amari/lte provides helpers for configuring Amarisoft LTE services.

    - ru_config emits RF driver configutation for specified Radio Units.
    - cell_tdd_config and nr_cell_tdd_config return TDD configutation for LTE
      and NR cells correspondingly.
    - cell_n_rb_dl returns #(resource-blocks) for an LTE cell.

    XXX amari/slap is assumed to be loaded and `import with context`
-#}



{#- ru_config emits RF driver configuration for specified Radio Units. #}
{%- macro ru_config(iru_dict, slapparameter_dict) %}
  // Radio Units
  rf_driver: {
  // XXX vvv <- ru.txrx_active ?  XXX how to handle txrx_active for SDR ?
  // (tx_gain=-1000 does not work - it still sets tx_gain to min.possible value 14)
  {%- if slapparameter_dict.get('disable_sdr', False) %}
      name: "dummy",
  {%- else %}
      name: "sdr",
  {%- endif %}
  {%- if slapparameter_dict.get('gps_sync', False) %}
      sync: "gps",
  {%- endif %}

  {#- XXX emit big warning if both cpri and sdr are present
        to protect users from unclear eNB failues
        see https://support.amarisoft.com/issues/26021 for details

    XXX belowe we continue as if sdr and cpri are both supported by enb simultaneously #}

  {%- set dev_argv = []                                                       %}
  {%- set ru_sdr_dict = {}  %}  {#- dev -> ru  for ru with ru_type = sdr      #}
  {%- set ru_cpri_dict = {} %}  {#- dev -> ru  for ru with link_type = cpri   #}
  {%- set tx_gainv = [] %}      {#- tx_gain by tx channel                     #}
  {%- set rx_gainv = [] %}      {#- rx_gain by rx channel                     #}
  {%- for (ru_ref, iru) in iru_dict.items() | sort(attribute="1._._rf_port")  %}
  {%-   set ru = iru['_']                                                     %}
      // {{ ru_ref }} {{ ru.n_antenna_dl }}T{{ ru.n_antenna_ul }}R  ({{ ru.ru_type }})
  {%-   if ru.ru_type == 'sdr'                                                %}
  {%-     do ru_sdr_dict.update({len(dev_argv): ru})                          %}
  {%-     for n in ru.sdr_dev_list                                            %}
  {%-       do dev_argv.append("dev%d=/dev/sdr%d" % (len(dev_argv), n))       %}
  {%-     endfor                                                              %}
  {%-   elif ru.ru_link_type == 'cpri'                                        %}
  {%-     do ru_cpri_dict.update({len(dev_argv): ru})                         %}
  {%-     set link = ru.cpri_link                                             %}
  {%-     do dev_argv.append("dev%d=/dev/sdr%d@%d" % (len(dev_argv), link.sdr_dev, link.sfp_port))   %}
  {%-   else        %}
  {%-     do bug('unreachable')                                 %}
  {%-   endif                                                   %}
  {%-   do tx_gainv.extend([ru.tx_gain]*ru.n_antenna_dl)        %}
  {%-   do rx_gainv.extend([ru.rx_gain]*ru.n_antenna_ul)        %}
  {%- endfor %}
      args: "{{dev_argv | join(',')}}",

  {#- emit sdr-related options if an sdr ru is present #}
  {%- if len(ru_sdr_dict) > 0               %}
      rx_antenna:"tx_rx",
      tdd_tx_mod: 1,
  {%- endif                                 %}

  {#- emit cpri_* optins if a cpri ru is present #}
  {#- NOTE values for non-cpri links come as empty   XXX recheck this is ok #}
  {%- if len(ru_cpri_dict) > 0              %}
  {%-   set vcpri = [None]*len(dev_argv)    %}
  {%-   for dev, ru in ru_cpri_dict|dictsort  %}
  {%-     do vcpri.__setitem__(dev, ru.cpri_link)       %}
  {%-   endfor                                %}
        cpri_mapping:  "{{ vcpri | map(attribute='mapping')  | map('default', '') | join(',') }}",
        cpri_mult:     "{{ vcpri | map(attribute='mult')     | map('default', '') | join(',') }}",
        cpri_rx_delay: "{{ vcpri | map(attribute='rx_delay') | map('default', '') | join(',') }}",
        cpri_tx_delay: "{{ vcpri | map(attribute='tx_delay') | map('default', '') | join(',') }}",
        cpri_tx_dbm:   "{{ vcpri | map(attribute='tx_dbm')   | map('default', '') | join(',') }}",
        ifname:        "{{ vcpri | map(attribute='_tap')     | map('default', '') | join(',') }}",
  {%- endif                                                     %}
  },

  {#- emit tx/rx gain for all channels #}
  tx_gain: {{ tx_gainv }},
  rx_gain: {{ rx_gainv }},
{%- endmacro  %}


{#- cell_tdd_config returns tdd_config for an LTE cell. #}
{%- macro cell_tdd_config(cell) %}
{%-   set _ = {'[Configuration 2] 5ms 2UL 6DL (default)':        2,
               '[Configuration 6] 5ms 5UL 3DL (maximum uplink)': 6} %}
{{-   _[cell.tdd_ul_dl_config] }}
{%- endmacro -%}

{#- XXX doc, naming ok ?  #}
{%- macro nr_cell_tdd_config(cell) %}
{%-   set _ = {'5ms 2UL 7DL 4/6 (default)':         1,
               '2.5ms 1UL 3DL 2/10':                2,
               '5ms 8UL 1DL 2/10 (maximum uplink)': 3}  %}
{{-   _[cell.tdd_ul_dl_config] }}
{%- endmacro -%}

{#- cell_n_rb_dl returns n_rb_dl for an LTE cell. #}
{%- macro cell_n_rb_dl(cell) %}
{%-   set _ = {'1.4 MHz':  6,
               '3 MHz':   15,
               '5 MHz':   25,
               '10 MHz':  50,
               '15 MHz':  75,
               '20 MHz': 100}   %}
{{-   _[cell.bandwidth] }}
{%- endmacro -%}
