{#- XXX ORS -> provide defaults for: slave_instance_list #}
{#- XXX icell vs cell / iru vs ru everyhere + document it #}
{#- XXX TDD check   #}

{#- defaults provide default values for parameters.
    it should be kept in sync with "default" in json schemas  #}
{%- set defaults = {
      'enb_id': '0x1A2D0',
      'gnb_id': '0x12345',
      'gnb_id_bits': 28,

      'cell/lte': {
        'pci':  1,
        'tac':  "0x0001",
        'tdd_ul_dl_config': '[Configuration 2] 5ms 2UL 6DL (default)',
      },
      'cell/nr': {
        'pci':  500,
        'ssb_pos_bitmap':   '10000000',
        'tdd_ul_dl_config': '5ms 2UL 7DL 4/6 (default)',
      },
      'cpri_link': {
        'mapping': 'hw',
        'mult':     16,
        'rx_delay':  0,
        'tx_delay':  0,
        'tx_dbm':    0,
      }
    }
%}

{#- cfg returns value of configuration parameter name #}
{%- macro cfg(name)     %}
{{- slapparameter_dict.get(name, defaults.get(name)) }}
{%- endmacro %}

{%- import 'lte.jinja2' as lte -%}

{#- J is used around macro calls to retrieve returned objects.

    It is needed to workaround jinja2 limitation that macro can return only
    strings - not arbitrary objects: we return objects as JSON-encoded string
    and J decodes them.

    By convention macros that return JSON-encoded objects start with "j" prefix.

    Usage example:

      set obj = J(jmymacro(...))
#}
{%- set J = json_module.loads %}

{#- XXX error(slave, msg)  vvv is debug stub -#}
{%- macro error(slave, msg)   %}
{%-   set msg = 'E: %s: %s\n' % (J(jref_of_shared(slave)), msg)     %}
{%-   do print('\n%s' % msg)                                        %}
{%-   do assert(False, msg)                                         %}
{%- endmacro  %}

{#- bug indicates an error in template logic.
    it should not happen.                                           #}
{%- macro bug(msg)                                                  %}
{%-   do assert(False, msg)                                         %}
{%- endmacro                                                        %}


{#- jcell_ru_ref returns RU reference linked from a cell.
    if the cell embeds RU definition, its reference comes as `_<cell_ref>_ru`. #}
{%- macro jcell_ru_ref(icell)                                         %}
{{-   _jcell_ru_ref(icell, [])                                        }}
{%- endmacro                                                          %}
{%- macro _jcell_ru_ref(icell, seen)                                  %}
{%-   set cell_ref = J(jref_of_shared(icell))                         %}
{%-   if cell_ref in seen                                             %}
{%-     for x in seen                                                 %}
{%-       do error(x, "%s form a cycle via RU references" % seen)     %}
{%-     endfor                                                        %}
{#-     XXX what to return ?                                          #}
{%-   else                                                            %}
{%-     do seen.append(cell_ref)                                      %}
{%-     set ru = icell['_']['ru']                                     %}
{%-     if ru['ru_type'] == 'ru_ref'                                  %}
{{-       ru['ru_ref'] | tojson                                       }}
{%-     elif ru['ru_type'] == 'ruincell_ref'                          %}
{#-       XXX first check referred cell exist ? #}
{{-       _jcell_ru_ref(icell_dict[ru['ruincell_ref']], seen)         }}
{%-     else                                                          %}
{#-       ru definition is embedded into cell                         #}
{{-       ('_%s_ru' % J(jref_of_shared(icell))) | tojson              }}
{%-     endif                                                         %}
{%-   endif                                                           %}
{%- endmacro %}

{#- jref_of_shared returns original reference used to request shared instance.
    it is extracted from slave_reference which is composed as <partition_id>_<reference>. #}
{%- macro jref_of_shared(slave) %}
{#- do  print('jref_of_shared %r' % (slave,)) #}
{%-   set ref = slave['slave_reference']                                    %}
{%-   set partition_id = slap_configuration['slap-computer-partition-id']   %}
{%-   if ref.startswith(partition_id)                                       %}
{%-     set ref = ref[len(partition_id):]                                   %}
{%-   endif                                                                 %}
{%-   if ref.startswith('_')                                                %}
{%-     set ref = ref[1:]                                                   %}
{%-   endif                                                                 %}
{{-   ref | tojson                                                          }}
{%- endmacro                                                                %}


{#- icell_dict keeps cell slave instances:  reference -> icell
    iru_dict   keeps RU   slave instances + RU whose definition is embedded into a cell:  reference -> iRU
    in the kept instances _ is automatically json-decoded
#}
{%- set icell_dict = {}                                               %}
{%- set iru_dict   = {}                                               %}
{%- for slave in slap_configuration.get('slave-instance-list', [])    %}
{%-   set ref = J(jref_of_shared(slave))                              %}
{%-   set _ = J(slave['_'])                                           %}
{%-   do slave.update({'_': _})                                       %}
{%-   if   'ru_type'   in _                                           %}
{%-     set iru = slave                                               %}
{%-     do iru_dict.update({ref: iru})                                %}
{%-   elif 'cell_type' in _                                           %}
{%-     set icell = slave                                             %}
{%-     for k, v in defaults['cell/' + _['cell_type']].items()        %}
{%-       do _.setdefault(k, v)                                       %}
{%-     endfor                                                        %}
{%-     do icell_dict.update({ref: icell})                            %}
{%-     set ru = _['ru']                                              %}
{%-     if ru['ru_type'] not in ('ru_ref', 'ruincell_ref')            %}
{#-       embedded ru definition -> expose it as `_<cell_ref>_ru`     #}
{%-       do iru_dict.update({'_%s_ru' % ref: {
                '_':                ru,
                'slave_title':      '%s. RU' % icell['slave_title'],
                'slave_reference':  icell['slave_reference'],
             }})                                                      %}
{%-     endif                                                         %}
{%-   else                                                            %}
{%-     do error(slave, "unknown shared instance type")               %}
{%-   endif                                                           %}
{%- endfor                                                            %}

{#- do print('\n>>> iru_dict:'),   pprint(iru_dict)   #}
{#- do print('\n>>> icell_dict:'), pprint(icell_dict) #}

{#- XXX verify cell_type = lte|nr   XXX no - this should be verified by json-schema #}

{#- verify that there is no dangling cell->ru references #}
{#- XXX also verify that there is no dangling cell -> cell refs in ruincell_ref #}
{%- for _, icell in icell_dict|dictsort                                %}
{%-   set ru_ref = J(jcell_ru_ref(icell))                             %}
{%-   if ru_ref not in iru_dict                                        %}
{%-     do error(icell, "referred RU %s does not exist" % ru_ref)     %}
{%-   endif                                                           %}
{%- endfor                                                            %}


{#- start of the config -#}

{
  log_options: "all.level=error,all.max_size=0,nas.level=debug,nas.max_size=1,s1ap.level=debug,s1ap.max_size=1,x2ap.level=debug,x2ap.max_size=1,rrc.level=debug,rrc.max_size=1,ngap.level=debug,ngap.max_size=1,xnap.level=debug,xnap.max_size=1,
{%- if slapparameter_dict.get('log_phy_debug', False) -%}
    phy.level=debug
{%- else -%}
    phy.level=info
{%- endif -%}
    ,file.rotate=1G,file.path=/dev/null",
  log_filename: "{{ directory['log'] }}/enb.log",

{#  instantiate radio units #}
  rf_driver: {
{%- if slapparameter_dict.get('disable_sdr', False) %}
      name: "dummy",
{%- else %}
      name: "sdr",
{%- endif %}
{%- if slapparameter_dict.get('gps_sync', False) %}
      sync: "gps",
{%- endif %}

{#- XXX emit big warning if both cpri and sdr are present
        to protect users from unclear eNB failues
        see https://support.amarisoft.com/issues/26021 for details

    XXX belowe we continue as if sdr and cpri are both supported by enb simultaneously #}

{%- set dev_argv = []                                                       %}
{%- set ru_sdr_dict = {}  %}  {# dev -> ru  for ru with ru_type = sdr       #}
{%- set ru_cpri_dict = {} %}  {# dev -> ru  for ru with link_kind = cpri    #}
{%- for rf_port, (ru_ref, iru) in enumerate(iru_dict|dictsort)              %}
{%-   set ru = iru['_']                                                     %}
{%-   do ru.update({'.rf_port': rf_port})                                   %}
{%-   if ru['ru_type'] == 'sdr'                                             %}
{%-     do ru_sdr_dict.update({len(dev_argv): ru})                          %}
    {#- XXX move to ru/sdr ?  #}
{%-     for n in ru['sdr_dev_list']                                         %}
{%-       do dev_argv.append("dev%d=/dev/sdr%d" % (len(dev_argv), n))       %}
{%-     endfor                                                              %}
{%-   elif ru['ru_link_type'] == 'cpri'                                     %}
{%-     do ru_cpri_dict.update({len(dev_argv): ru})                         %}
{%-     set link = ru['cpri_link']                                          %}
{#-     set cpri_link parameters to default         #}
{%-     for k, v in defaults['cpri_link'].items()   %}
{%-       do link.setdefault(k, v)                  %}
{%-     endfor                                      %}
{%-     do dev_argv.append("dev%d=/dev/sdr%d@%d" % (len(dev_argv), link['sdr_dev'], link['sfp_port']))   %}
{%-   else        %}
{%-     do bug('unreachable')                                 %}
{%-   endif                                                   %}
{%- endfor %}

      args: "{{dev_argv | join(',')}}",

{#- emit sdr-related options if an sdr ru is present #}
{%- if len(ru_sdr_dict) > 0               %}
      rx_antenna:"tx_rx",   {#- XXX -> ru/sdr ? #}
      tdd_tx_mod: 1,
{%- endif                                 %}

{#- emit cpri_* optins if a cpri ru is present #}
{#- NOTE values for non-cpri links come as empty   XXX recheck this is ok #}
{%- if len(ru_cpri_dict) > 0              %}
{%-   set vcpri = [None]*len(dev_argv)    %}
{%-   for dev, ru in ru_cpri_dict|dictsort  %}
{%-     do vcpri.__setitem__(dev, ru['cpri_link'])       %}
{%-   endfor                                %}
      cpri_mapping:  "{{ vcpri | map(attribute='mapping')  | map('default', '') | join(',') }}",
      cpri_mult:     "{{ vcpri | map(attribute='mult')     | map('default', '') | join(',') }}",
      cpri_rx_delay: "{{ vcpri | map(attribute='rx_delay') | map('default', '') | join(',') }}",
      cpri_tx_delay: "{{ vcpri | map(attribute='tx_delay') | map('default', '') | join(',') }}",
      cpri_tx_dbm:   "{{ vcpri | map(attribute='tx_dbm')   | map('default', '') | join(',') }}",
{%-   set tap_base = slap_configuration.get('tap-name', '')   %}
{%-   set vtap = ['']*len(dev_argv)                           %}
{%-   for i, (dev, _) in enumerate(ru_cpri_dict|dictsort)     %}
{%-     if len(ru_cpri_dict) > 1                              %}
{%-       set tap = "%s-%d" % (tap_base, i)                   %}
{%-     else                                                  %}
{%-       set tap = tap_base                                  %}
{%-     endif                                                 %}
{%-     do vtap.__setitem__(dev, tap)                         %}
{%-   endfor                                                  %}
      ifname:        "{{ vtap | join(',') }}",
{%- endif                                                     %}
  },

{# TODO amarisoft doc says tx_gain/rx_gain are per-channel -> allow separate configuration
   NOTE one RF port can consist of multiple DL and multiple UL channels #}
  tx_gain: {{ tx_gain }},
  rx_gain: {{ rx_gain }},


  {%- if slapparameter_dict.get('websocket_password', '') %}
  com_addr: "[{{ gtp_addr_v6 }}]:9001",
  com_auth: {
    password: "{{ slapparameter_dict['websocket_password'] }}",
  },
  {%- else %}
  com_addr: "127.0.1.2:9001",
  {%- endif %}

  // XXX only if slapparameter_dict.get('mme_list') || has LTE cell ?
  mme_list: [
{%- for _, mme in slapparameter_dict.get('mme_list', {'1':{'mme_addr': '127.0.1.100'}})
                                        | dictsort %}
    {
      mme_addr: "{{ mme['mme_addr'] }}",
    },
{%- endfor %}
  ],

  // XXX only if slapparameter_dict.get('afm_list') || has NR cell ?
  afm_list: [
{%- for _, afm in slapparameter_dict.get('afm_list', {'1':{'afm_addr': '127.0.1.100'}})
                                        | dictsort %}
    {
      afm_addr: "{{ afm['afm_addr'] }}",
    },
{%- endfor %}
  ],

{#- X2/Xn TODO:  add info about peers as shared instances - one instance per peer *ENB*.
          then query SlapOS Master about cells configured on that peer ENB and
          depending on whether LTE and/or NR cells are there add X2 and/or Xn peers #}
{% if slapparameter_dict.get('xn_peers', '') %}
  xn_peers: [
{%- for k in slapparameter_dict['xn_peers'] -%}
    "{{ slapparameter_dict['xn_peers'][k]['xn_addr'] }}",
{%- endfor -%}
  ],
{% endif %}

{% if slapparameter_dict.get('mme_list', '')  or  slapparameter_dict.get('afm_list', '') %}
{%   if slapparameter_dict.get('use_ipv4', False) %}
  gtp_addr: "{{ gtp_addr_v4 }}",
{%   else %}
  gtp_addr: "{{ gtp_addr_v6 }}",
{%   endif %}
{% else %}
  gtp_addr: "127.0.1.1",
{% endif %}

  enb_id: {{ cfg('enb_id') }},
  gnb_id: {{ cfg('gnb_id') }},
  gnb_id_bits: {{ cfg('gnb_id_bits') }},
  en_dc_support: true,

  // LTE cells    XXX ru['xxx'] -> ru.xxx
  cell_list: [
{%- for i, (cell_ref, icell) in enumerate(icell_dict|dictsort) %}
{%-   set cell = icell['_']                   %}
{%-   if cell['cell_type'] == 'lte'           %}
{%-     set ru_ref = J(jcell_ru_ref(icell))   %}
{%-     set iru = iru_dict[ru_ref]            %}
{%-     set ru = iru['_']                     %}

        // {{ J(jref_of_shared(icell)) }}
        {
          rf_port:      {{ ru['.rf_port'] }},
          n_antenna_dl: {{ ru['n_antenna_dl'] }},
          n_antenna_ul: {{ ru['n_antenna_ul'] }},

          cell_id:      {{ cell['cell_id'] }},
          tac:          {{ cell['tac'] }},
          n_id_cell:    {{ cell['pci'] }},
          dl_earfcn:    {{ cell['dl_earfcn'] }},
          root_sequence_index: {{ cell.get('root_sequence_index',
                                    slapparameter_dict.get('root_sequence_index',
                                      204 + i)) }},

          // Handover   XXX same code for both LTE and NR
          ncell_list: [
            // Intra-ENB HO
{%-       for cell2_ref, icell2 in icell_dict|dictsort %}
{%-         set cell2 = icell2['_']                   %}
{%-         if cell2_ref != cell_ref %} {#- NOTE: HO to both LTE and NR #}
            {
{%-           if cell2['cell_type'] == 'lte' %}
              rat:        "eutra",
              cell_id:    {{ cfg('enb_id')}}{{ cell2['cell_id'] }}, // -> {{ J(jref_of_shared(icell2)) }}
              n_id_cell:  {{ cell2['pci'] }},
              dl_earfcn:  {{ cell2['dl_earfcn'] }},
              tac:        {{ cell2['tac'] }},
{%-           elif cell2['cell_type'] == 'nr' %}
              rat:        "nr",
              nr_cell_id: {{ cfg('gnb_id')}}{{ cell2['cell_id'] }}, // -> {{ J(jref_of_shared(icell2)) }}
              n_id_cell:  {{ cell2['pci'] }},
              gnb_id_bits
              dl_nr_arfcn
              ssb_nr_arfcn
              ul_nr_arfcn
              tac
              band
              ssb_subcarrier_spacing: 30,
              ssb_period: 20,
              ssb_offset: 0,
              ssb_duration: 1,
{%-           else  %}
{%-             do bug('unreachable')   %}
{%-           endif %}
            },
{%-         endif %}
{%-       endfor %}

            // Inter-ENB HO
{#- TODO: add info about peers as shared instances - one instance per peer *ENB*.
          then query SlapOS Master about cells configured on that peer ENB and
          put them as peers here #}

          ],

          // Carrier Aggregation
{#-       CA in between all LTE cells #}  // XXX + CA LTE-NR
          scell_list: [
{%-       for cell2_ref, icell2 in icell_dict|dictsort %}
{%-         set cell2 = icell2['_']                   %}
{%-         if cell2_ref != cell_ref  and  cell2['cell_type'] == 'lte' %}
            {
              cell_id: {{ cell2['cell_id'] }},  // + {{ J(jref_of_shared(icell2)) }}
              cross_carrier_scheduling: false,
            },
{%-         endif %}
{%-       endfor %}
          ],


          // tune LTE parameters for the cell
{%-       set tdd = (cell['rf_mode'] == 'tdd') %}
{%-       if tdd %}
          uldl_config: {{ lte.cell_tdd_config(cell) }},
          sp_config: 7,
{%-       endif %}

{%-       set n_rb_dl = lte.cell_n_rb_dl(cell) %}
          n_rb_dl: {{ n_rb_dl }},
          si_coderate: {{ 0.30  if n_rb_dl == 6  else 0.20 }},

          pdsch_dedicated: {
            p_a: {{ {4: -6, 2: -3}.get(ru['n_antenna_dl'], 0) }},
            p_b: -1,
          },

          pdcch_format:       {{  1  if n_rb_dl == 6  else 2 }},
          prach_config_index: {{ 15  if n_rb_dl == 6  else 4 }},
          initial_cqi:        {{  5  if n_rb_dl == 6  else 3 }},

          pucch_dedicated: {
            n1_pucch_sr_count: 11,
            cqi_pucch_n_rb: 1,
            n1_pucch_an_cs_count: 8,  {# XXX else "n1_pucch_an_cs_count must be > 0 for the CA Primary cell" #}
            n3_pucch_an_n_rb: 3,      {# XXX else "n3_pucch_an_n_rb must be > 0 for the CA Primary cell" #}
{%-         if tdd  %}
            tdd_ack_nack_feedback_mode: "multiplexing", /* TDD only */
{%-         endif %}
          },

{%-       if ru['n_antenna_dl'] >= 2  %}
          m_ri: 8,
          transmission_mode: 3,
{%-       endif %}

          srs_dedicated: {
{%-       if n_rb_dl == 6  %}
            srs_bandwidth_config: 7,
            srs_bandwidth: 1,
{%-       elif n_rb_dl == 15  %}
            srs_bandwidth_config: 6,
            srs_bandwidth: 1,
{%-       elif n_rb_dl == 25  %}
            srs_bandwidth_config: 3,
            srs_bandwidth: 1,
{%-       elif n_rb_dl == 50  %}
            srs_bandwidth_config: 2,
            srs_bandwidth: 2,
{%-       elif n_rb_dl == 75  %}
            srs_bandwidth_config: 2,
            srs_bandwidth: 2,
{%-       else  %}
            srs_bandwidth_config: 2,
            srs_bandwidth: 3,
{%-       endif %}
            srs_subframe_config: 3,
            srs_period: 40,
            srs_hopping_bandwidth: 0,
          },

{#- XXX do we want to differentiate whether it is ORS or Amarisoft SDR board ? #}
{%-       if ru['ru_type'] == 'sdr'   %}
          manual_ref_signal_power: true,
{%-       endif %}

          drb_config: {{ lte.cell_drb_config(cell) }}
        },
{%-   endif %}
{%- endfor %}
  ],

  cell_default: {
    plmn_list: [
{%- if slapparameter_dict.get('plmn_list', '') %}
{%- for i, k in enumerate(slapparameter_dict['plmn_list']) %}
{%- if i == 0 -%}
      {
{%- else -%}
      , {
{%- endif %}
      plmn: "{{ slapparameter_dict['plmn_list'][k]['plmn'] }}",
      reserved: {{ str(slapparameter_dict['plmn_list'][k].get('reserved', false)).lower() }},
      attach_without_pdn: {{ str(slapparameter_dict['plmn_list'][k].get('attach_without_pdn', false)).lower() }},
      }
{%- endfor -%}
{% else %}
      "00101",
{% endif %}
    ],
    cyclic_prefix: "normal",

    phich_duration: "normal",
    phich_resource: "1",

    si_value_tag: 0,
    cell_barred: false,
    intra_freq_reselection: true,
    q_rx_lev_min: -70,
    si_window_length: 40,
    sib_sched_list: [
      {
        filename: "{{ sib23_file }}",
        si_periodicity: 16,
      },
    ],

    si_pdcch_format: 2,

    n_symb_cch: 0,

    prach_freq_offset: -1,

    pusch_dedicated: {
      beta_offset_ack_index: 9,
      beta_offset_ri_index: 6,
      beta_offset_cqi_index: 6,
    },

    pusch_hopping_offset: -1,

    pusch_msg3_mcs: 0,


    dl_256qam: true,
    ul_64qam: true,

    sr_period: 20,

    cqi_period: 40,


    mac_config: {
       ul_max_harq_tx: 5,
       dl_max_harq_tx: 5,
    },

    pusch_max_its: 6,

    dpc: true,
    dpc_pusch_snr_target: 25,
    dpc_pucch_snr_target: 20,

    cipher_algo_pref: [],
    integ_algo_pref: [2, 1],

    // XXX -> cell ?
    inactivity_timer: {{ slapparameter_dict.get('inactivity_timer', slap_configuration['configuration.default_lte_inactivity_timer']) }},

    srb_config: [
      {
        id: 1,
        maxRetxThreshold: 32,
        t_Reordering: 45,
        t_PollRetransmit: 60,
      },
      {
        id: 2 ,
        maxRetxThreshold: 32,
        t_Reordering: 45,
        t_PollRetransmit: 60,
      }
    ],

  meas_config_desc: {
    a1_report_type: "rsrp",
    a1_rsrp: -70,
    a1_hysteresis: 0,
    a1_time_to_trigger: 640,
    a2_report_type: "rsrp",
    a2_rsrp: -80,
    a2_hysteresis: 0,
    a2_time_to_trigger: 640,
    a3_report_type: "rsrp",
    a3_offset: {{ slapparameter_dict.get('lte_handover_a3_offset', 6) }},
    a3_hysteresis: 0,
    a3_time_to_trigger: {{ slapparameter_dict.get('lte_handover_a3_time_to_trigger', 480) }},
  },
  meas_gap_config: "gp0",
  ho_from_meas: true,
  },

  // NR cells
  nr_cell_list: [
{%- for i, (cell_ref, icell) in enumerate(icell_dict|dictsort) %}
{%-   set cell = icell['_']                   %}
{%-   if cell['cell_type'] == 'nr'            %}
{%-     set ru_ref = J(jcell_ru_ref(icell))   %}
{%-     set iru = iru_dict[ru_ref]            %}
{%-     set ru = iru['_']                     %}

        // {{ J(jref_of_shared(icell)) }}
        {
          rf_port:      {{ ru['.rf_port'] }},
          n_antenna_dl: {{ ru['n_antenna_dl'] }},
          n_antenna_ul: {{ ru['n_antenna_ul'] }},

          cell_id:      {{ cell['cell_id'] }},
          n_id_cell:    {{ cell['pci'] }},
          band:         {{ cell['nr_band'] }},
          dl_nr_arfcn:  {{ cell['dl_nr_arfcn'] }},
          bandwidth:    {{ cell['bandwidth'] }},

          subcarrier_spacing: 30,
          ssb_pos_bitmap: {{ cell['ssb_pos_bitmap'] }},
        },

        // XXX peers for HO

        // XXX CA

        // tune NR parameters for the cell
        {%- if slapparameter_dict.get('rrh', 'ORS') == "ORS" %}
            manual_ref_signal_power: true,
        {%- if 'XXX_one_watt' == "True" %}
            ss_pbch_block_power: {{ (tx_gain | int)  - 54 }},
        {%- else %}
            ss_pbch_block_power: {{ (tx_gain | int) - 35 }},
        {%- endif -%}
        {%- endif %}

{% if tdd_config == 1 %}
    tdd_ul_dl_config: {
      pattern1: {
        period: 5,
        dl_slots: 7,
        dl_symbols: 6,
        ul_slots: 2,
        ul_symbols: 4,
      },
    },
{% elif tdd_config == 2 %}
    tdd_ul_dl_config: {
      pattern1: {
        period: 2.5,
        dl_slots: 3,
        dl_symbols: 10,
        ul_slots: 1,
        ul_symbols: 2,
      },
    },
{% elif tdd_config == 3 %}
    tdd_ul_dl_config: {
      pattern1: {
         period: 5, /* in ms */
         dl_slots: 1,
         dl_symbols: 10,
         ul_slots: 8,
         ul_symbols: 2,
      },
    },
{% endif %}


{%-   endif %}
{%- endfor %}
  ],

  nr_cell_default: {
    ssb_period: 20,

    plmn_list: [
{%- if slapparameter_dict.get('plmn_list', '') %}
{%- for i, k in enumerate(slapparameter_dict['plmn_list']) %}
{%- if i == 0 -%}
      {
{%- else -%}
      , {
{%- endif %}
      plmn: "{{ slapparameter_dict['plmn_list'][k]['plmn'] }}",
      tac: {{ slapparameter_dict['plmn_list'][k].get('tac', 100) }},
{%- if slapparameter_dict['plmn_list'][k].get('ranac', '') %}
      ranac: {{ slapparameter_dict['plmn_list'][k]['ranac'] }},
{%- endif %}
      reserved: {{ str(slapparameter_dict['plmn_list'][k].get('reserved', false)).lower() }},
      nssai: [
{%- if slapparameter_dict.get('nssai', '') %}
{%- for j, k in enumerate(slapparameter_dict['nssai']) %}
{%- if j == 0 %}
        {
{%- else -%}
        , {
{%- endif %}
         sst: {{ slapparameter_dict['nssai'][k]['sst'] }},
{%- if slapparameter_dict['nssai'][k].get('sd', '') %}
         sd: {{ slapparameter_dict['nssai'][k]['sd'] }},
{%- endif %}
        }
{%- endfor -%}
{% else %}
        {
         sst: 1,
        },
{% endif %}
      ],
      }
{%- endfor -%}
{% else %}
      {
      plmn: "00101",
      tac: 100,
      reserved: false,
      nssai: [
{%- if slapparameter_dict.get('nssai', '') %}
{%- for j, k in enumerate(slapparameter_dict['nssai']) %}
{%- if j == 0 %}
        {
{%- else -%}
        , {
{%- endif %}
         sst: {{ slapparameter_dict['nssai'][k]['sst'] }},
{%- if slapparameter_dict['nssai'][k].get('sd', '') %}
         sd: {{ slapparameter_dict['nssai'][k]['sd'] }},
{%- endif %}
        }
{%- endfor -%}
{% else %}
        {
         sst: 1,
        },
{% endif %}
       ],
      },
{%- endif %}
    ],

    si_window_length: 40,
    cell_barred: false,
    intra_freq_reselection: true,
    q_rx_lev_min: -70,
    q_qual_min: -20,

    root_sequence_index: 1,         // XXX -> cell

    sr_period: 40,
    dmrs_type_a_pos: 2,
    prach: {
      prach_config_index: 160,
      msg1_subcarrier_spacing: 30,
      msg1_fdm: 1,
{% if slapparameter_dict.get('rrh', 'ORS') == "M2RU Sunwave" %}
      msg1_frequency_start: 0,
{% else %}
      msg1_frequency_start: -1,
{% endif %}
      zero_correlation_zone_config: 15,
      preamble_received_target_power: -110,
      preamble_trans_max: 7,
      power_ramping_step: 4,
      ra_response_window: 20,
      restricted_set_config: "unrestricted_set",
      ra_contention_resolution_timer: 64,
      ssb_per_prach_occasion: 1,
      cb_preambles_per_ssb: 8,
    },
    pdcch: {
{% if slapparameter_dict.get('rrh', 'ORS') == "M2RU Sunwave" %}
      n_rb_coreset0: 48,
      n_symb_coreset0: 1,
{% endif %}
      search_space0_index: 0,
      dedicated_coreset: {
        rb_start: -1,
        l_crb: -1,
{% if slapparameter_dict.get('rrh', 'ORS') == "M2RU Sunwave" %}
        duration: 1,
{% else %}
        duration: 0,
{% endif %}
        precoder_granularity: "sameAsREG_bundle",
      },
      css: {
        n_candidates: [ 0, 0, 4, 0, 0 ],
      },
      rar_al_index: 2,
      si_al_index: 2,
{% if tdd_config == 3 %}
      uss: {
       n_candidates: [ 0, 8, 1, 0, 0 ],
       dci_0_1_and_1_1: true,
      },
{% else %}
      uss: {
        n_candidates: [ 0, 2, 1, 0, 0 ],
        dci_0_1_and_1_1: true,
      },
{% endif %}
      al_index: 1,
    },
    pdsch: {
      mapping_type: "typeA",
      dmrs_add_pos: 1,
      dmrs_type: 1,
      dmrs_max_len: 1,
{% if slapparameter_dict.get('rrh', 'ORS') == "M2RU Sunwave" %}
      k0: 0,
      k1: [ 8, 7, 7, 6, 5, 4, 12, 11 ],
{% elif tdd_config == 3 %}
      k1: [4, 11], 
{% endif %}
      mcs_table: "qam256",
      rar_mcs: 2,
      si_mcs: 6,
    },
    csi_rs: {
      nzp_csi_rs_resource: [
        {
          csi_rs_id: 0,
{%- if ru.n_antenna_dl == 1     %}
          n_ports: 1,
          frequency_domain_allocation: "row2",
          bitmap: "100000000000",
          cdm_type: "no_cdm",
{%- elif ru.n_antenna_dl == 2   %}
          n_ports: 2,
          frequency_domain_allocation: "other",
          bitmap: "100000",
          cdm_type: "fd_cdm2",
{%- elif ru.n_antenna_dl == 4   %}
          n_ports: 4,
          frequency_domain_allocation: "row4",
          bitmap: "100",
          cdm_type: "fd_cdm2",
{%- elif ru.n_antenna_dl == 8   %}
          n_ports: 8,
          frequency_domain_allocation: "other",
          bitmap: "110011",
          cdm_type: "fd_cdm2",
{%- else  %}
{%-  do error(icell, "unsupported number of DL antennas")   %}
{%- endif %}
          density: 1,
          first_symb: 4,
          rb_start: 0,
          l_crb: -1,
          power_control_offset: 0,
          power_control_offset_ss: 0,
          period: 80,
          offset: 1,
          qcl_info_periodic_csi_rs: 0,
        },
{% if tdd_config != 3 %}
        {
          csi_rs_id: 1,
          n_ports: 1,
          frequency_domain_allocation: "row1",
          bitmap: "0001",
          cdm_type: "no_cdm",
          density: 3,
          first_symb: 4,
          rb_start: 0,
          l_crb: -1,
          power_control_offset: 0,
          power_control_offset_ss: 0,
          period: 40,
          offset: 11,
          qcl_info_periodic_csi_rs: 0,
        },
        {
          csi_rs_id: 2,
          n_ports: 1,
          frequency_domain_allocation: "row1",
          bitmap: "0001",
          cdm_type: "no_cdm",
          density: 3,
          first_symb: 8,
          rb_start: 0,
          l_crb: -1,
          power_control_offset: 0,
          power_control_offset_ss: 0,
          period: 40,
          offset: 11,
          qcl_info_periodic_csi_rs: 0,
        },
        {
          csi_rs_id: 3,
          n_ports: 1,
          frequency_domain_allocation: "row1",
          bitmap: "0001",
          cdm_type: "no_cdm",
          density: 3,
          first_symb: 4,
          rb_start: 0,
          l_crb: -1,
          power_control_offset: 0,
          power_control_offset_ss: 0,
          period: 40,
          offset: 12,
          qcl_info_periodic_csi_rs: 0,
        },
        {
          csi_rs_id: 4,
          n_ports: 1,
          frequency_domain_allocation: "row1",
          bitmap: "0001",
          cdm_type: "no_cdm",
          density: 3,
          first_symb: 8,
          rb_start: 0,
          l_crb: -1,
          power_control_offset: 0,
          power_control_offset_ss: 0,
          period: 40,
          offset: 12,
          qcl_info_periodic_csi_rs: 0,
        },
{% endif %}
      ],
      nzp_csi_rs_resource_set: [
        {
          csi_rs_set_id: 0,
          nzp_csi_rs_resources: [ 0 ],
          repetition: false,
        },
{% if tdd_config != 3 %}
        {
          csi_rs_set_id: 1,
          nzp_csi_rs_resources: [ 1, 2, 3, 4 ],
          repetition: false,
          trs_info: true,
        },
{% endif %}
      ],
     csi_im_resource: [
        {
          csi_im_id: 0,
          pattern: 1,
          subcarrier_location: 8,
          symbol_location: 8,
          rb_start: 0,
          l_crb: -1,
          period: 80,
          offset: 1,
        },
      ],
      csi_im_resource_set: [
        {
          csi_im_set_id: 0,
          csi_im_resources: [ 0 ],
        }
      ],
      zp_csi_rs_resource: [
        {
          csi_rs_id: 0,
          frequency_domain_allocation: "row4",
          bitmap: "100",
          n_ports: 4,
          cdm_type: "fd_cdm2",
          first_symb: 8,
          density: 1,
          rb_start: 0,
          l_crb: -1,
          period: 80,
          offset: 1,
        },
      ],
      p_zp_csi_rs_resource_set: [
        {
          zp_csi_rs_resources: [ 0 ],
        },
      ],
      csi_resource_config: [
        {
          csi_rsc_config_id: 0,
          nzp_csi_rs_resource_set_list: [ 0 ],
          resource_type: "periodic",
        },
        {
          csi_rsc_config_id: 1,
          csi_im_resource_set_list: [ 0 ],
          resource_type: "periodic",
        },
{% if tdd_config != 3 %}
        {
          csi_rsc_config_id: 2,
          nzp_csi_rs_resource_set_list: [ 1 ],
          resource_type: "periodic",
        },
{% endif %}
      ],
      csi_report_config: [
        {
          resources_for_channel_measurement: 0,
          csi_im_resources_for_interference: 1,
          report_config_type: "periodic",
          period: 80,
          report_quantity: "CRI_RI_PMI_CQI",
#if N_ANTENNA_DL > 1
          codebook_config: {
            codebook_type: "type1",
            sub_type: "typeI_SinglePanel",
#if N_ANTENNA_DL == 2
#elif N_ANTENNA_DL == 4
            n1: 2,
            n2: 1,
            codebook_mode: 1,
#elif N_ANTENNA_DL == 8
            n1: 4,
            n2: 1,
            codebook_mode: 1,
#endif
          },
#endif
          cqi_table: 2,
          subband_size: "value1",
        },
      ],
    },
    pucch: {
      dpc_snr_target: 25,
      pucch_group_hopping: "neither",
      hopping_id: -1,
      p0_nominal: -90,
        pucch1: {
          n_cs: 3,
          n_occ: 3,
          freq_hopping: true,
        },
        pucch2: {
          n_symb: 2,
          n_prb: 1,
          freq_hopping: true,
          simultaneous_harq_ack_csi: false,
          max_code_rate: 0.25,
        },
    },
    pusch: {
      mapping_type: "typeA",
      n_symb: 14,
      dmrs_add_pos: 1,
      dmrs_type: 1,
      dmrs_max_len: 1,
      tf_precoding: false,
      mcs_table: "qam256",
      mcs_table_tp: "qam256",
      ldpc_max_its: 5,
{% if slapparameter_dict.get('rrh', 'ORS') == "M2RU Sunwave" %}
      k2: 4,
      msg3_k2: 7,
{% elif tdd_config == 3 %}
      k2: [11, 12, 4, 5, 6, 7, 7, 8], 
      msg3_k2: 7,
{% endif %}
      p0_nominal_with_grant: -84,
      msg3_mcs: 4,
      msg3_delta_power: 0,
      beta_offset_ack_index: 9,
    },
    mac_config: {
      msg3_max_harq_tx: 5,
      ul_max_harq_tx: 5,
      dl_max_harq_tx: 5,
      ul_max_consecutive_retx: 30,
      dl_max_consecutive_retx: 30,
      periodic_bsr_timer: 20,
      retx_bsr_timer: 320,
      periodic_phr_timer: 500,
      prohibit_phr_timer: 200,
      phr_tx_power_factor_change: "dB3",
      sr_prohibit_timer: 0,
      sr_trans_max: 64,
    },
    cipher_algo_pref: [],
    integ_algo_pref: [2, 1],
    inactivity_timer: {{ slapparameter_dict.get('inactivity_timer', slap_configuration['configuration.default_nr_inactivity_timer']) }},
    drb_config: [
    {
      qci: 1,
      use_for_mr_dc_scg: false,
      ims_dedicated_bearer: true,
      pdcp_config: {
        discardTimer: 100,
        pdcp_SN_SizeUL: 12,
        pdcp_SN_SizeDL: 12,
        statusReportRequired: false,
        outOfOrderDelivery: false,
        t_Reordering: 0,
      },
      rlc_config: {
        ul_um: {
          sn_FieldLength: 6,
        },
        dl_um: {
          sn_FieldLength: 6,
          t_Reassembly: 50,
        },
      },
      logical_channel_config: {
        priority: 7,
        prioritisedBitRate: 0,
        bucketSizeDuration: 100,
        logicalChannelGroup: 1,
      },
    },
    {
      qci: 2,
      use_for_mr_dc_scg: false,
      ims_dedicated_bearer: true,
      pdcp_config: {
        discardTimer: 150,
        pdcp_SN_SizeUL: 18,
        pdcp_SN_SizeDL: 18,
        statusReportRequired: false,
        outOfOrderDelivery: false,
        t_Reordering: 0,
      },
      rlc_config: {
        ul_um: {
          sn_FieldLength: 12,
        },
        dl_um: {
          sn_FieldLength: 12,
          t_Reassembly: 50,
        },
      },
      logical_channel_config: {
        priority: 8,
        prioritisedBitRate: 0,
        bucketSizeDuration: 100,
        logicalChannelGroup: 1,
      },
    },
    {
      qci: 3,
      pdcp_config: {
        discardTimer: 100,
        pdcp_SN_SizeUL: 18,
        pdcp_SN_SizeDL: 18,
        statusReportRequired: false,
        outOfOrderDelivery: false,
        t_Reordering: 0,
      },
      rlc_config: {
        ul_um: {
          sn_FieldLength: 12,
        },
        dl_um: {
          sn_FieldLength: 12,
          t_Reassembly: 50,
        },
      },
      logical_channel_config: {
        priority: 7,
        prioritisedBitRate: 0,
        bucketSizeDuration: 100,
        logicalChannelGroup: 2,
      },
    },
    {
      qci: 4,
      pdcp_config: {
        discardTimer: 0,
        pdcp_SN_SizeUL: 18,
        pdcp_SN_SizeDL: 18,
        statusReportRequired: true,
        outOfOrderDelivery: false,
      },
      rlc_config: {
        ul_am: {
          sn_FieldLength: 18,
          t_PollRetransmit: 80,
          pollPDU: 64,
          pollByte: 125,
          maxRetxThreshold: 4,
        },
        dl_am: {
          sn_FieldLength: 18,
          t_Reassembly: 80,
          t_StatusProhibit: 10,
        },
      },
      logical_channel_config: {
        priority: 9,
        prioritisedBitRate: 8,
        bucketSizeDuration: 100,
        logicalChannelGroup: 3,
      },
    },
    {
      qci: 65,
      use_for_mr_dc_scg: false,
      ims_dedicated_bearer: true,
      pdcp_config: {
        discardTimer: 100,
        pdcp_SN_SizeUL: 12,
        pdcp_SN_SizeDL: 12,
        statusReportRequired: false,
        outOfOrderDelivery: false,
        t_Reordering: 0,
      },
      rlc_config: {
        ul_um: {
          sn_FieldLength: 6,
        },
        dl_um: {
          sn_FieldLength: 6,
          t_Reassembly: 50,
        },
      },
      logical_channel_config: {
        priority: 5,
        prioritisedBitRate: 0,
        bucketSizeDuration: 100,
        logicalChannelGroup: 4,
      },
    },
    {
      qci: 66,
      use_for_mr_dc_scg: false,
      ims_dedicated_bearer: true,
      pdcp_config: {
        discardTimer: 150,
        pdcp_SN_SizeUL: 18,
        pdcp_SN_SizeDL: 18,
        statusReportRequired: false,
        outOfOrderDelivery: false,
        t_Reordering: 0,
      },
      rlc_config: {
        ul_um: {
          sn_FieldLength: 12,
        },
        dl_um: {
          sn_FieldLength: 12,
          t_Reassembly: 50,
        },
      },
      logical_channel_config: {
        priority: 7,
        prioritisedBitRate: 0,
        bucketSizeDuration: 100,
        logicalChannelGroup: 4,
      },
    },
    {
      qci: 67,
      use_for_mr_dc_scg: false,
      ims_dedicated_bearer: true,
      pdcp_config: {
        discardTimer: 100,
        pdcp_SN_SizeUL: 18,
        pdcp_SN_SizeDL: 18,
        statusReportRequired: false,
        outOfOrderDelivery: false,
        t_Reordering: 0,
      },
      rlc_config: {
        ul_um: {
          sn_FieldLength: 12,
        },
        dl_um: {
          sn_FieldLength: 12,
          t_Reassembly: 50,
        },
      },
      logical_channel_config: {
        priority: 6,
        prioritisedBitRate: 0,
        bucketSizeDuration: 100,
        logicalChannelGroup: 5,
      },
    },
    {
      qci: 5,
      use_for_mr_dc_scg: false,
      pdcp_config: {
        discardTimer: 0,
        pdcp_SN_SizeUL: 18,
        pdcp_SN_SizeDL: 18,
        statusReportRequired: true,
        outOfOrderDelivery: false,
      },
      rlc_config: {
        ul_am: {
          sn_FieldLength: 18,
          t_PollRetransmit: 80,
          pollPDU: 64,
          pollByte: 125,
          maxRetxThreshold: 4,
        },
        dl_am: {
          sn_FieldLength: 18,
          t_Reassembly: 80,
          t_StatusProhibit: 10,
        },
      },
      logical_channel_config: {
        priority: 6,
        prioritisedBitRate: 8,
        bucketSizeDuration: 100,
        logicalChannelGroup: 4,
      },
    },
    {
      qci: 6,
      pdcp_config: {
        discardTimer: 0,
        pdcp_SN_SizeUL: 18,
        pdcp_SN_SizeDL: 18,
        statusReportRequired: true,
        outOfOrderDelivery: false,
      },
      rlc_config: {
        ul_am: {
          sn_FieldLength: 18,
          t_PollRetransmit: 80,
          pollPDU: 64,
          pollByte: 125,
          maxRetxThreshold: 4,
        },
        dl_am: {
          sn_FieldLength: 18,
          t_Reassembly: 80,
          t_StatusProhibit: 10,
        },
      },
      logical_channel_config: {
        priority: 10,
        prioritisedBitRate: 8,
        bucketSizeDuration: 100,
        logicalChannelGroup: 5,
      },
    },
    {
      qci: 7,
      pdcp_config: {
        discardTimer: 100,
        pdcp_SN_SizeUL: 18,
        pdcp_SN_SizeDL: 18,
        statusReportRequired: false,
        outOfOrderDelivery: false,
        t_Reordering: 0,
      },
      rlc_config: {
        ul_um: {
          sn_FieldLength: 12,
        },
        dl_um: {
          sn_FieldLength: 12,
          t_Reassembly: 50,
        },
      },
      logical_channel_config: {
        priority: 11,
        prioritisedBitRate: 0,
        bucketSizeDuration: 100,
        logicalChannelGroup: 6,
      },
    },
    {
      qci: 8,
      pdcp_config: {
        discardTimer: 0,
        pdcp_SN_SizeUL: 18,
        pdcp_SN_SizeDL: 18,
        statusReportRequired: true,
        outOfOrderDelivery: false,
      },
      rlc_config: {
        ul_am: {
          sn_FieldLength: 18,
          t_PollRetransmit: 80,
          pollPDU: 64,
          pollByte: 125,
          maxRetxThreshold: 4,
        },
        dl_am: {
          sn_FieldLength: 18,
          t_Reassembly: 80,
          t_StatusProhibit: 10,
        },
      },
      logical_channel_config: {
        priority: 12,
        prioritisedBitRate: 8,
        bucketSizeDuration: 100,
        logicalChannelGroup: 7,
      },
    },
    {
      qci: 9,
      pdcp_config: {
        discardTimer: 0,
        pdcp_SN_SizeUL: 18,
        pdcp_SN_SizeDL: 18,
        statusReportRequired: true,
        outOfOrderDelivery: false,
      },
      rlc_config: {
        ul_am: {
          sn_FieldLength: 18,
          t_PollRetransmit: 80,
          pollPDU: 64,
          pollByte: 125,
          maxRetxThreshold: 4,
        },
        dl_am: {
          sn_FieldLength: 18,
          t_Reassembly: 80,
          t_StatusProhibit: 10,
        },
      },
      logical_channel_config: {
        priority: 13,
        prioritisedBitRate: 8,
        bucketSizeDuration: 100,
        logicalChannelGroup: 7,
      },
    },
    {
      qci: 69,
      use_for_mr_dc_scg: false,
      pdcp_config: {
        discardTimer: 0,
        pdcp_SN_SizeUL: 18,
        pdcp_SN_SizeDL: 18,
        statusReportRequired: true,
        outOfOrderDelivery: false,
      },
      rlc_config: {
        ul_am: {
          sn_FieldLength: 18,
          t_PollRetransmit: 80,
          pollPDU: 64,
          pollByte: 125,
          maxRetxThreshold: 4,
        },
        dl_am: {
          sn_FieldLength: 18,
          t_Reassembly: 80,
          t_StatusProhibit: 10,
        },
      },
      logical_channel_config: {
        priority: 4,
        prioritisedBitRate: 8,
        bucketSizeDuration: 100,
        logicalChannelGroup: 4,
      },
    },
    {
      qci: 70,
      pdcp_config: {
        discardTimer: 0,
        pdcp_SN_SizeUL: 18,
        pdcp_SN_SizeDL: 18,
        statusReportRequired: true,
        outOfOrderDelivery: false,
      },
      rlc_config: {
        ul_am: {
          sn_FieldLength: 18,
          t_PollRetransmit: 80,
          pollPDU: 64,
          pollByte: 125,
          maxRetxThreshold: 4,
        },
        dl_am: {
          sn_FieldLength: 18,
          t_Reassembly: 80,
          t_StatusProhibit: 10,
        },
      },
      logical_channel_config: {
        priority: 11,
        prioritisedBitRate: 8,
        bucketSizeDuration: 100,
        logicalChannelGroup: 5,
      },
    },
  ],

  meas_config_desc: {
    a1_report_type: "rsrp",
    a1_rsrp: -60,
    a1_hysteresis: 10,
    a1_time_to_trigger: 100,
    a2_report_type: "rsrp",
    a2_rsrp: -70,
    a2_hysteresis: 0,
    a2_time_to_trigger: 100,
    a3_report_type: "rsrp",
    a3_offset: {{ slapparameter_dict.get('nr_handover_a3_offset', 6) }},
    a3_hysteresis: 0,
    a3_time_to_trigger: {{ slapparameter_dict.get('nr_handover_time_to_trigger', 100) }},
    ssb_rsrq_filter_coeff: 3,
    ssb_sinr_filter_coeff: 5
  },
  meas_gap_config: {
    pattern_id: 0
  },
  },
}
