{# XXX ORS -> provide defaults for: cell_list #}

{%- import 'lte.jinja2' as lte %}

{# return value is json-encoded to workaround jinja2 macro-ret limitation. #}
{# XXX macro return json -> start from j #}
{%- set J = json_module.loads %}

{# XXX error(slave, msg) #}


{# cell_dict keeps cell slave instances:  reference -> cell #}
{# ru_dict   keeps RU   slave instances + RU whose definition is embedded into a cell:  reference -> RU   #}
{% set cell_dict = {}                                                 %}
{% set ru_dict   = {}                                                 %}
{%- for slave in slave_instance_list                                  %}
{%-   set ref = J(jref_of_shared(slave))                              %}
{%-   set _ = J(slave['_'])                                           %}
{%-   if   'ru_type'   in _                                           %}
{%      do ru_dict[ref] = slave                                       %}
{%-   elif 'cell_type' in _                                           %}
{%-     do cell_dict[ref] = slave                                     %}
{%-     set ru = cell['ru']                                           %}
{%-     if ru['ru_type'] not in ('ru_ref', 'ruincell_ref')            %}
{#        embedded ru definition -> expose it as `_<cell_ref>_ru`     #}
{%-       do ru_dict['_%s_ru' % ref] = ru                             %}
{%-     endif                                                         %}
{%    else                                                            %}
{%      do error(slave, "unknown shared instance type")               %}
{%-   endif                                                           %}
{%- endfor                                                            %}

{# verify that there is no dangling cell->ru references #}
{%- for _, cell in cell_dict|dictsort                                 %}
{%-   set ru_ref = J(jcell_ru_ref(cell))                              %}
{%-   if ru_ref not in ru_dict                                        %}
{%-     do error(cell, "referred RU %s does not exist" % ru_ref)      %}
{%-   endif                                                           %}
{%- endfor                                                            %}

{# jcell_ru_ref returns RU reference linked from a cell.
   if the cell embeds RU definition, its reference comes as `_<cell_ref>_ru`. #}
{%- macro jcell_ru_ref(cell)                                          %}
{{    _jcell_ru_ref(cell, []) | tojson                                }}
{%- endmacro                                                          %}
{%- macro _jcell_ru_ref(cell, seen)                                   %}
{%-   set cell_ref = J(jref_of_shared(cell))                          %}
{%-   if cell_ref in seen                                             %}
{%-     for x in seen                                                 %}
{%-       do error(x, "%s form a cycle via RU references" % seen)     %}
{%-     endfor                                                        %}
{#      XXX what to return ?                                          #}
{%-   else                                                            %}
{%-     seen.append(cell_ref)                                         %}
{%-     set ru = cell['ru']                                           %}
{%-     if ru['ru_type'] == 'ru_ref'                                  %}
{{        ru['ru_ref'] | tojson                                       }}
{%-     elif ru['ru_type'] == 'ruincell_ref'                          %}
{{        jcell_ru_ref(ru['ruincell_ref'])                            }}
{%-     else                                                          %}
{#        ru definition is embedded into cell                         #}
{{        ('_%s_ru' % J(jref_of_shared(cell))) | tojson               }}
{%-     endif                                                         %}
{%-   endif                                                           %}
{%- endmacro %}

{# jref_of_shared returns original reference used to request shared instance.
   it is extracted from slave_reference which is composed as <partition_id>_<reference>. #}
{%- macro jref_of_shared(slave) %}
{%-   set ref = slave['slave_reference']                %}
{%-   set partition_id %}{{partition_id}}{%- endset     %}
{%-   if ref.startswith(partition_id)                   %}
{%-     set ref = ref[len(partition_id):]               %}
{%-   endif                                             %}
{%-   if ref.startswith('_')                            %}
{%-     set ref = ref[1:]                               %}
{%-   endif                                             %}
{{    ref | tojson                                      }}
{%- endmacro                                            %}



{
{% if slapparameter_dict.get('log_phy_debug', False) %}
  log_options: "all.level=error,all.max_size=0,nas.level=debug,nas.max_size=1,s1ap.level=debug,s1ap.max_size=1,x2ap.level=debug,x2ap.max_size=1,rrc.level=debug,rrc.max_size=1,phy.level=debug,file.rotate=1G,file.path=/dev/null",
{% else %}
  log_options: "all.level=error,all.max_size=0,nas.level=debug,nas.max_size=1,s1ap.level=debug,s1ap.max_size=1,x2ap.level=debug,x2ap.max_size=1,rrc.level=debug,rrc.max_size=1,phy.level=info,file.rotate=1G,file.path=/dev/null",
{% endif %}
  log_filename: "{{ directory['log'] }}/enb.log",


{# instantiate radio units #}
  rf_driver: {
{%- if slapparameter_dict.get('disable_sdr', False) %}
      name: "dummy",
{%- else %}
      name: "sdr",
{%- endif %}

{%- for rf_port, (ru_ref, ru) in enumerate(ru_dict|dictsort)  %}
{%-   do ru['.rf_port'] = rf_port                             %}
{%-   if ru['ru_type'] == 'sdr'                               %}
      rx_antenna:"tx_rx",
      tdd_tx_mod: 1,

{%-   elif ru['ru_type] == 'lopcomm' XXX                      %}
        XXX
{%-   endif                                                   %}
{%- endfor %}


  }


# XXX <- trx_X
{% if slapparameter_dict.get('rrh', 'ORS') == "Lopcomm ORAN" %}
  rf_driver: {
{%- if slapparameter_dict.get('disable_sdr', False) %}
      name: "dummy",
{%- else %}
      name: "sdr",
{%- endif %}
      args: "dev0=
        {%- for i, k in enumerate(cell_list) %}
        {%- set cpri_port = cell_list[k].get('cpri_port_number', i) %}
        {%- if i != 0 -%}
        ,
        {%- endif -%}
          /dev/sdr{{ slapparameter_dict.get('sdr_number', 0) }}@{{ cpri_port }}
        {%- endfor -%}
        ",
      cpri_mapping: "hw",
      {%- set cpri_mult = slapparameter_dict.get('cpri_mult', 16) %}
      cpri_mult: "
        {%- for i, k in enumerate(cell_list) %}
        {%- if i != 0 -%}
        ,
        {%- endif -%}
          {{ cpri_mult }}
        {%- endfor -%}
        ",
      cpri_rx_delay: "
        {%- for i, k in enumerate(cell_list) %}
        {%- if i != 0 -%}
        ,
        {%- endif -%}
          {{ cell_list[k].get('cpri_rx_delay', 0) }}
        {%- endfor -%}
        ",
      cpri_tx_delay: "
        {%- for i, k in enumerate(cell_list) %}
        {%- if i != 0 -%}
        ,
        {%- endif -%}
          {{ cell_list[k].get('cpri_tx_delay', 0) }}
        {%- endfor -%}
        ",
      ifname: "
        {%- if len(cell_list) == 1 -%}
          {{ slap_configuration.get('tap-name', '') }}
        {%- else -%}
          {%- for i, k in enumerate(cell_list) %}
          {%- if i != 0 -%}
          ,
          {%- endif -%}
            {{ slap_configuration.get('tap-name', '') }}-{{ i }}
          {%- endfor -%}
        {%- endif -%}
        ",
  },
  tx_gain: 0,
  rx_gain: 0,
{% elif slapparameter_dict.get('rrh', 'ORS') == "ORS" %}
  rf_driver: {
{%- if slapparameter_dict.get('disable_sdr', False) %}
      name: "dummy",
{%- else %}
      name: "sdr",
{%- endif %}
      args: "dev0=/dev/sdr0",
{% if slapparameter_dict.get('gps_sync', False) %}
      sync: "gps",
{% endif %}
      rx_antenna:"tx_rx",
      tdd_tx_mod: 1,
  },
  tx_gain: {{ tx_gain }},
  rx_gain: {{ rx_gain }},
{% endif %}
  com_addr: "127.0.1.2:9001",

  mme_list: [
{% if slapparameter_dict.get('mme_list', '') %}
{%- for i, k in enumerate(slapparameter_dict['mme_list']) %}
{%- if i == 0 %}
    {
{%- else -%}
    , {
{%- endif %}
         mme_addr: "{{ slapparameter_dict['mme_list'][k]['mme_addr'] }}",
    }
{%- endfor -%}
{% else %}
    {
      mme_addr: "127.0.1.100",
    },
{% endif %}
  ],
{% if slapparameter_dict.get('mme_list', '') %}
{%   if slapparameter_dict.get('use_ipv4', False) %}
  gtp_addr: "{{ gtp_addr_v4 }}",
{%   else %}
  gtp_addr: "{{ gtp_addr_v6 }}",
{%   endif %}
{% else %}
  gtp_addr: "127.0.1.1",
{% endif %}

  enb_id: {{ slapparameter_dict.get('enb_id', '0x1A2D0') }},

  # LTE cells
  cell_list: [
{%- for cell_ref, cell in cell_dict|dictsort %}
{%-   if cell['cell_type'] == 'lte' %}
{%-     set ru_ref = J(jcell_ru_ref(cell))    %}
{%-     set ru = ru_dict[ru_ref]              %}
        {
          rf_port:      {{ ru['.rf_port'] }},
          n_antenna_dl: {{ ru['n_antenna_dl' }},
          n_antenna_ul: {{ ru['n_antenna_ul' }},

          cell_id:    {{ cell['cell_id'] }},
          tac:        {{ cell['tac'] }},
          n_id_cell:  {{ cell['pci'] }},
          dl_earfcn:  {{ cell['dl_earfcn'] }},
          root_sequence_index: 204,

{#-       CA in between all LTE cells #}
          scell_list: [
{%-       for cell2_ref, cell2 in cell_dict|dictsort %}
{%-         if cell2_ref != cell_ref  and  cell2['type'] == 'lte' %}
            {
              cell_id: {{ cell2['cell_id'] }},
              cross_carrier_scheduling: false,
            },
{%-         endif %}
{%-       endfor %}
          ],

{#        tune LTE parameters for the cell #}
{%-       set tdd = (cell['rf_mode'] == 'TDD') %}
{%-       if tdd %}
            uldl_config: {{ lte.cell_tdd_config(cell} }},
            sp_config: 7,
{%-       endif %}

{%-       set n_rb_dl = lte.cell_n_rb_dl(cell) %}
          n_rb_dl: {{ n_rb_dl }},
          si_coderate: {{ 0.30  if n_rb_dl == 6  else 0.20 }},

          pdsch_dedicated: {
            p_a: {{ {4: -6, 2: -3}.get(n_antenna_dl, 0) }},
            p_b: -1,
          },

          pdcch_format:       {{  1  if n_rb_dl == 6  else 2 }},
          prach_config_index: {{ 15  if n_rb_dl == 6  else 4 }},
          initial_cqi:        {{  5  if n_rb_dl == 6  else 3 }},

          pucch_dedicated: {
            n1_pucch_sr_count: 11,
            cqi_pucch_n_rb: 1,
{%-         if tdd  %}
              tdd_ack_nack_feedback_mode: "multiplexing", /* TDD only */
{%-         endif %}
          },

{%-       if n_antenna_dl >= 2  %}
            m_ri: 8,
            transmission_mode: 3,
{%-       endif %}

          srs_dedicated: {
{%-       if n_rb_dl == 6  %}
            srs_bandwidth_config: 7,
            srs_bandwidth: 1,
{%-       elif n_rb_dl == 15  %}
            srs_bandwidth_config: 6,
            srs_bandwidth: 1,
{%-       elif n_rb_dl == 25  %}
            srs_bandwidth_config: 3,
            srs_bandwidth: 1,
{%-       elif n_rb_dl == 50  %}
            srs_bandwidth_config: 2,
            srs_bandwidth: 2,
{%-       elif n_rb_dl == 75  %}
            srs_bandwidth_config: 2,
            srs_bandwidth: 2,
{%-       else  %}
            srs_bandwidth_config: 2,
            srs_bandwidth: 3,
{%-       endif %}
            srs_subframe_config: 3,
            srs_period: 40,
            srs_hopping_bandwidth: 0,
          },

          drb_config: {{ lte.cell_drb_config(cell} }}
        },
{%-   endif %}
{%- endfor %}
  ],

  cell_default: {
    plmn_list: [
{%- if slapparameter_dict.get('plmn_list', '') %}
{%- for i, k in enumerate(slapparameter_dict['plmn_list']) %}
{%- if i == 0 -%}
      {
{%- else -%}
      , {
{%- endif %}
      plmn: "{{ slapparameter_dict['plmn_list'][k]['plmn'] }}",
      reserved: {{ str(slapparameter_dict['plmn_list'][k].get('reserved', false)).lower() }},
      attach_without_pdn: {{ str(slapparameter_dict['plmn_list'][k].get('attach_without_pdn', false)).lower() }},
      }
{%- endfor -%}
{% else %}
      "00101",
{% endif %}
    ],
{% if slapparameter_dict.get('rrh', 'ORS') == "ORS" %}  # XXX -> rrh_ors ?
    manual_ref_signal_power: true,
{% endif %}
    cyclic_prefix: "normal",

    phich_duration: "normal",
    phich_resource: "1",

    si_value_tag: 0,
    cell_barred: false,
    intra_freq_reselection: true,
    q_rx_lev_min: -70,
    si_window_length: 40,
    sib_sched_list: [
      {
        filename: "{{ sib23_file }}",
        si_periodicity: 16,
      },
    ],

    si_pdcch_format: 2,

    n_symb_cch: 0,

    prach_freq_offset: -1,

    pusch_dedicated: {
      beta_offset_ack_index: 9,
      beta_offset_ri_index: 6,
      beta_offset_cqi_index: 6,
    },

    pusch_hopping_offset: -1,

    pusch_msg3_mcs: 0,


    dl_256qam: true,
    ul_64qam: true,

    sr_period: 20,

    cqi_period: 40,


    mac_config: {
       ul_max_harq_tx: 5,
       dl_max_harq_tx: 5,
    },

    pusch_max_its: 6,

    dpc: true,
    dpc_pusch_snr_target: 25,
    dpc_pucch_snr_target: 20,

    cipher_algo_pref: [],
    integ_algo_pref: [2, 1],

    # XXX -> cell ?
    inactivity_timer: {{ slapparameter_dict.get('inactivity_timer', slap_configuration['configuration.default_lte_inactivity_timer']) }},

    srb_config: [
      {
        id: 1,
        maxRetxThreshold: 32,
        t_Reordering: 45,
        t_PollRetransmit: 60,
      },
      {
        id: 2 ,
        maxRetxThreshold: 32,
        t_Reordering: 45,
        t_PollRetransmit: 60,
      }
    ],
  },

  # NR cells
  XXX + nr_cell_list
  XXX + nr_cell_default
}
