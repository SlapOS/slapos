{#- Package lte provides helpers for configuring Amarisoft LTE services in SlapOS.

    XXX overview
-#}
{#- XXX rename to amari ? -#}


{#- J is used around macro calls to retrieve returned objects.

    It is needed to workaround jinja2 limitation that macro can return only
    strings - not arbitrary objects: we return objects as JSON-encoded string
    and J decodes them.

    By convention macros that return JSON-encoded objects start with "j" prefix.

    Usage example:

      set obj = J(jmymacro(...))
#}
{%- set J = json_module.loads %}


{#- bug indicates an error in template logic.
    it should not happen.                                           #}
{%- macro bug(msg)                                                  %}
{%-   do assert(False, msg)                                         %}
{%- endmacro                                                        %}

{#- error reports an error about shared instance #}
{#- XXX -> ierror ?   #}
{#- XXX error(ishared, msg)  vvv is debug stub -#}
{%- macro error(ishared, msg)   %}
{%-   set msg = 'E: %s: %s\n' % (J(jref_of_shared(ishared)), msg)   %}
{%-   do print('\n%s' % msg)                                        %}
{%-   do assert(False, msg)                                         %}
{%- endmacro  %}




{#- ---- loading ---- #}

{#- qshared_instance_list queues not yet loaded shared instances.
    load_* routines process this queue and move loaded instances to i<type>_dict registries. #}
{%- set qshared_instance_list = slap_configuration.get('slave-instance-list', []) %}

{#- check_loaded_everything verifies that all shared instances were handling during the load. #}
{%- macro check_loaded_everything() %}
{%-   for ishared in qshared_instance_list  %}
{%-     do error(ishared, "shared instance of unsupported type")  %}
{%-   endfor  %}
{%- endmacro %}

{#- json-decode _ in all shared instances #}
{%- for ishared in qshared_instance_list %}
{%-   do ishared.update({'_': J(ishared['_'])})                   %}
{%- endfor %}


{#- icell_dict keeps cell shared instances:  reference -> icell
    iru_dict   keeps RU   shared instances + RU whose definition is embedded into a cell:  reference -> iRU
    in the kept instances _ is automatically json-decoded

    use load_iru_and_icell(kind) to initialize this cell and RU registries.
    kind=enb  - load cells definition to serve them
    kind=ue   - load cells definition to connect to them

    XXX defaults ?
#}
{%- set icell_dict = {}                                               %}
{%- set iru_dict   = {}                                               %}
{%- macro load_iru_and_icell(kind)                                    %}
{%-   set qother = []                                                 %}
{%-   for ishared in qshared_instance_list                            %}
{%-     set ref = J(jref_of_shared(ishared))                          %}
{%-     set _ = ishared['_']                                          %}
{%-     if   'ru_type'   in _                                         %}
{%-       set iru = ishared                                           %}
{%-       do iru_dict.update({ref: iru})                              %}
{%-     elif (kind == 'enb' and 'cell_type' in _)    or
             (kind == 'ue'  and 'ue_cell_type' in _)                  %}
{%-       set icell = ishared                                         %}
{%-       if kind == 'enb'                                            %}
{%-         for k, v in defaults['cell/' + _.cell_type].items()       %}
{%-           do _.setdefault(k, v)                                   %}
{%-         endfor                                                    %}
{%-       endif                                                       %}
{%-       do icell_dict.update({ref: icell})                          %}
{%-       set ru = _['ru']                                            %}
{%-       if ru.ru_type not in ('ru_ref', 'ruincell_ref')             %}
{#-         embedded ru definition -> expose it as `_<cell_ref>_ru`   #}
{%-         do iru_dict.update({'_%s_ru' % ref: {
                  '_':                ru,
                  'slave_title':      '%s. RU' % icell.slave_title,
                  'slave_reference':  icell.slave_reference,
               }})                                                    %}
{%-       endif                                                       %}
{%-     else                                                          %}
{%-       do qother.append(ishared)                                   %}
{%-     endif                                                         %}
{%-   endfor                                                          %}
{%-   do qshared_instance_list.clear()                                %}
{%-   do qshared_instance_list.extend(qother)                         %}

{#-   do print('\n>>> iru_dict:'),   pprint(iru_dict)   #}
{#-   do print('\n>>> icell_dict:'), pprint(icell_dict) #}

{#-   XXX verify cell_type = lte|nr   XXX no - this should be verified by json-schema #}

{#-   verify that there is no dangling cell->ru references #}
{#-   XXX also verify that there is no dangling cell -> cell refs in ruincell_ref #}
{%-   for _, icell in icell_dict|dictsort                             %}
{%-     set ru_ref = J(jcell_ru_ref(icell))                           %}
{%-     if ru_ref not in iru_dict                                     %}
{%-       do error(icell, "referred RU %s does not exist" % ru_ref)   %}
{%-     endif                                                         %}
{%-   endfor                                                          %}
{%- endmacro                                                          %}

{#- jcell_ru_ref returns RU reference linked from a cell.
    if the cell embeds RU definition, its reference comes as `_<cell_ref>_ru`. #}
{%- macro jcell_ru_ref(icell)                                         %}
{{-   _jcell_ru_ref(icell, [])                                        }}
{%- endmacro                                                          %}
{%- macro _jcell_ru_ref(icell, seen)                                  %}
{%-   set cell_ref = J(jref_of_shared(icell))                         %}
{%-   if cell_ref in seen                                             %}
{%-     for x in seen                                                 %}
{%-       do error(x, "%s form a cycle via RU references" % seen)     %}
{%-     endfor                                                        %}
{#-     XXX what to return ?                                          #}
{%-   else                                                            %}
{%-     do seen.append(cell_ref)                                      %}
{%-     set ru = icell['_']['ru']                                     %}
{%-     if ru.ru_type == 'ru_ref'                                     %}
{{-       ru.ru_ref | tojson                                          }}
{%-     elif ru.ru_type == 'ruincell_ref'                             %}
{#-       XXX first check referred cell exist ? #}
{{-       _jcell_ru_ref(icell_dict[ru.ruincell_ref], seen)            }}
{%-     else                                                          %}
{#-       ru definition is embedded into cell                         #}
{{-       ('_%s_ru' % J(jref_of_shared(icell))) | tojson              }}
{%-     endif                                                         %}
{%-   endif                                                           %}
{%- endmacro %}

{#- jref_of_shared returns original reference used to request shared instance.
    it is extracted from slave_reference which is composed as <partition_id>_<reference>. #}
{%- macro jref_of_shared(ishared) %}
{#- do  print('jref_of_shared %r' % (ishared,)) #}
{%-   set ref = ishared['slave_reference']                                  %}
{%-   set partition_id = slap_configuration['slap-computer-partition-id']   %}
{%-   if ref.startswith(partition_id)                                       %}
{%-     set ref = ref[len(partition_id):]                                   %}
{%-   endif                                                                 %}
{%-   if ref.startswith('_')                                                %}
{%-     set ref = ref[1:]                                                   %}
{%-   endif                                                                 %}
{{-   ref | tojson                                                          }}
{%- endmacro                                                                %}


{#- ipeer_dict keeps peer shared instances:  reference -> ipeer

    use load_ipeer to initialize this peer registry.
#}
{%- set ipeer_dict = {}     %}
{%- macro load_ipeer()      %}
// XXX TODO
{%- endmacro                %}


{#- iue_dict keeps ue shared instance:  reference -> iue

    use load_iue to initialize this ue registry.
#}
{%- set iue_dict = {}                               %}
{%- macro load_iue()                                %}
{%-   set qother = []                               %}
{%-   for ishared in qshared_instance_list          %}
{%-     set ref = J(jref_of_shared(ishared))        %}
{%-     set _ = ishared['_']                        %}
{%-     if   'ue_type'   in _                       %}
{%-       set iue = ishared                         %}
{#- XXX verify ue.ue_type in lte|nr  #}
{%-       for k, v in defaults['ue'].items()        %}
{%-         do _.setdefault(k, v)                   %}
{%-       endfor                                    %}
{%-       do iue_dict.update({ref: iue})            %}
{%-     else                                        %}
{%-       do qother.append(ishared)                 %}
{%-     endif                                       %}
{%-   endfor                                        %}
{%-   do qshared_instance_list.clear()              %}
{%-   do qshared_instance_list.extend(qother)       %}
{%- endmacro                                        %}



{# ---- XXX ---- #}

{#- ru_config emits RF driver configuration for specified Radio Units. #}
{%- macro ru_config(iru_dict, slapparameter_dict) %}
  // Radio Units
  rf_driver: {
  {%- if slapparameter_dict.get('disable_sdr', False) %}
      name: "dummy",
  {%- else %}
      name: "sdr",
  {%- endif %}
  {%- if slapparameter_dict.get('gps_sync', False) %}
      sync: "gps",
  {%- endif %}

  {#- XXX emit big warning if both cpri and sdr are present
        to protect users from unclear eNB failues
        see https://support.amarisoft.com/issues/26021 for details

    XXX belowe we continue as if sdr and cpri are both supported by enb simultaneously #}

  {%- set dev_argv = []                                                       %}
  {%- set ru_sdr_dict = {}  %}  {#- dev -> ru  for ru with ru_type = sdr      #}
  {%- set ru_cpri_dict = {} %}  {#- dev -> ru  for ru with link_kind = cpri   #}
  {%- set tx_gainv = [] %}      {#- tx_gain by tx channel                     #}
  {%- set rx_gainv = [] %}      {#- rx_gain by tx channel                     #}
  {%- for rf_port, (ru_ref, iru) in enumerate(iru_dict|dictsort)              %}
  {%-   set ru = iru['_']                                                     %}
      // {{ ru_ref }} {{ ru.n_antenna_dl }}T{{ ru.n_antenna_ul }}R
  {%-   do ru.update({'_rf_port': rf_port})                                   %}
  {%-   if ru.ru_type == 'sdr'                                                %}
  {%-     do ru_sdr_dict.update({len(dev_argv): ru})                          %}
      {#- XXX move to ru/sdr ?  #}
  {%-     for n in ru.sdr_dev_list                                            %}
  {%-       do dev_argv.append("dev%d=/dev/sdr%d" % (len(dev_argv), n))       %}
  {%-     endfor                                                              %}
  {%-   elif ru.ru_link_type == 'cpri'                                        %}
  {%-     do ru_cpri_dict.update({len(dev_argv): ru})                         %}
  {%-     set link = ru.cpri_link                                             %}
  {#-     set cpri_link parameters to default         #}
  {%-     for k, v in defaults['cpri_link'].items()   %}
  {%-       do link.setdefault(k, v)                  %}
  {%-     endfor                                      %}
  {%-     do dev_argv.append("dev%d=/dev/sdr%d@%d" % (len(dev_argv), link.sdr_dev, link.sfp_port))   %}
  {%-   else        %}
  {%-     do bug('unreachable')                                 %}
  {%-   endif                                                   %}
  {%-   do tx_gainv.extend([ru.tx_gain]*ru.n_antenna_dl)        %}
  {%-   do rx_gainv.extend([ru.rx_gain]*ru.n_antenna_ul)        %}
  {%- endfor %}
      args: "{{dev_argv | join(',')}}",

  {#- emit sdr-related options if an sdr ru is present #}
  {%- if len(ru_sdr_dict) > 0               %}
      rx_antenna:"tx_rx",   {#- XXX -> ru/sdr ? #}
      tdd_tx_mod: 1,
  {%- endif                                 %}

  {#- emit cpri_* optins if a cpri ru is present #}
  {#- NOTE values for non-cpri links come as empty   XXX recheck this is ok #}
  {%- if len(ru_cpri_dict) > 0              %}
  {%-   set vcpri = [None]*len(dev_argv)    %}
  {%-   for dev, ru in ru_cpri_dict|dictsort  %}
  {%-     do vcpri.__setitem__(dev, ru.cpri_link)       %}
  {%-   endfor                                %}
        cpri_mapping:  "{{ vcpri | map(attribute='mapping')  | map('default', '') | join(',') }}",
        cpri_mult:     "{{ vcpri | map(attribute='mult')     | map('default', '') | join(',') }}",
        cpri_rx_delay: "{{ vcpri | map(attribute='rx_delay') | map('default', '') | join(',') }}",
        cpri_tx_delay: "{{ vcpri | map(attribute='tx_delay') | map('default', '') | join(',') }}",
        cpri_tx_dbm:   "{{ vcpri | map(attribute='tx_dbm')   | map('default', '') | join(',') }}",
  {%-   set tap_base = slap_configuration.get('tap-name', '')   %}
  {%-   set vtap = ['']*len(dev_argv)                           %}
  {%-   for i, (dev, _) in enumerate(ru_cpri_dict|dictsort)     %}
  {%-     if len(ru_cpri_dict) > 1                              %}
  {%-       set tap = "%s-%d" % (tap_base, i)                   %}
  {%-     else                                                  %}
  {%-       set tap = tap_base                                  %}
  {%-     endif                                                 %}
  {%-     do vtap.__setitem__(dev, tap)                         %}
  {%-   endfor                                                  %}
        ifname:        "{{ vtap | join(',') }}",
  {%- endif                                                     %}
  },

  {#- emit tx/rx gain for all channels #}
  tx_gain: {{ tx_gainv }},
  rx_gain: {{ rx_gainv }},
{%- endmacro  %}


{#- XXX -> nr ? #}
{%- macro default_ssb_nr_arfcn(dl_nr_arfcn) %}
{#- NOTE: rechecked computations wrt https://tech-academy.amarisoft.com/OutOfBox_UEsim_SA.html#Tips_SSB_Frequency #}
{%-   set f = nr.get_frequency(nrarfcn=dl_nr_arfcn)  %}
{%-   set gscn = nr.get_gscn_by_frequency(f)    %}
{%-   if nr.get_frequency_by_gscn(gscn) > f     %}{# nrarfcn rounds up, amari down #}
{%-     set gscn = gscn - 1                     %}
{%-   endif                                     %}
{%-   set fg = nr.get_frequency_by_gscn(gscn)   %}
{%-   set fg_arfcn = nr.get_nrarfcn(fg)         %}
{{- fg_arfcn }}
{%- endmacro %}

{#- cell_tdd_config returns tdd_config for an LTE cell. #}
{%- macro cell_tdd_config(cell) %}
{%-   set _ = {'[Configuration 2] 5ms 2UL 6DL (default)':        2,
               '[Configuration 6] 5ms 5UL 3DL (maximum uplink)': 6} %}
{{-   _[cell.tdd_ul_dl_config] }}
{%- endmacro -%}

{#- XXX doc, naming ok ?  #}
{%- macro nr_cell_tdd_config(cell) %}
{%-   set _ = {'5ms 2UL 7DL 4/6 (default)':         1,
               '2.5ms 1UL 3DL 2/10':                2,
               '5ms 8UL 3DL 2/10 (maximum uplink)': 3}  %}
{{-   _[cell.tdd_ul_dl_config] }}
{%- endmacro -%}

{#- cell_n_rb_dl returns n_rb_dl for an LTE cell. #}
{%- macro cell_n_rb_dl(cell) %}
{%-   set _ = {'1.4 MHz':  6,
               '3 MHz':   15,
               '5 MHz':   25,
               '10 MHz':  50,
               '15 MHz':  75,
               '20 MHz': 100}   %}
{{-   _[cell.bandwidth] }}
{%- endmacro -%}


{#- cell_drb_config returns drb_config section for an LTE cell.
    DRB configuration varies in beteen FDD and TDD modes. #}
{%- macro cell_drb_config(cell) %}
{%-   if cell.rf_mode == 'tdd' %}
{%-     set T_REORDERING = 65 %}
{%-   else %}
{%-     set T_REORDERING = 35 %}
{%-   endif %}
  [
  {
    qci: 1,
    ims_dedicated_bearer: true,
    pdcp_config: {
      discardTimer: 100,
      pdcp_SN_Size: 7,


    },
    nr_pdcp_config: {
      discardTimer: 0,
      pdcp_SN_SizeUL: 12,
      pdcp_SN_SizeDL: 12,
      statusReportRequired: false,
      outOfOrderDelivery: false,


      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_um: {
        sn_FieldLength: 5,
      },
      dl_um: {
        sn_FieldLength: 5,
        t_Reordering: {{ T_REORDERING }},
      },
    },
    logical_channel_config: {

      priority: 7,
      prioritisedBitRate: 0,
      bucketSizeDuration: 100,
      logicalChannelGroup: 1,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  {
    qci: 2,
    ims_dedicated_bearer: true,
    pdcp_config: {
      discardTimer: 150,
      pdcp_SN_Size: 12,
    },
    nr_pdcp_config: {
      discardTimer: 150,
      pdcp_SN_SizeUL: 18,
      pdcp_SN_SizeDL: 18,
      statusReportRequired: false,
      outOfOrderDelivery: false,
      t_Reordering: 0,
      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_um: {
        sn_FieldLength: 10,
      },
      dl_um: {
        sn_FieldLength: 10,
        t_Reordering: {{ T_REORDERING }},
      },
    },
    logical_channel_config: {
      priority: 9,
      prioritisedBitRate: 0,
      bucketSizeDuration: 100,
      logicalChannelGroup: 1,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  {
    qci: 3,
    pdcp_config: {
      discardTimer: 100,
      pdcp_SN_Size: 12,
    },
    nr_pdcp_config: {
      discardTimer: 100,
      pdcp_SN_SizeUL: 18,
      pdcp_SN_SizeDL: 18,
      statusReportRequired: false,
      outOfOrderDelivery: false,
      t_Reordering: 0,
      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_um: {
        sn_FieldLength: 10,
      },
      dl_um: {
        sn_FieldLength: 10,
        t_Reordering: {{ T_REORDERING }},
      },
    },
    logical_channel_config: {
      priority: 8,
      prioritisedBitRate: 0,
      bucketSizeDuration: 100,
      logicalChannelGroup: 1,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  {
    qci: 4,
    pdcp_config: {
      discardTimer: 0,
      statusReportRequired: true,
    },
    nr_pdcp_config: {
      discardTimer: 0,
      pdcp_SN_SizeUL: 18,
      pdcp_SN_SizeDL: 18,
      statusReportRequired: true,
      outOfOrderDelivery: false,
      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_am: {
        t_PollRetransmit: 80,
        pollPDU: 64,
        pollByte: 125,
        maxRetxThreshold: 32,
      },
      dl_am: {
        t_Reordering: {{ T_REORDERING }},
        t_StatusProhibit: 10,
      },
    },
    logical_channel_config: {
      priority: 10,
      prioritisedBitRate: 8,
      bucketSizeDuration: 100,
      logicalChannelGroup: 1,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  {
    qci: 65,
    ims_dedicated_bearer: true,
    pdcp_config: {
      discardTimer: 100,
      pdcp_SN_Size: 7,


    },
    nr_pdcp_config: {
      discardTimer: 100,
      pdcp_SN_SizeUL: 12,
      pdcp_SN_SizeDL: 12,
      statusReportRequired: false,
      outOfOrderDelivery: false,
      t_Reordering: 0,


      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_um: {
        sn_FieldLength: 5,
      },
      dl_um: {
        sn_FieldLength: 5,
        t_Reordering: {{ T_REORDERING }},
      },
    },
    logical_channel_config: {

      priority: 5,
      prioritisedBitRate: 0,
      bucketSizeDuration: 100,
      logicalChannelGroup: 1,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  {
    qci: 66,
    ims_dedicated_bearer: true,
    pdcp_config: {
      discardTimer: 150,
      pdcp_SN_Size: 12,
    },
    nr_pdcp_config: {
      discardTimer: 150,
      pdcp_SN_SizeUL: 18,
      pdcp_SN_SizeDL: 18,
      statusReportRequired: false,
      outOfOrderDelivery: false,
      t_Reordering: 0,
      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_um: {
        sn_FieldLength: 10,
      },
      dl_um: {
        sn_FieldLength: 10,
        t_Reordering: {{ T_REORDERING }},
      },
    },
    logical_channel_config: {

      priority: 7,
      prioritisedBitRate: 0,
      bucketSizeDuration: 100,
      logicalChannelGroup: 1,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  {
    qci: 67,
    ims_dedicated_bearer: true,
    pdcp_config: {
      discardTimer: 100,
      pdcp_SN_Size: 12,
    },
    nr_pdcp_config: {
      discardTimer: 100,
      pdcp_SN_SizeUL: 18,
      pdcp_SN_SizeDL: 18,
      statusReportRequired: false,
      outOfOrderDelivery: false,
      t_Reordering: 0,
      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_um: {
        sn_FieldLength: 10,
      },
      dl_um: {
        sn_FieldLength: 10,
        t_Reordering: {{ T_REORDERING }},
      },
    },
    logical_channel_config: {
      priority: 6,
      prioritisedBitRate: 0,
      bucketSizeDuration: 100,
      logicalChannelGroup: 1,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },

  {
    qci: 5,
    pdcp_config: {
      discardTimer: 0,
      statusReportRequired: true,
    },
    nr_pdcp_config: {
      discardTimer: 0,
      pdcp_SN_SizeUL: 18,
      pdcp_SN_SizeDL: 18,
      statusReportRequired: true,
      outOfOrderDelivery: false,
      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_am: {
        t_PollRetransmit: 80,
        pollPDU: 64,
        pollByte: 125,
        maxRetxThreshold: 32,
      },
      dl_am: {
        t_Reordering: {{ T_REORDERING }},
        t_StatusProhibit: 10,
      },
    },
    logical_channel_config: {
      priority: 6,
      prioritisedBitRate: 8,
      bucketSizeDuration: 100,
      logicalChannelGroup: 1,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  {
    qci: 6,
    pdcp_config: {
      discardTimer: 0,
      statusReportRequired: true,
    },
    nr_pdcp_config: {
      discardTimer: 0,
      pdcp_SN_SizeUL: 18,
      pdcp_SN_SizeDL: 18,
      statusReportRequired: true,
      outOfOrderDelivery: false,
      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_am: {
        t_PollRetransmit: 80,
        pollPDU: 64,
        pollByte: 125,
        maxRetxThreshold: 32,
      },
      dl_am: {
        t_Reordering: {{ T_REORDERING }},
        t_StatusProhibit: 10,
      },
    },
    logical_channel_config: {
      priority: 12,
      prioritisedBitRate: 8,
      bucketSizeDuration: 100,
      logicalChannelGroup: 2,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  {
    qci: 7,
    pdcp_config: {
      discardTimer: 100,
      pdcp_SN_Size: 12,
    },
    nr_pdcp_config: {
      discardTimer: 100,
      pdcp_SN_SizeUL: 18,
      pdcp_SN_SizeDL: 18,
      statusReportRequired: false,
      outOfOrderDelivery: false,
      t_Reordering: 0,
      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_um: {
        sn_FieldLength: 10,
      },
      dl_um: {
        sn_FieldLength: 10,
        t_Reordering: {{ T_REORDERING }},
      },
    },
    logical_channel_config: {
      priority: 13,
      prioritisedBitRate: 0,
      bucketSizeDuration: 100,
      logicalChannelGroup: 2,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  {
    qci: 8,
    pdcp_config: {
      discardTimer: 0,
      statusReportRequired: true,
    },
    nr_pdcp_config: {
      discardTimer: 0,
      pdcp_SN_SizeUL: 18,
      pdcp_SN_SizeDL: 18,
      statusReportRequired: true,
      outOfOrderDelivery: false,
      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_am: {
        t_PollRetransmit: 80,
        pollPDU: 64,
        pollByte: 125,
        maxRetxThreshold: 32,
      },
      dl_am: {
        t_Reordering: {{ T_REORDERING }},
        t_StatusProhibit: 10,
      },
    },
    logical_channel_config: {
      priority: 14,
      prioritisedBitRate: 8,
      bucketSizeDuration: 100,
      logicalChannelGroup: 2,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  {
    qci: 9,
    pdcp_config: {
      discardTimer: 0,
      statusReportRequired: true,
    },
    nr_pdcp_config: {
      discardTimer: 0,
      pdcp_SN_SizeUL: 18,
      pdcp_SN_SizeDL: 18,
      statusReportRequired: true,
      outOfOrderDelivery: false,
    },
    en_dc_split: {
      type: "scg",
      ul_data_threshold: 0
    },
    rlc_config: {
      ul_am: {
        t_PollRetransmit: 80,
        pollPDU: 64,
        pollByte: 125,
        maxRetxThreshold: 32,
      },
      dl_am: {
        t_Reordering: {{ T_REORDERING }},
        t_StatusProhibit: 10,
      },
    },
    logical_channel_config: {
      priority: 15,
      prioritisedBitRate: 8,
      bucketSizeDuration: 100,
      logicalChannelGroup: 3,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  {
    qci: 69,
    pdcp_config: {
      discardTimer: 0,
      statusReportRequired: true,
    },
    nr_pdcp_config: {
      discardTimer: 0,
      pdcp_SN_SizeUL: 18,
      pdcp_SN_SizeDL: 18,
      statusReportRequired: true,
      outOfOrderDelivery: false,
      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_am: {
        t_PollRetransmit: 80,
        pollPDU: 64,
        pollByte: 125,
        maxRetxThreshold: 32,
      },
      dl_am: {
        t_Reordering: {{ T_REORDERING }},
        t_StatusProhibit: 10,
      },
    },
    logical_channel_config: {
      priority: 4,
      prioritisedBitRate: 8,
      bucketSizeDuration: 100,
      logicalChannelGroup: 1,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  {
    qci: 70,
    pdcp_config: {
      discardTimer: 0,
      statusReportRequired: true,
    },
    nr_pdcp_config: {
      discardTimer: 0,
      pdcp_SN_SizeUL: 18,
      pdcp_SN_SizeDL: 18,
      statusReportRequired: true,
      outOfOrderDelivery: false,
      restrict_to_ng_enb: true,
    },
    rlc_config: {
      ul_am: {
        t_PollRetransmit: 80,
        pollPDU: 64,
        pollByte: 125,
        maxRetxThreshold: 32,
      },
      dl_am: {
        t_Reordering: {{ T_REORDERING }},
        t_StatusProhibit: 10,
      },
    },
    logical_channel_config: {
      priority: 11,
      prioritisedBitRate: 8,
      bucketSizeDuration: 100,
      logicalChannelGroup: 2,
      logicalChannelSR_Mask: false,
      logicalChannelSR_Prohibit: false,
    },
  },
  ]
{%- endmacro %}
