{% set publish_dict = {} -%}
{% set part_list = [] -%}
{% set ipv6 = (ipv6_set | list)[0] -%}
{% set ipv4 = (ipv4_set | list)[0] -%}
{% set cluster_definition_dict = {} -%}

[directory]
recipe = slapos.cookbook:mkdirectory
home = ${buildout:directory}
etc = ${:home}/etc
var = ${:home}/var
run = ${:var}/run
scripts = ${:etc}/run
service = ${:etc}/service
promise = ${:etc}/promise
log = ${:var}/log
nginx-prefix = ${:var}/nginx
tmp = ${:home}/tmp
ssl = ${:etc}/ssl
dssl = ${:etc}/ssl-downloaded
assets = ${:srv}/sozu/assets

[createfile]
recipe = slapos.recipe.template:jinja2
inline =
  {{ '{{ content }}' }}

{% macro createfile(section_name, file_path, content, mode='') -%}
[{{  section_name }}]
< = createfile
output = {{ file_path }}
context = key content :content
mode = {{ mode }}
content = {{ dumps(content) }}
{%- endmacro %}

[ca-certificate-base]
<= certificate-authority
recipe = slapos.cookbook:certificate_authority.request
key-file = ${ca-directory:certs}/${:name}.crt
cert-file = ${ca-directory:certs}/${:name}.key
ca-file = ${ca-directory:root}/cacert.pem
executable = echo "request certificate"
wrapper = ${directory:tmp}/ca-${:name}
name = ${:cn}

[cluster-frontend-port]
recipe = slapos.cookbook:free_port
minimum = 7091
maximum = 9190
ip = {{ ipv6 }}

{% set port_base = 7090 -%}
{% for slave_dict in slave_instance_list %}
{% set instance_dict = json_module.loads(slave_dict['_']) -%}
{% set name = slave_dict['slave_reference'] -%}
{% set slave_title = slave_dict['slave_title'] -%}
{% set cert_section_name = '${' ~ name ~ '-ssl:cert-file}' -%}
{% set key_section_name = '${' ~ name ~ '-ssl:key-file}' -%}
{% set port_base = port_base + 20 -%}

{%  for frontend_name, frontend_dict in instance_dict['frontend-dict'].items() %}
{% set frontend_port = port_base + 1 -%}
[{{ "%s-%s-port" | format(name, frontend_name) }}]
<= cluster-frontend-port
minimum= {{ frontend_port }}

[{{ "slave-%s-%s-check-port-promise" | format(name, frontend_name) }}]
<= monitor-promise-base
promise = check_socket_listening
name = sozu-slave1-port-listening.py
config-port = {{ "${%s-%s-port:port}" | format(name, frontend_name) }}
config-host = ${sozu-parameters:ipv6}

{% do part_list.append("slave-" ~ name ~ "-" ~ frontend_name ~ "-check-port-promise") -%}

# XXX - possible to have more than one frontend config for {{ name }}
[{{ name }}-ssl]
<= ca-certificate-base
name = {{ name }}
cn = {{ instance_dict['frontend-dict'][frontend_name].get('hostname', frontend_name) }}

[{{ name }}-chain]
recipe = plone.recipe.command
chain-file = ${ca-directory:certs}/{{ name }}-chain.crt
command =
  if [ -s {{ "${%s-ssl:cert-file}" | format(name) }} ]; then
    cat {{ "${%s-ssl:cert-file}" | format(name) }} {{ "${%s-ssl:ca-file}" | format(name) }} > ${:chain-file}
  fi
update-command = ${:command}

{%    do instance_dict['frontend-dict'][frontend_name].__setitem__("address", "[%s]:${%s-%s-port:port}" | format(ipv6, name, frontend_name)) -%}
{%    if frontend_dict.get('deploy-certificate') -%}
{%      do instance_dict['frontend-dict'][frontend_name].__setitem__("certificate", "${%s-ssl:cert-file}" | format(name)) -%}
{%      do instance_dict['frontend-dict'][frontend_name].__setitem__('key', "${%s-ssl:key-file}" | format(name)) -%}
{%      do instance_dict['frontend-dict'][frontend_name].__setitem__('certificate-chain', "${%s-chain:chain-file}" | format(name)) -%}

{%    elif frontend_dict.get('certificate') and frontend_dict.get('key') -%}
{{ createfile("%s-%s-crt" | format(name, frontend_name), "${directory:dssl}/" ~ name ~ frontend_name ~ ".crt", frontend_dict['certificate']) }}
{{ createfile("%s-%s-key" | format(name, frontend_name), "${directory:dssl}/" ~ name ~ frontend_name ~ ".key", frontend_dict['key']) }}
{%      if frontend_dict.get('certificate-chain') -%}
{{        createfile("%s-%s-chain" | format(name, frontend_name), "${directory:dssl}/" ~ name ~ frontend_name ~ "-chain.crt", frontend_dict['certificate-chain']) }}
{%        do instance_dict['frontend-dict'][frontend_name].__setitem__('certificate-chain', "${%s-%s-chain:output}" | format(name, frontend_name)) -%}
{%      endif -%}
{%      do instance_dict['frontend-dict'][frontend_name].__setitem__('certificate', "${%s-%s-crt:output}" | format(name, frontend_name)) -%}
{%      do instance_dict['frontend-dict'][frontend_name].__setitem__('key', "${%s-%s-key:output}" | format(name, frontend_name)) -%}
{%    endif -%}
{%  endfor -%}
{%  do cluster_definition_dict.__setitem__(name, instance_dict) -%}
{% endfor -%}

[sozu-parameters]
#warn, info, debug, trace
log-level = debug
log-file = ${directory:log}/sozu.log
state-file = ${directory:etc}/sozu-state.json
access-log-file = ${directory:log}/sozu-access.log
socket-file = ${directory:run}/sozu.sock
404-html = {{ response_404_html }}
503-html = {{ response_503_html }}
buffer-size = 16393
cmd-buffer-size = 1048576
max-cmd-buffer-size = 2097152
worker-count = 2
max-connections = 500
# wait for a command to complete timeout
ctl-timeout = 1000
pid-file = ${directory:run}/sozu.pid
# maximum time (seconds) of inactivity for a frontend socket
front-timeout = 60
# maximum time of inactivity for a backend socket, in seconds
back-timeout = 30
# maximum time to connect to a backend server, in seconds
connect-timeout = 3
# maximum time to receive a request since the connection started
request-timeout = 10
ipv4 = {{ ipv4 }}
ipv6 = {{ ipv6 }}
port = 8090
https-port = 4453
cert-file = ${ca-directory:certs}/sozu-cert.crt
key-file = ${ca-directory:certs}/sozu.key
cert-chain-file = ${ca-directory:root}/sozu-chain.crt

[sozu-config.toml]
recipe = slapos.recipe.template:jinja2
url = {{ config_toml_in }}
extensions = jinja2.ext.do
output = ${directory:etc}/config.toml
context =
  section parameter_dict              sozu-parameters
  section cluster_definition_dict     sozu-slave-information

[sozu-bin]
recipe = slapos.cookbook:wrapper
command-line =
  {{ sozu_bin }} -c ${sozu-config.toml:output}
wrapper-path = ${directory:bin}/sozu

[sozu-wrapper]
recipe = slapos.cookbook:wrapper
command-line = ${sozu-bin:wrapper-path} start
wrapper-path = ${directory:bin}/sozu-start

[ca-sozu-wrapper]
<= certificate-authority
recipe = slapos.cookbook:certificate_authority.request
key-file = ${sozu-parameters:key-file}
cert-file = ${sozu-parameters:cert-file}
ca-file = ${ca-directory:root}/cacert.pem
executable = ${sozu-wrapper:wrapper-path}
wrapper = ${directory:bin}/ca-sozu

[sozu-ssl-chain]
recipe = plone.recipe.command
chain-file = ${ca-directory:certs}/sozu-chain.crt
command =
  if [ -s ${ca-sozu-wrapper:cert-file} ]; then
    cat ${ca-sozu-wrapper:cert-file} ${ca-sozu-wrapper:ca-file} > ${:chain-file}
  fi
update-command = ${:command}

[sozu-service]
recipe = slapos.cookbook:wrapper
command-line = ${ca-sozu-wrapper:wrapper}
wrapper-path = ${directory:services}/sozu
hash-existing-files = ${buildout:directory}/software_release/buildout.cfg
hash-files = ${sozu-config.toml:output}
url = http://[${sozu-parameters:ipv6}]:${sozu-parameters:port}
https-url = https://[${sozu-parameters:ipv6}]:${sozu-parameters:https-port}
wait-for-files =
  ${ca-directory:certs}/sozu-cert.crt
  ${sozu-ssl-chain:chain-file}

[sozu-https-promise]
<= monitor-promise-base
promise = check_socket_listening
name = sozu-https-backend-port-listening.py
config-port = ${sozu-parameters:https-port}
config-host = ${sozu-parameters:ipv6}

[sozu-http-promise]
<= monitor-promise-base
promise = check_socket_listening
name = sozu-http-backend-port-listening.py
config-port = ${sozu-parameters:port}
config-host = ${sozu-parameters:ipv6}

[sozu-frontend]
<= slap-connection
recipe = slapos.cookbook:requestoptional
name = Sozu Frontend
# XXX We have hardcoded SR URL here.
software-url = http://git.erp5.org/gitweb/slapos.git/blob_plain/HEAD:/software/apache-frontend/software.cfg
shared = true
config-url = ${sozu-service:url}
config-https-url = ${sozu-service:https-url}
config-https-only = true
return = domain secure_access

[sozu-frontend-promise]
<= monitor-promise-base
promise = check_url_available
name = check_sozu_secure_frontend.py
config-url = ${sozu-frontend:connection-secure_access}

[sozu-http-frontend-promise]
<= monitor-promise-base
promise = check_url_available
name = check_sozu_frontend.py
config-url = http://${sozu-frontend:connection-domain}

[publish-connection-information]
<= monitor-publish
recipe = slapos.cookbook:publish
backend-url = ${sozu-service:url}
url = ${sozu-frontend:connection-secure_access}

[sozu-publish-slave-information]
recipe = slapos.cookbook:switch-softwaretype
default = dynamic-sozu-publish-slave-information:output
RootSoftwareInstance = ${:default}

[dynamic-sozu-publish-slave-information]
recipe = slapos.recipe.template:jinja2
output = ${buildout:directory}/sozu-publish-slave-information.cfg
extensions = jinja2.ext.do
url = {{ template_publish_slave }}
context =
    import json_module          json
    raw eggs_directory          {{ eggs_directory }}
    raw develop_eggs_directory  {{ develop_eggs_directory }}
    raw ipv6                    {{ ipv6 }}
    raw ipv4                    {{ ipv4 }}
    section slave_dict          sozu-slave-information

[sozu-slave-information]
{% for name, cluster_dict in cluster_definition_dict.items() -%}
{{ name }} = !py!{{ cluster_dict }}
{% endfor -%}

[buildout]
extends = {{ template_monitor }}

parts =
  sozu-https-promise
  sozu-http-promise
  sozu-frontend-promise
  sozu-http-frontend-promise
  sozu-service
  publish-connection-information
  sozu-publish-slave-information

# Complete parts with sections
  {{ part_list | join('\n  ') }}

eggs-directory = {{ eggs_directory }}
develop-eggs-directory = {{ develop_eggs_directory }}
offline = true
