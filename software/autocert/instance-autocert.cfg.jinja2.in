{% set folder_list = [] -%}
{% set part_list = [] -%}
{% set domain_list = [] -%}

[httpd-wrapper]
recipe = slapos.cookbook:simplehttpserver
host = {{ (ipv6 | list)[0] }}
port = 9086
base-path = ${directory:www}
wrapper = ${directory:services}/http-server
log-file = ${directory:log}/httpd.log
use-hash-url = false
url = http://[${:host}]:${:port}

[logrotate-entry-httpd]
<= logrotate-entry-base
name = http-server
log = ${httpd-wrapper:log-file}

[httpd-url-promise]
<= monitor-promise-base
promise = check_url_available
name = httpd_url.py
config-url = ${httpd-wrapper:url}

[httpd-listen-promise]
<= monitor-promise-base
promise = check_socket_listening
name = httpd-listen.py
config-host = ${httpd-wrapper:host}
config-port = ${httpd-wrapper:port}

[dehydrated-webroot]
recipe = plone.recipe.command
path = ${directory:srv}/dehydrated
command =
  rm -rf ${:path}
  ln -sf ${directory:acme} ${:path}

[dehydrated-config-parameters]
acme-dir = ${dehydrated-webroot:path}
openssl-bin = {{ openssl_bin }}
base-dir = ${directory:dehydrated}
registration-email = {{ slapparameter_dict.get('registration-email', '') }}

[dehydrated-config]
recipe = slapos.recipe.template:jinja2
url = {{ parameter_dict['template-config'] }}
output = ${directory:dehydrated}/config
context =
  section parameter_dict dehydrated-config-parameters

[dehydrated-register]
recipe = slapos.cookbook:wrapper
command-line =
  ${dehydrated-wrapper:wrapper-path}
  --register --accept-terms
wrapper-path = ${directory:scripts}/dehydrated-register

[cron-entry-dehydrated]
<= cron
recipe = slapos.cookbook:cron.d
name = dehydrated-renew
frequency = 0 0 * * 0
command = {{ linux_util_location }}/bin/flock ${directory:dehydrated}/lock ${dehydrated-wrapper:wrapper-path} --cron --keep-going --no-lock

[dehydrated-signcert]
<= base-wrapper
command-line = ${cron-entry-dehydrated:command}
wrapper-path = ${directory:scripts}/dehydrated-signcert
depends =
  ${dehydrated-domains.txt:recipe}

[dehydrated-wrapper]
<= base-wrapper
command-line =
  {{ parameter_dict['dehydrated-location'] }}/dehydrated
  --config ${dehydrated-config:output}
wrapper-path = ${directory:bin}/dehydrated

[caucase-updater]
recipe = slapos.cookbook:wrapper
command-line =
  {{ buildout_bin_directory }}/caucase-updater
  --ca-url "${instance-parameter:kedifa-caucase-url}"
  --cas-ca ${directory:caucase}/cas.crt.pem
  --ca ${:ca-path}
  --crl ${:crl-path}
wrapper-path = ${directory:services}/caucase-updater
crl-path = ${directory:caucase}/crl.pem
ca-path = ${directory:caucase}/ca.crt.pem

[base-wrapper]
recipe = slapos.cookbook:wrapper
environment =
  PATH={{ openssl_location }}/bin:{{ curl_location }}/bin:/usr/local/bin:/usr/bin:/bin

{% for _, domain_dict in slapparameter_dict.get("kedifa-domain-dict", {}).items() %}
{%   set domain = domain_dict['domain-list'][0] -%}
{%   set kedifa_id = domain_dict['kedifa-id'] -%}
{%   do folder_list.append(domain) -%}
{%   do domain_list.append(' '.join(domain_dict['domain-list'])) -%}

[kedifa-generate-auth-{{ domain }}]
<= base-wrapper
command-line =
  {{ parameter_dict['kedifa-location'] }}/contrib/shell/kedifa_generateauth
  ${instance-parameter:kedifa-url}/{{ kedifa_id }}/generateauth
  ${caucase-updater:ca-path}
  ${caucase-updater:crl-path} {{ domain }}
  ${directory:kedifa}
wait-for-files =
  ${caucase-updater:crl-path}
wrapper-path = ${directory:scripts}/kedifa-genauth-{{ domain.replace('\.', '-') }}

[kedifa-upload-{{ domain }}]
<= base-wrapper
command-line =
  {{ parameter_dict['kedifa-location'] }}/contrib/shell/kedifa_update_cert
     ${directory:kedifa}/{{ domain }}.sh
     ${directory:dehydrated}/certs/{{ domain }}/privkey.pem
     ${directory:dehydrated}/certs/{{ domain }}/fullchain.pem
wrapper-path = ${directory:bin}/kedifa-upload-{{ domain.replace('\.', '-') }}
depends =
  {{ "${kedifa-generate-auth-" ~ domain ~ ":recipe}" }}
  {{ "${promise-" ~ domain ~ ":recipe}" }}

[cron-entry-{{ domain }}]
<= cron
recipe = slapos.cookbook:cron.d
name = upload-{{ domain }}
frequency = 0 0 * * 0
command = {{ "${kedifa-upload-" ~ domain ~ ":wrapper-path}" }}

[promise-{{ domain }}]
recipe = slapos.recipe.template:jinja2
inline =
  #!{{ bash_bin }}
  set -e
  CERT=${directory:dehydrated}/certs/{{ domain }}/fullchain.pem
  KEY=${directory:dehydrated}/certs/{{ domain }}/privkey.pem
  export PATH={{ openssl_location }}/bin:$PATH
  if [ ! -s "$CERT" ]; then
    echo "Certificate for {{ domain }} doesn't exists!"
    exit 1
  fi
  certsum=$(openssl x509 -in $CERT -pubkey -noout -outform pem | sha256sum)
  keysum=$(openssl pkey -in $KEY -pubout -outform pem | sha256sum)
  if [ "$certsum" != "$keysum" ]; then
    echo "Certificate and key did not match"
    exit 2
  fi
  # Check if certificate will expire in 10 days
  let datethreshold=60*60*24*10
  openssl x509 -checkend $datethreshold -noout -in $CERT > /dev/null || RET=1
  if [ $RET -ne 0 ]; then
    ENDDATE=$(openssl x509 -enddate -noout -in $CERT | cut -d= -f 2)
    echo "Certificate for {{ domain }} will expire in less than 10 days. Expiration date: $ENDDATE"
    exit 3
  fi
output = ${directory:promise}/check-certificate-{{ domain }}
mode = 755

{% do part_list.append("cron-entry-" ~ domain) -%}
{% endfor %}

[dehydrated-domains.txt]
recipe = slapos.recipe.template
inline =
  {{ '\n  '.join(domain_list) }}
output = ${directory:dehydrated}/domains.txt

[instance-parameter]
kedifa-caucase-url = {{ slapparameter_dict['kedifa-caucase-url'] }}
kedifa-url = {{ slapparameter_dict['kedifa-base-url'] }}

[publish-connection-information]
<= monitor-publish
recipe = slapos.cookbook:publish
url = ${httpd-wrapper:url}

[directory]
recipe = slapos.cookbook:mkdirectory
etc = ${buildout:directory}/etc
bin = ${buildout:directory}/bin
srv = ${buildout:directory}/srv
var = ${buildout:directory}/var
run = ${:var}/run
log = ${:var}/log
scripts = ${:etc}/run
services = ${:etc}/service
plugins = ${:etc}/plugin
promise = ${:etc}/promise
www = ${:srv}/www
tmp = ${:srv}/tmp
acme = ${:www}/.well-known/acme-challenge
caucase = ${:etc}/caucase
dehydrated = ${:etc}/dehydrated
domains.d = ${:dehydrated}/domains.txt.d
kedifa = ${:etc}/kedifa
{% for name in folder_list -%}
{{   name }} = ${:dehydrated}/{{ name }}
{% endfor -%}

[buildout]
extends = {{ template_monitor }}

parts =
  publish-connection-information
  logrotate-entry-httpd
  httpd-wrapper
  httpd-listen-promise
  httpd-url-promise
  dehydrated-register
  dehydrated-signcert

# Complete parts with sections
  {{ part_list | join('\n  ') }}

eggs-directory = {{ eggs_directory }}
develop-eggs-directory = {{ develop_eggs_directory }}
offline = true
