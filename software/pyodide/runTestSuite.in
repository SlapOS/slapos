#!${buildout:directory}/bin/${eggs:interpreter}
# BEWARE: This file is operated by slapgrid
# BEWARE: It will be overwritten automatically
"""
  Script to run Cython test suite using Nexedi's test node framework.
"""
import argparse, os, re, shutil, subprocess, sys, traceback
from erp5.util import taskdistribution
from time import gmtime, strftime
from subprocess import check_output
import importlib
import datetime
def main():
  parser = argparse.ArgumentParser(description='Run a test suite.')
  parser.add_argument('--test_suite', help='The test suite name')
  parser.add_argument('--test_suite_title', help='The test suite title')
  parser.add_argument('--test_node_title', help='The test node title')
  parser.add_argument('--project_title', help='The project title')
  parser.add_argument('--revision', help='The revision to test',
                      default='dummy_revision')
  parser.add_argument('--node_quantity', help='ignored', type=int)
  parser.add_argument('--master_url',
                      help='The Url of Master controling many suites')
  parser.add_argument('--frontend_url',
                      help='The url of frontend of the test suite')
  args = parser.parse_args()
  is_browser_running = False
  try:
    test_suite_title = args.test_suite_title or args.test_suite
    test_suite = args.test_suite
    revision = args.revision
    test_line_dict = {}
    date = strftime("%Y/%m/%d %H:%M:%S", gmtime())
    ##########################
    # Run all tests
    ##########################
    path_var = os.pathsep.join([os.environ.get('PATH', os.defpath), '${python3.7.2:location}/bin'])
    path_var = os.pathsep.join([os.environ.get('PATH', os.defpath), '${geckodriver:location}'])
    path_var = os.pathsep.join([os.environ.get('PATH', os.defpath), '${firefox-wrapper:location}'])
    env = dict(os.environ, PATH=path_var)
    test_list = ['test_common', ]
    failed = 0
    result_string = None
    duration = 0
    test_line_dict = {}
    for test_name in test_list:
      failed = 0
      result_string = None
      duration = 0
      try:
        pass
        # sys.path.append('${python3.7.2:location}/')
        # test_module = importlib.import_module(test_name)
      except ImportError as e:
          failed = 1
          stdout = str(e)
      else:
        start_time = datetime.datetime.now()
        try:
          result_string = check_output(['pytest', '--timeout=5', './test/test_common.py'],
                                     cwd='${pyodide:location}',
                                     env=env) # temporary solution for not block by xfailed tests too long
        except OSError, e:
          result_string = str(e.strerror)
        except Exception, e: # except CalledProcessError, e:
          result_string = str(e.output)
        print('${pyodide:location}')
        print(result_string)
        test_result_content = result_string.split('\n')
        print('---------------------')
        print('---------------------')
        print('---------------------')
        test_result_statistic_line = test_result_content[-2]
        print(test_result_statistic_line)
        # use magic code, something like
        # === 21 passed, 1 warnings, 42 error in 130.43 seconds ===
        test_result_statistic = test_result_statistic_line.split(' ')
        print(test_result_statistic)
        # result_string = test_module.run(env, 'firefox --help')
        # end_time = datetime.datetime.now()
        duration = test_result_statistic[-3] # (end_time - start_time).total_seconds()
        failed = 0 #result_string['failed']
        stdout = result_string # result_string['stdout']
      test_line_dict['%s: %s' % ('Pyodide test', test_name)] = {
          'test_count': int(test_result_statistic[1]),
          'error_count': 0,
          'failure_count': 0, #failed,
          'skip_count': int(test_result_statistic[5]),
          'duration': float(duration),
          'command': '',
          'stdout': "stdout",
          'stderr': '',
          'html_test_result': '',
        }
    # Send results
    tool = taskdistribution.TaskDistributor(portal_url=args.master_url)
    test_result = tool.createTestResult(revision = revision,
                                        test_name_list = test_line_dict.keys(),
                                        node_title = args.test_node_title,
                                        test_title = test_suite_title,
                                        project_title = args.project_title)
    if test_result is None or not hasattr(args, 'master_url'):
      return
    # report test results
    while 1:
      test_result_line = test_result.start()
      if not test_result_line:
        print 'No test result anymore.'
        break
      print 'Submitting: "%s"' % test_result_line.name
      print test_line_dict
      # report status back to Nexedi ERP5
      test_result_line.stop(**test_line_dict[test_result_line.name])
  except:
    # Catch any exception here, to warn user instead of being silent,
    # by generating fake error result
    print traceback.format_exc()
    result = dict(status_code=-1,
                  command='pytest test_common.py',
                  stderr=traceback.format_exc(),
                  stdout='')
    # XXX: inform test node master of error
    raise EnvironmentError(result)
if __name__ == "__main__":
    main()