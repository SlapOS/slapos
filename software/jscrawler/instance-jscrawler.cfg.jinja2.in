{% set part_list = [] -%}

[directory]
recipe = slapos.cookbook:mkdirectory
etc = ${buildout:directory}/etc
bin = ${buildout:directory}/bin
srv = ${buildout:directory}/srv
var = ${buildout:directory}/var
run = ${:var}/run
log = ${:var}/log
scripts = ${:etc}/run
services = ${:etc}/service
plugins = ${:etc}/plugin
ssl = ${:etc}/ssl
www = ${:srv}/www
nginx-temp = ${:var}/temp

{%  do part_list.append('gen-certificate') -%}
[gen-certificate]
recipe = plone.recipe.command
command = "{{ parameter_dict['openssl'] }}" req -newkey rsa -batch -new -x509 -days 3650 -nodes -keyout "${nginx-configuration:ssl_key}" -out "${nginx-configuration:ssl_crt}"
stop-on-error = true

#################################
# Nginx service
#################################
[nginx-wrapper]
recipe = slapos.cookbook:wrapper
command-line =
  {{ parameter_dict['nginx-location'] }} -c ${nginx-configuration:rendered}  
wrapper-path = ${directory:services}/ngnix
hash-existing-files = {{ buildout_directory }}/software_release/buildout.cfg

[nginx-configuration]
recipe = slapos.recipe.template:jinja2
template = {{ parameter_dict['template-nginx'] }}
rendered = ${directory:etc}/nginx.cfg
mode = 0600
extensions = jinja2.ext.do
access_log = ${directory:log}/nginx-access.log
error_log = ${directory:log}/nginx-error.log
ip = {{ (ipv6 | list)[0] }}
port = 9083
pid_file = ${directory:run}/nginx.pid
mime = {{ parameter_dict['nginx-mime'] }}
ssl_key = ${directory:ssl}/nginx.key
ssl_crt = ${directory:ssl}/nginx.crt
context =
  key pid_file :pid_file
  key access_log :access_log
  key error_log :error_log
  key ip :ip
  key port :port
  key mime :mime
  key www_dir directory:www
  key nginx_temp directory:nginx-temp

[request-nginx-frontend]
<= slap-connection
recipe = slapos.cookbook:requestoptional
name = jscawler Frontend
# XXX We have hardcoded SR URL here.
software-url = http://git.erp5.org/gitweb/slapos.git/blob_plain/HEAD:/software/apache-frontend/software.cfg
slave = true
config-url = http://[${nginx-configuration:ip}]:${nginx-configuration:port}
return = site_url domain

[nginx-frontend-promise]
<= monitor-promise-base
module = check_url_available
name = nginx_frontend.py
config-url = ${request-nginx-frontend:connection-site_url}
config-check-secure = 1


{%  do part_list.append('logrotate-entry-nginx') -%}
[logrotate-entry-nginx]
<= logrotate-entry-base
name = nginx
log = ${nginx-configuration:access_log} ${nginx-configuration:error_log}
post = kill -USR1 $(cat ${nginx-configuration:pid_file})


[nginx-listen-promise]
<= monitor-promise-base
module = check_port_listening
name = nginx-listen.py
config-hostname = ${nginx-configuration:ip}
config-port = ${nginx-configuration:port}

[jscrawler-wrapper]
recipe = slapos.cookbook:wrapper
command-line =
  {{ parameter_dict['nodejs-location'] }} {{ parameter_dict['jscrawler-location'] }} 
wrapper-path = ${directory:bin}/jscrawler

{% set url_list = slapparameter_dict.get('urls', "") -%}
{% set site_list = [] %}
{% for l in url_list.split() %}
{%   do site_list.extend(l.split(',')) %}
{% endfor -%}
[jscrawler-build-wrapper]
recipe = slapos.recipe.template:jinja2
template = {{ parameter_dict['template-jscrawler'] }}
rendered = ${directory:bin}/jscrawler-build
extensions = jinja2.ext.do
mode = 0700
list = {{ site_list | join(' ') }}
context =
  key public_folder directory:www
  key jscrawler_wrapper jscrawler-wrapper:wrapper-path
  key url_list :list
  raw shell_binary {{ bash_executable_location }}
  raw pid_file ${directory:run}/jscrawler.pid

[cron-entry-build-sitemap]
<= cron
recipe = slapos.cookbook:cron.d
name = jscrawler-build
frequency = */2 * * * *
command = ${jscrawler-build-wrapper:rendered}


[publish-connection-information]
<= monitor-publish
recipe = slapos.cookbook:publish
url = ${request-nginx-frontend:connection-site_url}
backend-url = http://[${nginx-configuration:ip}]:${nginx-configuration:port}

[buildout]
extends = {{ template_monitor }}

parts =
  publish-connection-information
# Complete parts with sections
  {{ part_list | join('\n  ') }}
# nginx and crawler cron
  cron-entry-build-sitemap
  nginx-wrapper
  nginx-listen-promise
  nginx-frontend-promise

eggs-directory = {{ eggs_directory }}
develop-eggs-directory = {{ develop_eggs_directory }}
offline = true
