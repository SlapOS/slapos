[buildout]
extends =
  buildout.hash.cfg
  ../../stack/slapos.cfg
  ../../stack/monitor/buildout.cfg
  ../../component/coreutils/buildout.cfg
  ../../component/curl/buildout.cfg
  ../../component/rust/buildout.cfg
  ../../component/git/buildout.cfg
  ../../component/java-jdk/buildout.cfg
  ../../component/python3/buildout.cfg
  ../../component/nodejs/buildout.cfg
  ../../component/yarn/buildout.cfg
  ../../component/mariadb/buildout.cfg
  ../../component/findutils/buildout.cfg
  ../../component/qdrant/buildout.cfg

parts =
  slapos-cookbook
  java-jdk
  python3
  mariadb
  wren-engine
  ibis-server
  wren-ai-service
  wren-ui
  template-cfg
# todo: add template-cfg-qdrant

[python3]
<= python3.11

[mariadb]
<= mariadb-11.4

[java-jdk]
<= java-jdk21

# ---------------------------------------------------------
# [wren-engine] assumes the Git repo with the source code
# of the wren-engine has been cloned. Then the `command`
# reproduces what the WrenAI/wren-engine GitHub Action
# build-image.yml does to create the executable jar file
# with wren-engine.
#
[wren-engine-orig]
recipe = plone.recipe.command
command =
  export PATH=${git:location}/bin:$PATH
  export JAVA_HOME=${java-jdk21:location}
  mkdir -p ${buildout:directory}/wrenai
  cd ${wren-engine-src:location}/wren-core-legacy
  ./mvnw clean install -B -DskipTests -P exec-jar
  export WREN_VERSION=$(./mvnw --quiet help:evaluate -Dexpression=project.version -DforceStdout)
  cp ./wren-server/target/wren-server-$WREN_VERSION-executable.jar ${buildout:directory}/wrenai/
  cp docker/entrypoint.sh ${buildout:directory}/wrenai/wren-engine-launcher.sh
  sed -i "s/\$1/wren-server-$WREN_VERSION-executable.jar/g" ${buildout:directory}/wrenai/wren-engine-launcher.sh
stop-on-error = true

[wren-engine]
recipe = slapos.recipe.cmmi
path = ${wren-engine-src:location}
environment =
  PATH=${git:location}/bin:${coreutils:location}/bin:$PATH
  JAVA_HOME=${java-jdk21:location}
pre-configure =
  cd ${wren-engine-src:location}/wren-core-legacy && \
  ./mvnw --quiet help:evaluate -Dexpression=project.version -DforceStdout
configure-command = :
make-binary =
  cd ${wren-engine-src:location}/wren-core-legacy && \
  ./mvnw clean install -B -DskipTests -P exec-jar
make-targets =

# ---------------------------------------------------------
# [ibis-server] assumes the source Git repo with wren-engine
# is cloned (ibis-server is part of it, like wren-engine).
# TODO Integrate properly in SlapOS, see:
# https://lab.nexedi.com/nexedi/slapos/-/commit/0e3d546f#note_235022
#
[ibis-server]
recipe = plone.recipe.command
venv = ${buildout:directory}/wrenai/ibis-server-venv
command =
  ${python3:location}/bin/python3 -m venv ${:venv}
  export VIRTUAL_ENV=${:venv}
  export PATH=${:venv}/bin:${rustc:location}/bin:$PATH
  export MYSQLCLIENT_CFLAGS="-I ${mariadb:location}/include/mysql"
  export MYSQLCLIENT_LDFLAGS="-L ${mariadb:location}/lib -lmariadb"
  pip install "poetry==1.8.3"
  cd ${wren-engine-src:location}/ibis-server
  export ENV=prod
  poetry install --without dev
  cd ${wren-engine-src:location}/wren-core-py
  poetry install --no-root
  poetry run maturin build --release
  poetry run pip install --force-reinstall target/wheels/wren_core_py-*.whl
stop-on-error = true

# ---------------------------------------------------------
# [wren-ai-service] assumes the Git repo of WrenAI is cloned.
# TODO: This recipe so far only installs the software.
#       Still needed: Copy entrypoint.sh and replace host and
#       port with appropriate values when configuring the service.
[wren-ai-service]
recipe = plone.recipe.command
venv = ${buildout:directory}/wrenai/wren-ai-service-venv
command =
  ${python3:location}/bin/python3 -m venv ${:venv}
  export VIRTUAL_ENV=${:venv}
  export PATH=${:venv}/bin:$PATH
  pip install "poetry==1.8.3"
  cd ${wrenai-src:location}/wren-ai-service
  ${findutils-output:find} ${wrenai-src:location}/wren-ai-service -type f -name "pyproject.toml" -exec sed -i 's/python = \">=3.12.*, <3.13\"/python = \">=3.11.*, <3.12\"/' {} \;
  export POETRY_NO_INTERACTION=1
  poetry lock
  poetry install --without dev,eval,test --no-root
stop-on-error = true

# ---------------------------------------------------------
# [wren-ui] assumes the Git repo of WrenAI is cloned.
[wren-ui]
recipe = slapos.recipe.cmmi
path = ${wrenai-src:location}/wren-ui
environment =
  PATH=${nodejs:location}/bin:${yarn:location}/bin:%(PATH)s
pre-configure =
  ${yarn:location}/bin/yarn config set --home enableTelemetry 0
  ${yarn:location}/bin/yarn install --immutable
  ${yarn:location}/bin/yarn add sharp
configure-command = true
make-binary =
  cd ${wrenai-src:location}/wren-ui && ${yarn:location}/bin/yarn
make-targets = build


# ---------------------------------------------------------
[wren-engine-src]
recipe = slapos.recipe.build:gitclone
repository = https://github.com/canner/wren-engine.git
revision = 0.16.4
ignore-cloning-submodules = true
use-cache = true
shared = true
git-executable = ${git:location}/bin/git


# ---------------------------------------------------------
[wrenai-src]
recipe = slapos.recipe.build:gitclone
repository = https://github.com/canner/WrenAI.git
revision = release/ai-service/0.24.0
ignore-cloning-submodules = true
use-cache = true
shared = true
git-executable = ${git:location}/bin/git

# ---------------------------------------------------------
# Prepare instance.

[copy-wren-engine-files]
recipe = plone.recipe.command
command =
  mv ${wren-engine-src:location}/wren-core-legacy/wren-server/target/wren-server-*-executable.jar ${wren-engine-src:location}/wren-core-legacy/wren-server/target/wren-server-executable.jar

[profile-common]
=> copy-wren-engine-files
template_monitor = ${monitor-template:output}
jdk21_path = ${java-jdk21:location}
# wren-engine instance parameters:
wren_engine_bin = ${wren-engine-src:location}/wren-core-legacy/wren-server/target/wren-server-executable.jar
wren_engine_max_heap_size = 512m
wren_engine_min_heap_size = 64m
wren_engine_node_environment = production
wren_engine_experimental_enable_dynamic_fields = true
wren_engine_template_config_properties = ${wren-engine-template-config-properties:target}
# ibis-server instance parameters:
ibis_server_venv = ${ibis-server:venv}
ibis_server_num_workers = 2
ibis_server_max_requests = 100
ibis_server_max_requests_jitter = 100
ibis_server_timeout = 300
ibis_server_graceful_timeout = 60
# qdrant instance parameters:
qdrant_bin = ${qdrant:location}/bin/qdrant
qdrant_template_config_yaml = ${qdrant-template-config-yaml:target}
qdrant_http_port = 6333
qdrant_grpc_port = 6334


[template-cfg]
recipe = slapos.recipe.template:jinja2
output = ${buildout:directory}/template.cfg
url = ${:_profile_base_location_}/${:filename}
context =
  section buildout buildout
  section parameter_list profile-common

# ---------------------------------------------------------
[download-base]
recipe = slapos.recipe.build:download
url = ${:_profile_base_location_}/${:_update_hash_filename_}

# `config.properties` is the configuration file for wren-engine.
[wren-engine-template-config-properties]
<= download-base

# `config.yaml` is the configuration file for qdrant.
[qdrant-template-config-yaml]
<= download-base
