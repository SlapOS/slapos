[buildout]
extends =
  buildout.hash.cfg
  ../../stack/slapos.cfg
  ../../stack/monitor/buildout.cfg
  ../../component/coreutils/buildout.cfg
  ../../component/curl/buildout.cfg
  ../../component/rust/buildout.cfg
  ../../component/git/buildout.cfg
  ../../component/java-jdk/buildout.cfg
  ../../component/python3/buildout.cfg
  ../../component/nodejs/buildout.cfg
  ../../component/yarn/buildout.cfg
  ../../component/mariadb/buildout.cfg
  ../../component/findutils/buildout.cfg
  ../../component/qdrant/buildout.cfg

parts =
  slapos-cookbook
  java-jdk
# python3
  mariadb
  wren-engine
  ibis-server
  wren-ai-service
  wren-ui
  template-cfg

# [python3]
# <= python3.11

[mariadb]
<= mariadb-11.4

[java-jdk]
<= java-jdk21

#----------------
#--
#-- Optional part allowing applications using this stack to run a custom
#-- instance.cfg to define what components are deployed and where they run.
#-- WrenAI is made of 5 components. If you want to run the complete stack,
#-- do not override anything of the [custom-profile]. If on the other hand
#-- you want to run, say, qdrant, wren-engine, ibis-server and the
#-- wren-ai-service in deployment A, and wren-ui in deployment B, then
#-- define those two wrenai stacks and customize the values provided
#-- in the [custom-profile] part to define what components are enabled and
#-- what are not.

[custom-profile]
generation_model = gpt-4o-mini
qdrant_enabled = True
qdrant_ipv4 =
qdrant_http_port =
qdrant_grpc_port =
wren_engine_enabled = True
wren_engine_ipv4 =
wren_engine_port =
ibis_server_enabled = True
ibis_server_ipv4 =
ibis_server_port =
wren_ai_service_enabled = True
wren_ai_service_ipv4 =
wren_ai_service_port =
wren_ui_enabled = True
wren_ui_ipv4 =
wren_ui_port =
openai_api_key =
langfuse_public_key =
langfuse_secret_key =
posthog_api_key =
posthog_host =
wren_product_version = 0.24.0
wren_ai_service_version = 0.24.0
wren_ui_version = 0.29.2
wren_engine_version = 0.16.4

# ---------------------------------------------------------
[wren-engine]
recipe = slapos.recipe.cmmi
path = ${wren-engine-src:location}
environment =
  PATH=${git:location}/bin:${coreutils:location}/bin:$PATH
  JAVA_HOME=${java-jdk21:location}
pre-configure =
  cd ${wren-engine-src:location}/wren-core-legacy && \
  ./mvnw --quiet help:evaluate -Dexpression=project.version -DforceStdout
configure-command = :
make-binary =
  cd ${wren-engine-src:location}/wren-core-legacy && \
  ./mvnw clean install -B -DskipTests -P exec-jar
make-targets =

# ---------------------------------------------------------
# [ibis-server] assumes the source Git repo with wren-engine
# is cloned (ibis-server is part of it, like wren-engine).
# TODO Integrate properly in SlapOS, see:
# https://lab.nexedi.com/nexedi/slapos/-/commit/0e3d546f#note_235022
#
[ibis-server]
<= python3.11
recipe = plone.recipe.command
venv = ${buildout:directory}/wrenai/ibis-server-venv
command =
  ${python3.11:location}/bin/python3.11 -m venv ${:venv}
  export VIRTUAL_ENV=${:venv}
  export PATH=${:venv}/bin:${rustc:location}/bin:$PATH
  export MYSQLCLIENT_CFLAGS="-I ${mariadb:location}/include/mysql"
  export MYSQLCLIENT_LDFLAGS="-L ${mariadb:location}/lib -lmariadb"
  pip install "poetry==1.8.3"
  cd ${wren-engine-src:location}/ibis-server
  export ENV=prod
  poetry install --without dev
  cd ${wren-engine-src:location}/wren-core-py
  poetry install --no-root
  poetry run maturin build --release
  poetry run pip install --force-reinstall target/wheels/wren_core_py-*.whl
stop-on-error = true

# ---------------------------------------------------------
# ${findutils-output:find} ${wrenai-src:location}/wren-ai-service -type f -name "pyproject.toml" -exec sed -i 's/python = \">=3.12.*, <3.13\"/python = \">=3.11.*, <3.12\"/' {} \;
# sed -i 's/\"WREN_UI_ENDPOINT\"/'\'WREN_UI_ENDPOINT\'/ src/force_deploy.py
# sed -i 's/\"http://wren-ui:3000\"/\'http://wren-ui:3000\'/' src/force_deploy.py
[wren-ai-service]
<= python3.12
recipe = plone.recipe.command
venv = ${buildout:directory}/wrenai/wren-ai-service-venv
command =
  ${python3.12:location}/bin/python3.12 -m venv ${:venv}
  export VIRTUAL_ENV=${:venv}
  export PATH=${:venv}/bin:$PATH
  pip install "poetry==1.8.3"
  cd ${wrenai-src:location}/wren-ai-service
  export POETRY_NO_INTERACTION=1
  poetry lock
  poetry install --without dev,eval,test --no-root
stop-on-error = true

# ---------------------------------------------------------
[wren-ui]
recipe = slapos.recipe.cmmi
path = ${wrenai-src:location}/wren-ui
environment =
  PATH=${nodejs:location}/bin:${yarn:location}/bin:%(PATH)s
pre-configure =
  ${yarn:location}/bin/yarn config set --home enableTelemetry 0
  ${yarn:location}/bin/yarn install --immutable
  ${yarn:location}/bin/yarn add sharp
configure-command = true
make-binary =
  cd ${wrenai-src:location}/wren-ui && ${yarn:location}/bin/yarn
make-targets = build
post-install =
  cp -r public .next/standalone/ && cp -r .next/static .next/standalone/.next/

# ---------------------------------------------------------
[wren-engine-src]
recipe = slapos.recipe.build:gitclone
repository = https://github.com/canner/wren-engine.git
revision = 0.16.4
ignore-cloning-submodules = true
use-cache = true
shared = true
git-executable = ${git:location}/bin/git

# ---------------------------------------------------------
[wrenai-src]
recipe = slapos.recipe.build:gitclone
repository = https://github.com/canner/WrenAI.git
revision = release/ai-service/0.24.0
ignore-cloning-submodules = true
use-cache = true
shared = true
git-executable = ${git:location}/bin/git

# ---------------------------------------------------------
# Prepare instance.

[copy-wren-engine-files]
recipe = plone.recipe.command
command =
  mv ${wren-engine-src:location}/wren-core-legacy/wren-server/target/wren-server-*-executable.jar ${wren-engine-src:location}/wren-core-legacy/wren-server/target/wren-server-executable.jar

[common-profile]
=> copy-wren-engine-files
template_monitor = ${monitor-template:output}
jdk21_path = ${java-jdk21:location}
node_path = ${nodejs:location}
yarn_path = ${yarn:location}
# wren-engine instance parameters:
wren_engine_bin = ${wren-engine-src:location}/wren-core-legacy/wren-server/target/wren-server-executable.jar
wren_engine_max_heap_size = 512m
wren_engine_min_heap_size = 64m
wren_engine_node_environment = production
wren_engine_experimental_enable_dynamic_fields = true
wren_engine_template_config_properties = ${wren-engine-template-config-properties:target}
# ibis-server instance parameters:
ibis_server_venv = ${ibis-server:venv}
ibis_server_num_workers = 2
ibis_server_max_requests = 100
ibis_server_max_requests_jitter = 100
ibis_server_timeout = 300
ibis_server_graceful_timeout = 60
# wren-ai-service instance parameters:
wren_ai_service_location = ${wrenai-src:location}/wren-ai-service
wren_ai_service_venv = ${wren-ai-service:venv}
wren_ai_template_config_yaml = ${wren-ai-template-config-yaml:target}
# wren-ui instance parameters:
wren_ui_location = ${wrenai-src:location}/wren-ui
# qdrant instance parameters:
qdrant_bin = ${qdrant:location}/bin/qdrant
qdrant_template_config_yaml = ${qdrant-template-config-yaml:target}
qdrant_http_port = 6333
qdrant_grpc_port = 6334

[template-cfg]
recipe = slapos.recipe.template:jinja2
output = ${buildout:directory}/template.cfg
url = ${:_profile_base_location_}/${:filename}
context =
  section buildout buildout
  section common_parameters common-profile
  section custom_parameters custom-profile

# ---------------------------------------------------------
[download-base]
recipe = slapos.recipe.build:download
url = ${:_profile_base_location_}/${:_update_hash_filename_}

# `config.properties` is the configuration file for wren-engine.
[wren-engine-template-config-properties]
<= download-base

# `etc/qdrant/config.yaml` is the configuration file for qdrant.
[qdrant-template-config-yaml]
<= download-base

# `etc/wren-ai/config.yaml` is the configuration file for the wren-ai-service.
[wren-ai-template-config-yaml]
<= download-base