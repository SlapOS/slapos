#!${buildout:directory}/bin/${eggs:interpreter}
# BEWARE: This file is operated by slapgrid
# BEWARE: It will be overwritten automatically

import argparse, os, re, shutil, subprocess, sys, traceback
from erp5.util import taskdistribution

import sys

test_path = '$${runTest-instance:buildout-directory}/bin/'

sys.path.append(test_path)
import testIngestion

def main():
  parser = argparse.ArgumentParser(description='Run a test suite.')
  parser.add_argument('--test_suite', help='The test suite name')
  parser.add_argument('--test_suite_title', help='The test suite title')
  parser.add_argument('--test_node_title', help='The test node title')
  parser.add_argument('--project_title', help='The project title')
  parser.add_argument('--revision', help='The revision to test',
                      default='dummy_revision')
  parser.add_argument('--node_quantity', help='ignored', type=int)
  parser.add_argument('--master_url',
                      help='The Url of Master controling many suites')
  parser.add_argument('--frontend_url',
                      help='The url of frontend of the test suite')
  parser.add_argument('--target',
                      help='Target OS to run tests on',
                      type=str)
  parser.add_argument('--target_version',
                      help='Target OS version to use',
                      type=str,)
  parser.add_argument('--target_browser',
                      help='The desired browser of the target OS to be used. Example: Firefox if target is Android.',
                      type=str,)
  parser.add_argument('--target_device',
                      help='The desired device running the target OS. Example: iPad Simulator, if target is iOS.',
                      type=str,)
  parser.add_argument('--appium_server_auth',
                      help='Combination of user and token to access SauceLabs service. (i.e. user:token)',
                      type=str)

  args = parser.parse_args()

  
  
  
  try:
    test_suite_title = args.test_suite_title or args.test_suite
    test_suite = args.test_suite
    revision = args.revision

    test_line_dict = {}
    
    ######!!!!!!!!!!!!!! uncomment this !!!!!!!!
    # result.errors, result.failures, stream.read()
    num_of_tests, errors, failures, stdout = testIngestion.main()
    result = testIngestion.main()
    
    test_line_dict["testIngestion"] = {
        'test_count': num_of_tests,
        'error_count': len(errors),
        'failure_count': len(failures),
        'skip_count': 0,
        'stdout': stdout,
        'stderr': failures
      }
   
    
    tool = taskdistribution.TaskDistributor(portal_url=args.master_url)
    test_result = tool.createTestResult(revision = revision,
                                        test_name_list = test_line_dict.keys(),
                                        node_title = args.test_node_title,
                                        test_title = test_suite_title,
                                        project_title = args.project_title)
                                        
  
    
    if test_result is None or not hasattr(args, 'master_url'):
      print("test_result is NONE")
      return
    # report test results
    while 1:
      test_result_line = test_result.start()
      if not test_result_line:
        print 'No test result anymore.'
        break

      print 'Submitting: "%s"' % test_result_line.name
      # report status back to Nexedi ERP5
      test_result_line.stop(**test_line_dict[test_result_line.name])

  except:
    # Catch any exception here, to warn user instead of being silent,
    # by generating fake error result
    print traceback.format_exc()
    result = dict(status_code=-1,
                  command=url,
                  stderr=traceback.format_exc(),
                  stdout='')
    # XXX: inform test node master of error
    raise EnvironmentError(result)
  
  

if __name__ == "__main__":
    main()
