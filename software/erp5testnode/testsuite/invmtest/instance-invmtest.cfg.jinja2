# DEBUG slapparameter_dict {{ slapparameter_dict }}
# DEBUG slap_configuration {{ slap_configuration }}
{# Get test type, default to script-from-url, as defined in instance-input-schema.json -#}
{% set test_type = slapparameter_dict.get('test-type', 'script-from-url') -%}
{# Choose parameters according to test type -#}
{% if test_type == 'script-from-url' -%}
{% set data_to_vm = slapparameter_dict.get('data-to-vm') -%}
{% elif test_type == 'cloned-playbook' -%}
{% set script_url = 'http://10.0.2.100/standalone-local-playbook' -%}
{% set test_yml_path = slapparameter_dict.get('yml-path-to-test') -%}
{% else -%}
The test_type = "{{ test_type }}" is unsupported.
{% endif -%}
[buildout]
parts =
  switch_softwaretype
eggs-directory = {{ eggs_directory }}
develop-eggs-directory = {{ develop_eggs_directory }}
offline = true

[inner-parameter]
paczynka = oink
{%- for k,v in slapparameter_dict.items() %}
{{ k }} = {{ dumps(v) }}
{%- endfor %}

[switch_softwaretype]
recipe = slapos.cookbook:switch-softwaretype
default = dynamic-template-inner:output

[dynamic-template-kvm-inner]
recipe = slapos.recipe.template:jinja2
extensions = jinja2.ext.do
output = ${buildout:directory}/instance-kvm-inner.cfg
context =
  key develop_eggs_directory buildout:develop-eggs-directory
  key eggs_directory buildout:eggs-directory
  key ipv4 slap-configuration:ipv4
  key ipv6 slap-configuration:ipv6
  key global_ipv4_prefix network-information:global-ipv4-network
  key slapparameter_dict slap-configuration:configuration
  key computer_id slap-configuration:computer
  raw openssl_executable_location ${openssl:location}/bin/openssl
  section slap_configuration slap-configuration
  raw ansible_promise_tpl ${template-ansible-promise:target}
  raw curl_executable_location ${curl:location}/bin/curl
  raw dash_executable_location ${dash:location}/bin/dash
  raw dnsresolver_executable ${buildout:bin-directory}/dnsresolver
  raw dcron_executable_location ${dcron:location}/sbin/crond
  raw boot_image_select_source_config ${boot-image-select-source-config:target}
  raw whitelist_domains_default ${whitelist-domains-default:target}
  raw whitelist_firewall_download_controller ${whitelist-firewall-download-controller:output}
  raw image_download_controller ${image-download-controller:output}
  raw image_download_config_creator ${image-download-config-creator:output}
  raw logrotate_cfg ${template-logrotate-base:output}
  raw novnc_location ${noVNC:location}
  raw netcat_bin ${netcat:location}/bin/netcat
  raw nginx_executable ${nginx-output:nginx}
  raw nginx_mime ${nginx-output:mime}
  raw python_executable ${buildout:executable}
  raw python_eggs_executable ${buildout:bin-directory}/${python-with-eggs:interpreter}
  raw qemu_executable_location ${qemu:location}/bin/qemu-system-x86_64
  raw qemu_img_executable_location ${qemu:location}/bin/qemu-img
  raw qemu_start_promise_tpl ${template-qemu-ready:target}
  raw sixtunnel_executable_location ${6tunnel:location}/bin/6tunnel
  raw template_httpd_cfg ${template-httpd:output}
  raw template_content ${template-content:target}
  raw template_kvm_controller_run ${template-kvm-controller:target}
  raw template_kvm_run ${template-kvm-run:target}
  raw template_monitor ${monitor2-template:output}
  raw template_nginx ${template-nginx:target}
  raw websockify_executable_location ${buildout:directory}/bin/websockify
  raw wipe_disk_wrapper ${buildout:directory}/bin/securedelete
  raw disk_image_corruption ${disk-image-corruption.sh:target}

[kvm-parameter-dict]
name = test-kvm
# Tested image
# Passed by request
virtual-hard-drive-url = ${image-to-test:url}
virtual-hard-drive-md5sum = ${image-to-test:md5sum}

# require HTTP server
enable-http-server = true

# VM options
ram-size = 4096
cpu-count = 2

# The test script XXX put to public
bootstrap-script-url = {{ in_vm_test_script }}#{{ in_vm_test_script_md5 }}


[image-to-test]
url = {{ slapparameter_dict.get('image-to-test-url') }}
md5sum = {{ slapparameter_dict.get('image-to-test-md5sum') }}

[directory]
recipe = slapos.cookbook:mkdirectory
home = ${buildout:directory}
etc = ${:home}/etc/
var = ${:home}/var/
srv = ${:home}/srv/
bin = ${:home}/bin/
tmp = ${:home}/tmp/
log = ${:var}/log/
services = ${:etc}/service/
scripts = ${:etc}/run/

[slap-configuration]
recipe = slapos.cookbook:slapconfiguration.serialised
computer = ${slap-connection:computer-id}
partition = ${slap-connection:partition-id}
url = ${slap-connection:server-url}
key = ${slap-connection:key-file}
cert = ${slap-connection:cert-file}
