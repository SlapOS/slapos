[buildout]
extends =
  ${template:output}

[switch-softwaretype]
enb = dynamic-template-ors-enb:output
gnb = dynamic-template-ors-enb:output
obsolete = dynamic-template-obsolete:output
enb-epc = $${:obsolete}
gnb-epc = $${:obsolete}
epc = $${:obsolete}
mme = $${:obsolete}
ue = dynamic-template-ors-ue:output

[dynamic-template-obsolete]
< = jinja2-template-base
url = ${template-obsolete:target}
filename = instance-obsolete.cfg
extensions = jinja2.ext.do
extra-context =
    key slave_instance_list slap-configuration:slave-instance-list

# ORS-specific enb and gnb
# both are served by instance-ors-enb, which translates
# ORS enb/gnb schemas to generic enb with only one RU and one LTE or NR CELL
[dynamic-template-ors-enb]
< = dynamic-template-enb
url = ${template-ors-enb:target}
filename = instance-enb.cfg
extra-context +=
    section ors_parameters ors-parameters
import-list +=
    rawfile instance-enb-base.jinja2.cfg ${template-enb:target}

[dynamic-template-ors-ue]
< = dynamic-template-ue
url = ${template-ors-ue:target}
filename = instance-ue.cfg
extra-context +=
    section ors_parameters ors-parameters
    raw ue_ifup ${ue-ifup:output}
import-list +=
    rawfile instance-ue-base.jinja2.cfg ${template-ue:target}

[ors-parameters]
recipe = slapos.recipe.build
configuration = $${slap-configuration:configuration}
sdr-dir = $${sdr:dir}
enb-mode = $${slap-configuration:slap-software-type}
init =
  import math, subprocess
  from xlte import nrarfcn
  import socket
  o = options
  config = o['configuration']
  rat = 'lte' if o['enb-mode'] == 'enb' else 'nr'
  lte, nr  = rat == 'lte', rat == 'nr'
  DEFAULTS = {
      "*": {
          "tx_power_dbm": 20,
          "rx_gain": 0,
      },
      "enb": {
          "bandwidth": "20 MHz",
          "n_antenna_dl": 2,
          "n_antenna_ul": 2,
          "rf_mode": "tdd",
          "tdd_ul_dl_config": "[Configuration 2] 5ms 2UL 6DL (default)",
          "tac": "0x0001",
          'mme_list': {
              'Local Core Network': {
                  'mme_addr': '127.0.1.100'
              }
          },
          'plmn_list': {
              'Test PLNM': {
                  'plmn': '00101',
                  'tac': 100
              }
          },
          "ncell_list": {},
          "x2_peers": {},
          "inactivity_timer": 10000,
          "disable_sdr": False
      },
      "gnb": {
          "nr_bandwidth": 40,
          "n_antenna_dl": 2,
          "n_antenna_ul": 2,
          "rf_mode": "tdd",
          "tdd_ul_dl_config": "5ms 2UL 7DL 4/6 (default)",
          "ssb_pos_bitmap": "10000000",
          "gnb_id_bits": 28,
          'amf_list': {
              'Local Core Network': {
                  'amf_addr': '127.0.1.100'
              }
          },
          'plmn_list': {
              'Test PLNM': {
                  'plmn': '00101',
                  'tac': 100
              }
          },
          "ncell_list": {},
          "xn_peers": {},
          "inactivity_timer": 10000,
          "disable_sdr": False,
          "xlog_forwarding_enabled": False,
          "xlog_enabled": False,
          "enb_drb_stats_enabled": False
      },
      "B28": {
          "range": "758MHz - 803MHz",
          "lte_frequency": 792,
          "nr_frequency": 792,
          "lte_band": 28,
          "nr_band": 28,
          "rf_mode": "fdd",
          "tx_interpolation_coefficients": (
            None,
            [-0.004711416231164319, 1.5976906979683085, -67.71316951508676],
          ),
      },
      "B38": {
          "range": "2570MHz - 2620MHz",
          "lte_frequency": 2600,
          "nr_frequency": 2595,
          "lte_band": 38,
          "nr_band": 41,
          "rf_mode": "tdd",
          "tx_interpolation_coefficients": (
            [-0.008712931375092506, 2.1973585140044642, -94.29420762479742],
            [-0.004472751640641793, 1.6308290630103919, -81.84549245154561],
          ),
      },
      "B39": {
          "range": "1880MHz - 1920MHz",
          "lte_frequency": 1890,
          "nr_frequency": 1890,
          "lte_band": 39,
          "nr_band": 39,
          "rf_mode": "tdd",
          "tx_interpolation_coefficients": (
            [-0.008712931375092506, 2.1973585140044642, -94.29420762479742],
            [-0.0022523817802900985, 1.2674016231310092, -66.57165215468584],
          ),
      },
      "B40": {
          "range": "2300MHz - 2400MHz",
          "lte_frequency": 2350,
          "nr_frequency": 2350,
          "lte_band": 40,
          "nr_band": 40,
          "rf_mode": "tdd",
          "tx_interpolation_coefficients": (
            None,
            [-0.0016475305254340404, 1.1580162105112186, -62.10679297527826],
          ),
      },
      "B41": {
          "range": "2496MHz - 2690MHz",
          "lte_frequency": 2593,
          "nr_frequency": 2593,
          "lte_band": 41,
          "nr_band": 41,
          "rf_mode": "tdd",
          "tx_interpolation_coefficients": (
            None,
            None,
          ),
      },
      "B42": {
          "range": "3400MHz - 3600MHz",
          "lte_frequency": 3500,
          "nr_frequency": 3489.420,
          "lte_band": 42,
          "nr_band": 78,
          "rf_mode": "tdd",
          "tx_interpolation_coefficients": (
            [-0.014198126839751619, 2.980758813262773, -125.25800492285738],
            [0.003977721774394756, 0.527208191717173, -42.761142655285376],
          ),
      },
      "B43": {
          "range": "3600MHz - 3800MHz",
          "lte_frequency": 3700,
          "nr_frequency": 3699.990,
          "lte_band": 43,
          "nr_band": 78,
          "rf_mode": "tdd",
          "tx_interpolation_coefficients": (
            [-0.014198126839751619, 2.980758813262773, -125.25800492285738],
            [-0.0036530114002551943, 1.510856844601873, -74.58790185136355],
          ),
      },
      "N77": {
          "range": "3800MHz - 4000MHz",
          "lte_frequency": 0,
          "nr_frequency": 3900,
          "lte_band": 0,
          "nr_band": 77,
          "rf_mode": "tdd",
          "tx_interpolation_coefficients": (
            None,
            [-0.003358281211508112, 1.4533760798172672, -70.18774498873421],
          ),
      },
      "N79": {
          "range": "4600MHz - 5000MHz",
          "lte_frequency": 0,
          "nr_frequency": 4800,
          "lte_band": 0,
          "nr_band": 79,
          "rf_mode": "tdd",
          "tx_interpolation_coefficients": (
            None,
            [-0.004745509248998074, 1.659474968728413, -76.46937551110834],
          ),
      },
      "UNKNOWN": {
          "range": "Information not available for this band",
          "lte_frequency": 0,
          "nr_frequency": 0,
          "lte_band": 0,
          "nr_band": 0,
          "rf_mode": "tdd",
          "tx_interpolation_coefficients": (
            None,
            None,
          ),
      },
  }
  # Utility functions
  def dbm_to_gain(coefficients, x):
    if not coefficients:
      return None
    a, b, c = coefficients
    return (2 * (x - c)) / (math.sqrt(b**2 - 4 * a * (c - x)) + b)
  def gain_to_dbm(coefficients, x):
    if not coefficients:
      return None
    a, b, c = coefficients
    return a * x**2 + b * x + c
  def print_dbm(power_dbm):
    power_mw = 10 ** ( power_dbm / 10 )
    if power_mw < 0.01:
      power_w_s = "{:0.2f} ÂµW".format(power_mw * 1000)
    else:
      power_w_s = "{:0.2f} mW".format(power_mw)
    return "{:0.2f} dBm ({})".format(power_dbm, power_w_s)
  def to_int(x):
    try:
      return int(x, 16 if x.startswith('0x') else 10)
    except ValueError:
      return 0
  def get_sdr_info(opt):
    if config.get('testing', False):
      return {'t': 'TDD', 'b': 'B39', 'v': '4.2', 's': 'B0'}[opt]
    try:
      return subprocess.check_output(
        ["sudo", "-n", o['sdr-dir'] + "/get-sdr-info", "-" + opt]
      ).decode()
    except subprocess.CalledProcessError as e:
      return None

  # eNB and gNB defaults
  # TODO automatically load ORS/enb and ORS/gnb defaults from JSON schema #}
  for k,v in DEFAULTS[o['enb-mode']].items():
    o[k] = v
  
  for c in "vtb":
    s = get_sdr_info(c)
    if s == None:
      return
    k = {'v': 'version', 't': 'tdd', 'b': 'model'}[c]
    o[k] = s
  o['version'] = float(o['version']) if o['version'] != 'UNKNOWN' else 0
  o['one_watt'] = bool(o['version'] >= 4)
  
  power = "2x{}W".format(1 if o['one_watt'] else 0.5)
  tdd = o['tdd']
  model = o['model']
  o['ors_version'] = "{} {} {}".format(tdd, model, power)
  
  # RF parameters
  model = o['model']
  ors_version = int(o['one_watt'])

  band = config.get(rat + '_band', DEFAULTS[model][rat + '_band'])
  arfcn_n = 'dl_' + ('e' if lte else 'nr_')   + 'arfcn'
  if config.get(arfcn_n, ''):
    arfcn = config[arfcn_n]
    if lte:
      frequency = earfcn.frequency(arfcn)
      band      = earfcn.band(lte_arfcn)[0].band
    else:
      frequency = nrarfcn.frequency(arfcn)
  else:
    frequency = config.get('dl_frequency', DEFAULTS[model][rat + '_frequency'])
    if rat == 'lte':
      arfcn = earfcn.earfcn(frequency, band)
    else:
      arfcn = nrarfcn.nrarfcn(frequency, nearby=True)
  if nr:
    if config.get('ssb_nr_arfcn', ''):
      o['ssb_nr_arfcn'] = config.get('ssb_nr_arfcn')
    else:
      for j in range(10):
        try:
          _arfcn = arfcn + (j+1) // 2 * ((j % 2) * 2 - 1)
          o['ssb_nr_arfcn'], _ = nrarfcn.dl2ssb(_arfcn, band)
        except KeyError as e:
          continue
        arfcn = _arfcn
        frequency = nrarfcn.frequency(arfcn)
        break
  o['dl_frequency'] = frequency
  o[rat + '_band'  ] = band
  o['band_cn'     ] = ('b' if lte else 'n') + str(band)
  o[arfcn_n                ] = arfcn

  default_rf_mode = DEFAULTS[model]['rf_mode']
  default_rx_gain = DEFAULTS['*']['rx_gain']

  if config.get('tx_gain', ''):
    tx_gain = config['tx_gain']
    tx_power_dbm = gain_to_dbm(DEFAULTS[model]['tx_interpolation_coefficients'][ors_version], tx_gain)
  else:
    tx_power_dbm = config.get('tx_power_dbm', DEFAULTS['*']['tx_power_dbm'])
    tx_gain = dbm_to_gain(DEFAULTS[model]['tx_interpolation_coefficients'][ors_version], tx_power_dbm)
  
  if tx_gain == None:
    tx_gain    = 0
    tx_power_s = "Radio board unknown, please set tx_gain manually"
  elif tx_power_dbm == None:
    tx_power_s = "Radio board unknown, cannot predict output power"
  else:
    tx_power_s = print_dbm(tx_power_dbm)
  
  o.update({
    'range'   : DEFAULTS[model]['range'],
    'tx_power': tx_power_s,
    'tx_gain' : tx_gain,
    'rx_gain' : config.get('rx_gain', default_rx_gain      ),
    'rf_mode' : config.get('rf_mode', default_rf_mode      ),
  })
  
  # Radio ID's
  try:
    hn = socket.gethostname()
    sn = int(hn.split("ors")[1])
  except (IndexError, ValueError):
    sn = 0
  o.update({
    'serial_number':             sn,
    'enb_id':                   "0x{:05X}".format( sn          % 2**20),
    'gnb_id':                   "0x{:05X}".format((sn + 2**19) % 2**20),
    'pci':                       sn        % (504 * (nr+1)),
    'root_sequence_index':       sn        % 138,
    'cell_id':                  "0x{:02X}".format((sn        + 2**7 * nr)   % 2**8),
    'gnb_id_bits': 28,
  })
  
  f = lambda x,y,n: "0x{:07X}".format(to_int(x) * 2**n + to_int(y))
  
  o.update({
    'eutra_cell_id':      f(o['enb_id'], o['cell_id']     , 8),
    'nr_cell_id':         f(o['gnb_id'], o['cell_id']     , 36 - o['gnb_id_bits']),
  })

  for s in o:
    o[s] = config.get(s, o[s])
  
