# instance-ors-enb translates ORS enb/gnb into generic enb with 1 SDR RU and 1 CELL.

{#- enb_mode indicates with which mode ors' enb is instantiated with - enb | gnb #}
{%- set enb_mode = slap_configuration['slap-software-type'] %}
{%- do assert(enb_mode in ('enb', 'gnb'), enb_mode) %}

{#- make real ru/cell/peer/... shared instances to be rejected in ORS mode #}
{%- set ishared_list = slap_configuration.setdefault('slave-instance-list', [])  %}
{%- for ishared in ishared_list %}
{%-   set _ = json_module.loads(ishared['_']) %}
{%-   if 'ru_type' in _  or  'cell_type' in _ %}
{%-     do ishared.update({'_': {'REJECT': 1}|tojson})  %}
{%-   endif %}
{%- endfor  %}


{#- inject ru+cell synthesized from ORS-specific parameters #}
{%- macro iref(name)  %}
{{-   '%s.%s' % (slap_configuration['instance-title'], name)  -}}
{%- endmacro  %}
{%- if slapparameter_dict.ors_duo_mode == 'Single Cell MIMO 4x4' and (slapparameter_dict.n_antenna_ul > 2 or slapparameter_dict.n_antenna_dl > 2) %}
{%-   set sdr_dev_list = [0, 1] %}
{%- else %}
{%-   set sdr_dev_list = [0] %}
{%- endif %}
{%- do ishared_list.append({
      'slave_title':      iref('SDR0'),
      'slave_reference':  False,
      '_': {
        'ru_type':      'sdr',
        'ru_link_type': 'sdr',
        'sdr_dev_list': sdr_dev_list,
        'n_antenna_dl': slapparameter_dict.n_antenna_dl,
        'n_antenna_ul': slapparameter_dict.n_antenna_ul,
        'tx_gain':      slapparameter_dict.cell1.tx_gain,
        'tx_power_offset':      slapparameter_dict.cell1.tx_power_offset,
        'rx_gain':      slapparameter_dict.cell1.rx_gain,
        'txrx_active':  'ACTIVE'  if (not slapparameter_dict.disable_sdr)  else  'INACTIVE',
      } |tojson
    })
%}
{%- if slapparameter_dict.ors_duo_mode == 'Carrier Aggregation' %}
{%- do ishared_list.append({
      'slave_title':      iref('SDR1'),
      'slave_reference':  False,
      '_': {
        'ru_type':      'sdr',
        'ru_link_type': 'sdr',
        'sdr_dev_list': [1],
        'n_antenna_dl': slapparameter_dict.n_antenna_dl,
        'n_antenna_ul': slapparameter_dict.n_antenna_ul,
        'tx_gain':      slapparameter_dict.cell2.tx_gain,
        'rx_gain':      slapparameter_dict.cell2.rx_gain,
        'tx_power_offset':      slapparameter_dict.cell2.tx_power_offset,
        'txrx_active':  'ACTIVE'  if (not slapparameter_dict.disable_sdr)  else  'INACTIVE',
      } |tojson
    })
%}
{%- endif %}

{%- if enb_mode == 'enb' %}
{%-   set cell1 = {
        'cell_type':            'lte',
        'dl_earfcn':            slapparameter_dict.cell1.dl_earfcn,
        'bandwidth':            float(slapparameter_dict.cell1.bandwidth.removesuffix(' MHz')),
        'tac':                  slapparameter_dict.cell1.tac,
        'root_sequence_index':  slapparameter_dict.cell1.root_sequence_index,
      }
%}
{%- if slapparameter_dict.ors_duo_mode == 'Carrier Aggregation' and out_params.max_antenna >= 4 %}
{%-     set cell2 = {
          'cell_type':            'lte',
          'dl_earfcn':            slapparameter_dict.cell2.dl_earfcn,
          'bandwidth':            float(slapparameter_dict.cell2.bandwidth.removesuffix(' MHz')),
          'tac':                  slapparameter_dict.cell2.tac,
          'root_sequence_index':  slapparameter_dict.cell2.root_sequence_index,
        }
%}
{%-   endif %}
{%- elif enb_mode == 'gnb' %}
{%-   set cell1 = {
        'cell_type':            'nr',
        'nr_band':              slapparameter_dict.cell1.nr_band,
        'dl_nr_arfcn':          slapparameter_dict.cell1.dl_nr_arfcn,
        'bandwidth':            slapparameter_dict.cell1.nr_bandwidth,
        'ssb_pos_bitmap':       slapparameter_dict.cell1.ssb_pos_bitmap,
        'root_sequence_index':  slapparameter_dict.cell1.root_sequence_index,
      }
%}
{%- if slapparameter_dict.ors_duo_mode == 'Carrier Aggregation' and out_params.max_antenna >= 4 %}
{%-     set cell2 = {
          'cell_type':            'nr',
          'nr_band':              slapparameter_dict.cell2.nr_band,
          'dl_nr_arfcn':          slapparameter_dict.cell2.dl_nr_arfcn,
          'bandwidth':            slapparameter_dict.cell2.nr_bandwidth,
          'ssb_pos_bitmap':       slapparameter_dict.cell2.ssb_pos_bitmap,
          'root_sequence_index':  slapparameter_dict.cell2.root_sequence_index,
        }
%}
{%-   endif %}
{%- endif %}

{%- do cell1.update({
      'cell_kind':  'enb',
      'rf_mode':    slapparameter_dict.cell1.rf_mode,
      'pci':        slapparameter_dict.cell1.pci,
      'cell_id':    slapparameter_dict.cell1.cell_id,
      'tdd_ul_dl_config': slapparameter_dict.cell1.tdd_ul_dl_config,
      'inactivity_timer': slapparameter_dict.inactivity_timer,
      'cipher_algo_pref': slapparameter_dict.cell1.cipher_algo_pref,
      'integ_algo_pref': slapparameter_dict.cell1.integ_algo_pref,

      'ru': { 'ru_type':  'ru_ref',
              'ru_ref':   iref('SDR0') }
    })
%}
{%- if slapparameter_dict.ors_duo_mode == 'Carrier Aggregation' and out_params.max_antenna >= 4 %}
{%-   do cell2.update({
        'cell_kind':  'enb',
        'rf_mode':          slapparameter_dict.cell2.rf_mode,
        'pci':              slapparameter_dict.cell2.pci,
        'cell_id':          slapparameter_dict.cell2.cell_id,
        'tdd_ul_dl_config': slapparameter_dict.cell2.tdd_ul_dl_config,
        'inactivity_timer': slapparameter_dict.inactivity_timer,
        'cipher_algo_pref': slapparameter_dict.cell2.cipher_algo_pref,
        'integ_algo_pref': slapparameter_dict.cell2.integ_algo_pref,

        'ru': { 'ru_type':  'ru_ref',
                'ru_ref':   iref('SDR1') }
      })
%}
{%- endif %}

{%- do ishared_list.append({
      'slave_title':      iref('CELL'),
      'slave_reference':  False,
      '_': cell1 | tojson
    })
%}
{%- if slapparameter_dict.ors_duo_mode == 'Carrier Aggregation' and out_params.max_antenna >= 4 %}
{%-   do ishared_list.append({
        'slave_title':      iref('CELLCA'),
        'slave_reference':  False,
        '_': cell2 | tojson
      })
%}
{%- endif %}


{#- inject synthesized peer cells #}
{%- for ncell in slapparameter_dict.ncell_list %}
{%-   do ishared_list.append({
        'slave_title':      '%s%s' % (iref('PEERCELL'), ncell.name),
        'slave_reference':  False,
        '_': ncell | tojson
      })
%}
{%- endfor %}


{#- inject synthesized peers #}
{%- if enb_mode == 'lte' %}
{%-   for peer in slapparameter_dict.x2_peers %}
{%-     do ishared_list.append({
          'slave_title':      '%s%s' % (iref('X2_PEER'), peer.name),
          'slave_reference':  False,
          '_': {
            'peer_type':  'nr',
            'x2_addr':    peer.x2_addr,
          } | tojson
        })
%}
{%-   endfor  %}
{%- elif enb_mode == 'nr' %}
{%-   for peer in slapparameter_dict.xn_peers %}
{%-     do ishared_list.append({
          'slave_title':      '%s%s' % (iref('XN_PEER'), peer.name),
          'slave_reference':  False,
          '_': {
            'peer_type':  'nr',
            'xn_addr':    peer.xn_addr
          } | tojson
        })
%}
{%-   endfor  %}
{%- endif %}


{#- gnb: plmn_list -> plmn_list_5g #}
{%- if enb_mode == 'gnb'  %}
{%-   set _ = slapparameter_dict  %}
{%-   do _.update({'plmn_list_5g': _.plmn_list})  %}
{%-   do _.pop('plmn_list') %}
{%- endif %}


{#- backward compatibility: if ORS is running in gnb mode, and gnb_* parameters
    are present, replace their generic enb_* counterparts with gnb_* ones #}
{%- if enb_mode == 'gnb'  %}
{%-   set _ = slapparameter_dict  %}
{%-   if 'gnb_stats_fetch_period' in _  %}
{%-     do _.update({'enb_stats_fetch_period': _.gnb_stats_fetch_period}) %}
{%-   endif %}
{%-   if 'gnb_drb_stats_enabled' in _  %}
{%-     do _.update({'enb_drb_stats_enabled':  _.gnb_drb_stats_enabled}) %}
{%-   endif %}
{%- endif %}


# code of generic enb
{%  include 'instance-enb-base.jinja2.cfg' %}


# let all templates know we are running in ORS mode
[config-base]
context -=
   json ors false
context +=
   key ors :ors
ors = {{ dumps(slapparameter_dict) }}


# add ORS-specific bits to published information
[publish-connection-information]
ors-hardware.version = {{ out_params.ors_version }}
ors.neighbour-cell-list = {{ out_params.ncell_list_cn }}
ors.plmn-list = {{ out_params.plmn_list_cn }}
{%- if enb_mode == "enb" %}
ors-id.enb-id = {{ slapparameter_dict.enb_id }}
ors.core-network-list = {{ out_params.mme_list_cn }}
{%- else %}
ors-id.gnb-id = {{ slapparameter_dict.gnb_id }} ({{ slapparameter_dict.gnb_id_bits }} bits)
ors.core-network-list = {{ out_params.amf_list_cn }}
{%- endif %}
{%- if out_params.max_antenna == 2 and slapparameter_dict.ors_duo_mode == 'Carrier Aggregation' %}
error = Carrier Aggregation is enabled but only 1 SDR board is available
{%- endif %}
{%- if out_params.max_antenna == 2 or slapparameter_dict.ors_duo_mode != 'Carrier Aggregation' %}
ors-hardware.frequency-range-rating = {{ out_params.cell1.range }}
ors-power.tx-power                  = {{ out_params.cell1.tx_power }}
ors-power.rx-gain                   = {{ slapparameter_dict.cell1.rx_gain }}
ors.root-sequence-index             = {{ slapparameter_dict.cell1.root_sequence_index }}
ors-id.cell-id                      = {{ slapparameter_dict.cell1.cell_id }}
ors-id.physical-cell-id             = {{ slapparameter_dict.cell1.pci }}
ors.tdd_ul_dl_config                = {{ slapparameter_dict.cell1.tdd_ul_dl_config }}
ors.band                            = {{ out_params.cell1.band_cn }}
ors.dl-frequency                    = {{ out_params.cell1.dl_frequency }} MHz
{%- if enb_mode == "enb" %}
ors.bandwidth        = {{ slapparameter_dict.cell1.bandwidth }}
ors-id.eutra-cell-id = {{ out_params.cell1.eutra_cell_id }}
ors.dl-earfcn        = {{ slapparameter_dict.cell1.dl_earfcn }}
ors.ul-earfcn        = {{ slapparameter_dict.cell1.ul_earfcn }}
ors.tac              = {{ slapparameter_dict.cell1.tac }}
{%- else %}
ors.bandwidth     = {{ slapparameter_dict.cell1.nr_bandwidth }} MHz
ors-id.nr-cell-id = {{ out_params.cell1.nr_cell_id }}
ors.dl-nr-arfcn   = {{ slapparameter_dict.cell1.dl_nr_arfcn }}
ors.ul-nr-arfcn   = {{ slapparameter_dict.cell1.ul_nr_arfcn }}
ors.ssb-nr-arfcn  = {{ slapparameter_dict.cell1.ssb_nr_arfcn }}
{%- endif %}
{%- else %}
ors-hardware.frequency-range-rating = {{ out_params.cell1.range }} / {{ out_params.cell2.range }}
ors-power.tx-power                  = {{ out_params.cell1.tx_power }} / {{ out_params.cell2.tx_power }}
ors-power.rx-gain                   = {{ slapparameter_dict.cell1.rx_gain }} / {{ slapparameter_dict.cell2.rx_gain }}
ors.root-sequence-index             = {{ slapparameter_dict.cell1.root_sequence_index }} / {{ slapparameter_dict.cell2.root_sequence_index }}
ors-id.cell-id                      = {{ slapparameter_dict.cell1.cell_id }} / {{ slapparameter_dict.cell2.cell_id }}
ors-id.physical-cell-id             = {{ slapparameter_dict.cell1.pci }} / {{ slapparameter_dict.cell2.pci }}
ors.tdd_ul_dl_config.cell1          = {{ slapparameter_dict.cell1.tdd_ul_dl_config }}
ors.tdd_ul_dl_config.cell2          = {{ slapparameter_dict.cell2.tdd_ul_dl_config }}
ors.band                            = {{ out_params.cell1.band_cn }} / {{ out_params.cell2.band_cn }}
ors.dl-frequency                       = {{ out_params.cell1.dl_frequency }} MHz / {{ out_params.cell2.dl_frequency }} MHz
ors.ul-frequency                       = {{ out_params.cell1.ul_frequency }} MHz / {{ out_params.cell2.ul_frequency }} MHz
{%- if enb_mode == "enb" %}
ors.bandwidth        = {{ slapparameter_dict.cell1.bandwidth }} / {{ slapparameter_dict.cell2.bandwidth }}
ors-id.eutra-cell-id = {{ out_params.cell1.eutra_cell_id }} / {{ out_params.cell2.eutra_cell_id }}
ors.dl-earfcn        = {{ slapparameter_dict.cell1.dl_earfcn }} / {{ slapparameter_dict.cell2.dl_earfcn }}
ors.ul-earfcn        = {{ slapparameter_dict.cell1.ul_earfcn }} / {{ slapparameter_dict.cell2.ul_earfcn }}
ors.tac              = {{ slapparameter_dict.cell1.tac }} / {{ slapparameter_dict.cell2.tac }}
{%- else %}
ors.bandwidth        = {{ slapparameter_dict.cell1.nr_bandwidth }} MHz + {{ slapparameter_dict.cell2.nr_bandwidth }} MHz
ors-id.nr-cell-id = {{ out_params.cell1.nr_cell_id }} / {{ out_params.cell2.nr_cell_id }}
ors.dl-nr-arfcn   = {{ slapparameter_dict.cell1.dl_nr_arfcn }} / {{ slapparameter_dict.cell2.dl_nr_arfcn }}
ors.ul-nr-arfcn   = {{ slapparameter_dict.cell1.ul_nr_arfcn }} / {{ slapparameter_dict.cell2.ul_nr_arfcn }}
ors.ssb-nr-arfcn  = {{ slapparameter_dict.cell1.ssb_nr_arfcn }} / {{ slapparameter_dict.cell2.ssb_nr_arfcn }}
{%- endif %}
{%- endif %}

# hide ru-list, cell-list, peer-list and peer-cell-list from published information
[publish-connection-information]
depends += ${publish-connection-information-ors-cleanup:recipe}
[publish-connection-information-ors-cleanup]
recipe = slapos.recipe.build
init =
  publish = self.buildout['publish-connection-information']
  del publish['ru-list']
  del publish['cell-list']
  del publish['peer-list']
  del publish['peer-cell-list']
  del publish['depends']
  del publish['monitor-base-url']

# Add custom promise to check if /dev/sdr0 is busy
[check-frequency-outofbounds.py]
<= macro.promise
promise = check_frequency_outofbounds
config-frequency    = {{ out_params.cell1.dl_frequency }}
config-range-rating = {{ out_params.cell1.range }}

{%- if slapparameter_dict.ors_duo_mode == 'Carrier Aggregation' and out_params.max_antenna >= 4 %}
# Add custom promise to check if /dev/sdr1 is busy
[check-frequency-outofbounds-sdr1.py]
<= macro.promise
promise = check_frequency_outofbounds
config-frequency    = {{ out_params.cell2.dl_frequency }}
config-range-rating = {{ out_params.cell2.range }}
{%- endif %}

[buildout]
extra-parts +=
  check-frequency-outofbounds.py
{%- if slapparameter_dict.ors_duo_mode == 'Carrier Aggregation' and out_params.max_antenna >= 4 %}
  check-frequency-outofbounds-sdr1.py
{%- endif %}
