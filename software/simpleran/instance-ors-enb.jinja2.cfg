# instance-ors-enb translates ORS enb/gnb into generic enb with 1 SDR RU and 1 CELL.

{#- enb_mode indicates with which mode ors' enb is instantiated with - enb | gnb #}
{%- set enb_mode = slap_configuration['slap-software-type'] %}
{%- do assert(enb_mode in ('enb', 'gnb'), enb_mode) %}

# code of generic enb
{%  include 'instance-enb-base.jinja2.cfg' %}

# let all templates know we are running in ORS mode
[config-base]
context -=
   json ors false
context +=
   key ors :ors
ors = {{ dumps(slapparameter_dict) }}


# add ORS-specific bits to published information
[publish-connection-information]
ors-hardware.version = {{ out_params.ors_version }}
ors.neighbour-cell-list = {{ out_params.ncell_list_cn }}
ors.plmn-list = {{ out_params.plmn_list_cn }}
{%- if enb_mode == "enb" %}
ors-id.enb-id = {{ slapparameter_dict.enb_id }}
ors.core-network-list = {{ out_params.mme_list_cn }}
{%- else %}
ors-id.gnb-id = {{ slapparameter_dict.gnb_id }} ({{ slapparameter_dict.gnb_id_bits }} bits)
ors.core-network-list = {{ out_params.amf_list_cn }}
{%- endif %}
{%- if slapparameter_dict.cell1.enable_cell and not slapparameter_dict.cell2.enable_cell %}
ors-hardware.frequency-range-rating = {{ out_params.cell1.range }}
ors-power.tx-power                  = {{ out_params.cell1.tx_power }}
ors-power.tx-power-offset           = {{ slapparameter_dict.cell1.tx_power_offset }}
ors-power.rx-gain                   = {{ slapparameter_dict.cell1.rx_gain }}
ors.root-sequence-index             = {{ slapparameter_dict.cell1.root_sequence_index }}
ors-id.cell-id                      = {{ slapparameter_dict.cell1.cell_id }}
ors-id.physical-cell-id             = {{ slapparameter_dict.cell1.pci }}
ors.tdd_ul_dl_config                = {{ slapparameter_dict.cell1.tdd_ul_dl_config }}
ors.band                            = {{ out_params.cell1.band_cn }}
ors.dl-frequency                    = {{ out_params.cell1.dl_frequency }} MHz
{%- if enb_mode == "enb" %}
ors.bandwidth        = {{ slapparameter_dict.cell1.bandwidth }}
ors-id.eutra-cell-id = {{ out_params.cell1.eutra_cell_id }}
ors.dl-earfcn        = {{ slapparameter_dict.cell1.dl_earfcn }}
ors.ul-earfcn        = {{ slapparameter_dict.cell1.ul_earfcn }}
ors.tac              = {{ slapparameter_dict.cell1.tac }}
{%- else %}
ors.bandwidth     = {{ slapparameter_dict.cell1.nr_bandwidth }} MHz
ors-id.nr-cell-id = {{ out_params.cell1.nr_cell_id }}
ors.dl-nr-arfcn   = {{ slapparameter_dict.cell1.dl_nr_arfcn }}
ors.ul-nr-arfcn   = {{ slapparameter_dict.cell1.ul_nr_arfcn }}
ors.ssb-nr-arfcn  = {{ slapparameter_dict.cell1.ssb_nr_arfcn }}
{%- endif %}
{%- elif not slapparameter_dict.cell1.enable_cell and slapparameter_dict.cell2.enable_cell %}
ors-hardware.frequency-range-rating = {{ out_params.cell2.range }}
ors-power.tx-power                  = {{ out_params.cell2.tx_power }}
ors-power.tx-power-offset           = {{ slapparameter_dict.cell2.tx_power_offset }}
ors-power.rx-gain                   = {{ slapparameter_dict.cell2.rx_gain }}
ors.root-sequence-index             = {{ slapparameter_dict.cell2.root_sequence_index }}
ors-id.cell-id                      = {{ slapparameter_dict.cell2.cell_id }}
ors-id.physical-cell-id             = {{ slapparameter_dict.cell2.pci }}
ors.tdd_ul_dl_config                = {{ slapparameter_dict.cell2.tdd_ul_dl_config }}
ors.band                            = {{ out_params.cell2.band_cn }}
ors.dl-frequency                    = {{ out_params.cell2.dl_frequency }} MHz
{%- if enb_mode == "enb" %}
ors.bandwidth        = {{ slapparameter_dict.cell2.bandwidth }}
ors-id.eutra-cell-id = {{ out_params.cell2.eutra_cell_id }}
ors.dl-earfcn        = {{ slapparameter_dict.cell2.dl_earfcn }}
ors.ul-earfcn        = {{ slapparameter_dict.cell2.ul_earfcn }}
ors.tac              = {{ slapparameter_dict.cell2.tac }}
{%- else %}
ors.bandwidth     = {{ slapparameter_dict.cell2.nr_bandwidth }} MHz
ors-id.nr-cell-id = {{ out_params.cell2.nr_cell_id }}
ors.dl-nr-arfcn   = {{ slapparameter_dict.cell2.dl_nr_arfcn }}
ors.ul-nr-arfcn   = {{ slapparameter_dict.cell2.ul_nr_arfcn }}
ors.ssb-nr-arfcn  = {{ slapparameter_dict.cell2.ssb_nr_arfcn }}
{%- endif %}
{%- elif slapparameter_dict.cell1.enable_cell and slapparameter_dict.cell2.enable_cell %}
ors-hardware.frequency-range-rating = {{ out_params.cell1.range }} / {{ out_params.cell2.range }}
ors-power.tx-power                  = {{ out_params.cell1.tx_power }} / {{ out_params.cell2.tx_power }}
ors-power.tx-power-offset           = {{ slapparameter_dict.cell1.tx_power_offset }} / {{ slapparameter_dict.cell2.tx_power_offset }}
ors-power.rx-gain                   = {{ slapparameter_dict.cell1.rx_gain }} / {{ slapparameter_dict.cell2.rx_gain }}
ors.root-sequence-index             = {{ slapparameter_dict.cell1.root_sequence_index }} / {{ slapparameter_dict.cell2.root_sequence_index }}
ors-id.cell-id                      = {{ slapparameter_dict.cell1.cell_id }} / {{ slapparameter_dict.cell2.cell_id }}
ors-id.physical-cell-id             = {{ slapparameter_dict.cell1.pci }} / {{ slapparameter_dict.cell2.pci }}
ors.tdd_ul_dl_config.cell1          = {{ slapparameter_dict.cell1.tdd_ul_dl_config }}
ors.tdd_ul_dl_config.cell2          = {{ slapparameter_dict.cell2.tdd_ul_dl_config }}
ors.band                            = {{ out_params.cell1.band_cn }} / {{ out_params.cell2.band_cn }}
ors.dl-frequency                       = {{ out_params.cell1.dl_frequency }} MHz / {{ out_params.cell2.dl_frequency }} MHz
ors.ul-frequency                       = {{ out_params.cell1.ul_frequency }} MHz / {{ out_params.cell2.ul_frequency }} MHz
{%- if enb_mode == "enb" %}
ors.bandwidth        = {{ slapparameter_dict.cell1.bandwidth }} / {{ slapparameter_dict.cell2.bandwidth }}
ors-id.eutra-cell-id = {{ out_params.cell1.eutra_cell_id }} / {{ out_params.cell2.eutra_cell_id }}
ors.dl-earfcn        = {{ slapparameter_dict.cell1.dl_earfcn }} / {{ slapparameter_dict.cell2.dl_earfcn }}
ors.ul-earfcn        = {{ slapparameter_dict.cell1.ul_earfcn }} / {{ slapparameter_dict.cell2.ul_earfcn }}
ors.tac              = {{ slapparameter_dict.cell1.tac }} / {{ slapparameter_dict.cell2.tac }}
{%- else %}
ors.bandwidth        = {{ slapparameter_dict.cell1.nr_bandwidth }} MHz + {{ slapparameter_dict.cell2.nr_bandwidth }} MHz
ors-id.nr-cell-id = {{ out_params.cell1.nr_cell_id }} / {{ out_params.cell2.nr_cell_id }}
ors.dl-nr-arfcn   = {{ slapparameter_dict.cell1.dl_nr_arfcn }} / {{ slapparameter_dict.cell2.dl_nr_arfcn }}
ors.ul-nr-arfcn   = {{ slapparameter_dict.cell1.ul_nr_arfcn }} / {{ slapparameter_dict.cell2.ul_nr_arfcn }}
ors.ssb-nr-arfcn  = {{ slapparameter_dict.cell1.ssb_nr_arfcn }} / {{ slapparameter_dict.cell2.ssb_nr_arfcn }}
{%- endif %}
{%- endif %}

# hide ru-list, cell-list, peer-list and peer-cell-list from published information
[publish-connection-information]
depends += ${publish-connection-information-ors-cleanup:recipe}
[publish-connection-information-ors-cleanup]
recipe = slapos.recipe.build
init =
  publish = self.buildout['publish-connection-information']
  del publish['ru-list']
  del publish['cell-list']
  del publish['peer-list']
  del publish['peer-cell-list']
  del publish['depends']
  del publish['monitor-base-url']

{%- if slapparameter_dict.cell1.enable_cell %}
# Add custom promise to check if /dev/sdr0 is busy
[check-frequency-outofbounds.py]
<= macro.promise
promise = check_frequency_outofbounds
config-frequency    = {{ out_params.cell1.dl_frequency }}
config-range-rating = {{ out_params.cell1.range }}
{%- endif %}

{%- if slapparameter_dict.cell2.enable_cell %}
# Add custom promise to check if /dev/sdr1 is busy
[check-frequency-outofbounds-sdr1.py]
<= macro.promise
promise = check_frequency_outofbounds
config-frequency    = {{ out_params.cell2.dl_frequency }}
config-range-rating = {{ out_params.cell2.range }}
{%- endif %}

[buildout]
extra-parts +=
{%- if slapparameter_dict.cell1.enable_cell %}
  check-frequency-outofbounds.py
{%- endif %}
{%- if slapparameter_dict.cell2.enable_cell %}
  check-frequency-outofbounds-sdr1.py
{%- endif %}
