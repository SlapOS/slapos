#!{{directory}}/bin/{{ python }}

from ZODB import DB
from BTrees.OOBTree import OOBTree
from neo.client.Storage import Storage
from neo.lib import logging
from time import sleep
import argparse
import json
import transaction
import hashlib

def main():
  parser = argparse.ArgumentParser(
        description="Save a dict on NEO Storage",
        )
  _ = parser.add_argument
  _('--ca', help="Path to the ca.crt file.")
  _('--key', help="Path to the neo.crt file.")
  _('--cert', help="Path to the neo.crt file.")
  _('--ue_db', help="Path to the ue_db file.")
  _('--master', help="Address to a NEO Master Node.",
     default='[2001:67c:1254:e:ad::a164]:2051')
  _('--log', help="Path to the log file.", 
     default="x.log")
  _('--name', help="Name of the Database to store the json.",
     default='simcarddb')
  _('-v', '--verbose', action='store_true', 
                       help="Show the results on stdout.")

  config = parser.parse_args()

  logging.backlog(max_size=None, max_packet=None) # log everything & without bufferring

  kw= {
   'master_nodes':     config.master,       # M on webr-wneo-2
   'name':             config.name, #'simcarddb',
   #'read_only':        True,

   'logfile':  config.log,

   'ca': config.ca,
   'cert': config.cert,
   'key': config.key
  }

  stor = Storage(**kw)
  db = DB(stor)
  conn = db.open()
  root = conn.root()

  try:
    tree = root["v1"]
  except KeyError:
    root["v1"] = OOBTree()
    root["v1"].update({"index": "NOT_SET_YET"})

  try:
    with open(config.ue_db + '.index', "r") as f:
      index = f.read()
  
  except (ValueError, IOError):
    # File don't exist yet
    index = ""

  if index == root["v1"]['index']:
    print "Nothing to do"
    return  

  ue_db = []

  for ek in root["v1"]["json"]:
    sim_entry = "\n"
    entry = root["v1"]["json"][ek]
    for k in ["sim_algo", "imsi", "opc",
              "amf", "sqn", "K", "impu", "impi"]:

      value = entry.get(k, None)
      if value is not None:
        if "[" in value:
          sim_entry += '    %s: %s,\n' % (k, value)
        else:
          sim_entry += '    %s: "%s",\n' % (k, value)
    if sim_entry != "\n":
      ue_db.append(sim_entry)

  output_db = """ue_db: [{ %s }]
""" % ('},{'.join(ue_db))

  with open(config.ue_db, "w") as f:
    f.write(output_db)
  
  with open(config.ue_db + '.index', "w") as f:
    f.write(root["v1"]['index'])
  
  print "Updated to %s." % root["v1"]['index']

if __name__ == '__main__':
  main()
