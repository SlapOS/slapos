#
# Deploy EPC instance
#
[buildout]
parts =
  directory
#  publish-connection-parameter
  ltelogs
  lte-mme-config
  lte-mme-service
  monitor-base
  publish-connection-information


extends = {{ monitor_template }}

eggs-directory = {{ eggs_directory }}
develop-eggs-directory = {{ develop_eggs_directory }}
offline = true

[instance]
recipe = slapos.cookbook:slapconfiguration.serialised
computer = {{ slap_connection['computer-id'] }}
partition = {{ slap_connection['partition-id'] }}
url = {{ slap_connection['server-url'] }}
key = {{ slap_connection['key-file'] }}
cert = {{ slap_connection['cert-file'] }}

configuration.network_name = VIFIB
configuration.domain = vifib.com

# Identifier of frequency and band is given by one number (e.g. 3200 for 2600Mhz band 7)
#configuration.frequency = 2600
#configuration.band = 7

configuration.log_size = 50M

configuration.mme_ws_port = 9000
configuration.mbms_ws_port= 9001
configuration.enb_ws_port = 9002
configuration.ims_ws_port = 9003

configuration.mme_addr = 127.0.1.100
configuration.ims_addr = 127.0.0.1
configuration.ims_bind = 127.0.0.2
configuration.mbms_addr = 127.0.2.1
configuration.mbms_bind = 127.0.1.200

configuration.enb_addr = 127.0.1.1

configuration.mbms_multicast_addr = 225.1.0.1
configuration.mbms_multicast_port = 7053

configuration.rf_driver = sdr
configuration.rf_driver_number = 0

#tun-ipv4-network = 172.0.0.0/8 
#tun-ipv4-addr = 172.0.0.1
#tun-name = tunabc

[directory]
recipe = slapos.cookbook:mkdirectory
software = {{ buildout_directory }}
home = ${buildout:directory}
etc = ${:home}/etc
var = ${:home}/var
etc = ${:home}/etc
bin = ${:home}/bin
run = ${:var}/run
script = ${:etc}/run
service = ${:etc}/service
promise = ${:etc}/promise
log = ${:var}/log

[ltelogs]
recipe = slapos.recipe.template:jinja2
template = {{ ltelogs_template }}
rendered = ${directory:home}/ltelogs.sh
mode = 0775
extensions = jinja2.ext.do
context =
  section directory directory


### MME
[lte-mme-service]
recipe = slapos.cookbook:wrapper
init = ${ltelogs:rendered} ${directory:log}/mme.log
command-line = {{ mme }}/ltemme ${directory:etc}/mme.cfg
wrapper-path = ${directory:service}/lte-mme
mode = 0775
pidfile = ${directory:run}/mme.pid
{% if slapparameter_dict.get("license_key_path", None) %}
environment_amarisoft = AMARISOFT_PATH={{ slapparameter_dict.get("license_key_path", None) }}
{% else %}
environment_amarisoft =
{% endif %}
environment =
  LD_LIBRARY_PATH={{ openssl_location }}/lib:{{ nghttp2_location }}/lib
  ${:environment_amarisoft} 

[neouedb]
recipe = slapos.cookbook:wrapper
command-line = {{ ue_db_py }}
wrapper-path = ${directory:bin}/neouedb
mode = 0775
pidfile = ${directory:run}/neouedb.pid

### EMPTY mme-ifup script
[lte-mme-ifup-empty]
recipe = slapos.cookbook:wrapper
wrapper-path = ${directory:bin}/mme-ifup-empty
command-line = echo Using interface
mode = 775

[config-base]
recipe = slapos.recipe.template:jinja2
mode = 0664
extensions = jinja2.ext.do
context =
  section directory directory
  section instance instance
  key slapparameter_dict instance:configuration
  import  netaddr netaddr

[lte-mme-config]
<= config-base
template = {{ mme_template }}
rendered = ${directory:etc}/mme.cfg
context =
  section directory directory
  section instance instance
  key slapparameter_dict instance:configuration
  import  netaddr netaddr
  key ifup_empty lte-mme-ifup-empty:wrapper-path

[publish-connection-information]
recipe = slapos.cookbook:publish.serialised

{% if slapparameter_dict.get("monitor-password", None) %}
monitor-base-url = ${monitor-instance-parameter:monitor-base-url}
{% else %}
monitor-setup-url = https://monitor.app.officejs.com/#page=settings_configurator&url=${monitor-publish-parameters:monitor-url}&username=${monitor-publish-parameters:monitor-user}&password=${monitor-publish-parameters:monitor-password}
{% endif %}

{% if slapparameter_dict.get("monitor-password", None) %}
[monitor-instance-parameter]
monitor-title = {{ slapparameter_dict['name'] }}
password = {{ slapparameter_dict['monitor-password'] }}
{% endif %}
