[buildout]

eggs-directory = {{ eggs_directory }}
develop-eggs-directory = {{ develop_eggs_directory }}
offline = true

parts +=
  kvm-disk-image-corruption-promise

# Here, we don't need KVM to run to import data, so we don't
# even extend the kvm instance profile.
extends =
  {{ pbsready_import_template }}

[slap-parameter]
{% for k, v in slapparameter_dict.items() -%}
{%-  if k == 'namebase' %}
{{ k }} = {{ v }}
{%-  else %}
{{ k }} = {{ dumps(v) }}
{%-  endif %}
{% endfor -%}

[resilient-publish-connection-parameter]
monitor-base-url = ${monitor-publish-parameters:monitor-base-url}
monitor-url = ${monitor-publish-parameters:monitor-url}
monitor-user = ${monitor-publish-parameters:monitor-user}
monitor-password = ${monitor-publish-parameters:monitor-password}

[monitor-instance-parameter]
monitor-httpd-port = 8276
monitor-title = {{ slapparameter_dict.get('name', 'Kvm Resilient clone') }}
cors-domains = {{ slapparameter_dict.get('monitor-cors-domains', '') }}
{%   if slapparameter_dict.get('monitor-username', '') -%}
username = {{ slapparameter_dict['monitor-username'] }}
{%   endif -%}
{%   if slapparameter_dict.get('monitor-password', '') -%}
password = {{ slapparameter_dict['monitor-password'] }}
{%   endif -%}
instance-configuration =
  raw takeover-url ${resilient-publish-connection-parameter:takeover-url}
  raw takeover-password ${resilient-publish-connection-parameter:takeover-password}

[directory]
recipe = slapos.cookbook:mkdirectory
etc = ${buildout:directory}/etc
bin = ${buildout:directory}/bin
srv = ${buildout:directory}/srv
var = ${buildout:directory}/var
log = ${:var}/log
tmp = ${buildout:directory}/tmp
scripts = ${:etc}/run
services = ${:etc}/service
novnc-conf = ${:etc}/novnc
run = ${:var}/run
ca-dir = ${:srv}/ssl
cron-entries = ${:etc}/cron.d
crontabs = ${:etc}/crontabs
cronstamps = ${:etc}/cronstamps

[importer]
recipe = slapos.recipe.template:jinja2
url = {{ template_kvm_import }}
output = ${directory:bin}/${slap-parameter:namebase}-importer
# Resilient stack wants a "wrapper" parameter
wrapper = ${:output}
context =
    section directory directory
    raw qmprestore {{ qmprestore }}
    raw backup_signature {{ backup_signature }}

[kvm-disk-image-corruption-bin]
recipe = slapos.recipe.template:jinja2
url = {{ disk_image_corruption }}
qemu_img_path = {{ qemu_location }}/bin/qemu-img
disk_path = ${directory:srv}/virtual.qcow2
# force empty disk device
disk_device_path =
context =
  key disk_device_path :disk_device_path
  key qemu_img_path :qemu_img_path
  key disk_path :disk_path
output = ${directory:bin}/kvm-disk-image-corruption
mode = 700

[kvm-disk-image-corruption-promise]
# Check that disk image is not corrupted
<= monitor-promise-base
promise = check_command_execute
name = kvm-disk-image-corruption.py
config-command = ${kvm-disk-image-corruption-bin:output}
