[buildout]
extends = {{ software_parameter_dict['profile_common'] }}

parts =
  software-py
  switch-softwaretype

[software-py]
recipe = software

[jinja2-template-base]
recipe = slapos.recipe.template:jinja2
output = ${buildout:directory}/${:filename}
extensions = jinja2.ext.do
extra-context =
context =
    import json_module json
    section instance_parameter_dict slap-configuration
    section software_parameter_dict software-parameter-section
    ${:extra-context}
caucase-jinja2-library = {{ software_parameter_dict['caucase_jinja2_library'] }}
import-list =
  file caucase :caucase-jinja2-library

[switch-softwaretype]
recipe = slapos.cookbook:switch-softwaretype
default = dynamic-profile-master:output
RootSoftwareInstance = ${:default}
custom-personal = dynamic-profile-master:output
single-default = dynamic-profile-frontend:output
single-custom-personal = dynamic-profile-frontend:output
replicate = dynamic-profile-master:output
kedifa = dynamic-profile-kedifa:output

[software-parameter-section]
{% for key,value in software_parameter_dict.items() %}
{{ key }} = {{ dumps(value) }}
{% endfor -%}

[schema-json-to-default]
recipe = slapos.recipe.build
init =
  import json
  default_dict = dict()
  with open(options['input']) as fh:
    input_json = json.load(fh)
  for property, value_dict in input_json['properties'].items():
    if 'default' in value_dict:
      if value_dict['default'] in ['false', 'true']:
        # input schema json type is mostly incorrect, so guess the most
        # important boolean type
        default_dict[property] = value_dict['default'] == 'true'
      else:
        default_dict[property] = value_dict['default']
    else:
      default_dict[property] = None
  options['defaults'] = default_dict

[instance-slave-default]
<= schema-json-to-default
input = {{ software_parameter_dict['instance_slave_input_schema'] }}

[instance-default]
<= schema-json-to-default
input = {{ software_parameter_dict['instance_input_schema'] }}

[dynamic-profile-frontend]
< = jinja2-template-base
url = {{ software_parameter_dict['profile_frontend'] }}
filename = instance-frontend.cfg
extra-context =
  import furl_module furl
  raw software_type single-custom-personal
  key SLAVE_DEFAULTS instance-slave-default:defaults

[dynamic-profile-master]
< = jinja2-template-base
depends = ${software-py:recipe}
url = {{ software_parameter_dict['profile_master'] }}
filename = instance-master.cfg
extra-context =
    import subprocess_module subprocess
    import functools_module functools
    import operator_module operator
    import validators_module validators
    import software_module software
    key CLUSTER_DEFAULTS instance-default:defaults
    key SLAVE_DEFAULTS instance-slave-default:defaults

[dynamic-profile-kedifa]
< = jinja2-template-base
url = {{ software_parameter_dict['profile_kedifa'] }}
filename = instance-kedifa.cfg
extra-context =
  raw software_type kedifa

[slap-configuration]
# Fetches parameters defined in SlapOS Master for this instance.
# Always the same.
recipe = slapos.cookbook:slapconfiguration.serialised
computer = ${slap-connection:computer-id}
partition = ${slap-connection:partition-id}
url = ${slap-connection:server-url}
key = ${slap-connection:key-file}
cert = ${slap-connection:cert-file}
