{%- if configuration['http3-enable'] == 'True' %}
{%-   set HTTP3 = True %}
{%- else %}
{%-   set HTTP3 = False %}
{%- endif %}
global
  pidfile {{ configuration['pid-file'] }}
  # master-worker is compatible with foreground with process management
  master-worker
  expose-experimental-directives
  tune.http.logurilen 16384
  log {{ configuration['log-socket'] }} len 65535 local0

defaults
  mode http
  log global
  log-format "%{+E}o {{ '{' }}%b{{ '}' }} %ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq!!!%ci - %[capture.req.hdr(0)] [%trl] \"%HM %[capture.req.uri] %HV\" %ST %B \"%[capture.req.hdr(1)]\" \"%[capture.req.hdr(2)]\" %Ta"
  timeout queue 60s
  timeout server {{ configuration['request-timeout'] }}s
  timeout client {{ configuration['request-timeout'] }}s
  timeout connect 2s
  retries 3
  timeout tunnel 1h
  default-server init-addr last,libc,none

{%- set SCHEME_PREFIX_MAPPING = { 'http': 'backend-http-info', 'https': 'backend-https-info'} %}

{%- macro frontend_entry(slave_reference, hostname, scheme) %}
{%-   if hostname.startswith('*') %}
{%-     set matcher = hostname[2:] %}
{%-   else %}
{%-     set matcher = '^' ~ hostname %}
{%-   endif %}
  use_backend {{ slave_reference }}-{{ scheme }} if { req.hdr(host),host_only -m reg {{ matcher }}$ }
{%- endmacro %}

{%- macro frontend_common() %}
  # normalize URIs as it's expected by the backends
  http-request normalize-uri path-merge-slashes
  http-request normalize-uri path-strip-dot
  http-request normalize-uri path-strip-dotdot
  # Combined Log Format
  capture request header REMOTE_USER len 255
  capture request header Referer len 255
  capture request header User-Agent len 255
  # setup Via
  http-request add-header Via "%HV rapid-cdn-frontend-{{ configuration['node-id'] }}-{{ configuration['version-hash'] }}"
  # setup X-Forwarded-For
  http-request set-header X-Forwarded-For "%ci"
{%- endmacro %}
frontend http-frontend
  bind {{ configuration['local-ipv4'] }}:{{ configuration['http-port'] }}
  bind {{ configuration['global-ipv6'] }}:{{ configuration['http-port'] }}
{{ frontend_common() }}
{%- for entry in frontend_slave_order | sort(attribute="index,hostname", reverse=True) %}
{{- frontend_entry(entry['slave_reference'], entry['hostname'], 'http') -}}
{%- endfor %}
  default_backend BACKEND_NOT_FOUND

frontend https-frontend
  bind {{ configuration['local-ipv4'] }}:{{ configuration['https-port'] }} ssl crt-list {{ crt_list }}
  bind {{ configuration['global-ipv6'] }}:{{ configuration['https-port'] }} ssl crt-list {{ crt_list }}
{%- if HTTP3 %}
  bind quic4@{{ configuration['local-ipv4'] }}:{{ configuration['https-port'] }} ssl crt-list {{ crt_list }} alpn h3
  bind quic6@{{ configuration['global-ipv6'] }}:{{ configuration['https-port'] }} ssl crt-list {{ crt_list }} alpn h3
{%- endif %}
{{ frontend_common() }}
{%- for entry in frontend_slave_order | sort(attribute="index,hostname", reverse=True) %}
{{- frontend_entry(entry['slave_reference'], entry['hostname'], 'https') -}}
{%- endfor %}
  default_backend BACKEND_NOT_FOUND

# Backends
{%- for slave_reference in sorted(frontend_slave_dict) %}
{%-   set slave_instance = frontend_slave_dict[slave_reference] %}
{%-   for (scheme, prefix) in SCHEME_PREFIX_MAPPING.items() %}
{%-     set info_dict = slave_instance.get(prefix, slave_instance.get('backend-http-info')) %}
backend {{ slave_instance['slave_reference'] }}-{{ scheme }}
{%-     if HTTP3 and slave_instance['enable-http3'] %}
  http-after-response set-header alt-svc "h3=\":{{ configuration['http3-port'] }}\"; ma=3600"
  {#- Ask Chromium to use HTTP3 #}
  http-after-response set-header alternate-protocol {{ configuration['http3-port'] }}:quic
{%-     endif %}
{%-     if scheme == 'http' and slave_instance['https-only'] %}
{#-     Support https-only if connected via http #}
  redirect scheme https code 302
{%-     else %}
{%-       if 'hostname' in info_dict and 'port' in info_dict %}
{%-         if slave_instance['type'] == 'redirect' %}
{%-           if (info_dict['scheme'] == 'https' and info_dict['port'] == 443) or (info_dict['scheme'] == 'http' and info_dict['port'] == 80) %}
{%-             set port_suffix = '' %}
{%-           else %}
{%-             set port_suffix = ':%s' % (info_dict['port'],) %}
{%-           endif %}
  redirect prefix {{ info_dict['scheme'] }}://{{ info_dict['hostname'] }}{{ port_suffix }} code 302
{%-         else %}
  server {{ slave_instance['slave_reference'] }}-backend-{{ scheme }} {{ info_dict['hostname'] }}:{{ info_dict['port'] }}
{%-           if slave_instance['disable-via-header'] %}
  http-after-response del-header Via
{%-           else %}
  http-after-response add-header Via "%HV rapid-cdn-frontend-{{ configuration['node-id'] }}-{{ configuration['version-hash'] }}"
{%-           endif %}
{%-           if scheme == 'https' %}
{%-             if slave_instance['strict-transport-security'] > 0 %}
{%-               set strict_transport_security = ['max-age=%i' % (slave_instance['strict-transport-security'],)] %}
{%-               if slave_instance['strict-transport-security-sub-domains'] %}
{%-                 do strict_transport_security.append('; includeSubDomains') %}
{%-               endif %}
{%-               if slave_instance['strict-transport-security-preload'] %}
{%-                 do strict_transport_security.append('; preload') %}
{%-               endif %}
  http-after-response set-header Strict-Transport-Security "{{ ''.join(strict_transport_security) }}"
{%-             endif %}
{%-           endif %}
{%-           for disabled_cookie in slave_instance['disabled-cookie-list'] %}
  http-request replace-header Cookie (.*)(^{{ disabled_cookie | replace('%', '%%') }}=[^;]*;\ |;\ {{ disabled_cookie }}=[^;]*|^{{ disabled_cookie }}=[^;]*$)(.*) \1\3
{%-           endfor %}
{%-           if slave_instance['disable-no-cache-request'] %}
  http-request del-header Cache-Control
  http-request del-header Pragma
{%-           endif %}
{%-           if slave_instance['prefer-gzip-encoding-to-backend'] %}
  http-request set-header Accept-Encoding gzip if { hdr(Accept-Encoding) -m sub gzip }
{%-           endif %}
{%-           if slave_instance['type'] == 'notebook' %}
{#-             In haproxy world type:notebook is simple type:websocket with default parameters #}
{%-             do slave_instance.__setitem__('type', 'websocket') %}
{%-             do slave_instance.__setitem__('websocket-path-list', None) %}
{%-             do slave_instance.__setitem__('websocket-transparent', True) %}
{%-           endif %}
{%-           if slave_instance['type'] == 'websocket' %}
{%-             if slave_instance['websocket-path-list'] %}
{%-               set acl_entry = ['acl is_websocket '] %}
{%-               for path in slave_instance['websocket-path-list'] %}
{%-                 do acl_entry.append('path -i -m beg /%s || ' % (path.replace('%', '%%'),)) %}
{%-               endfor %}
{%-               do acl_entry.append('always_false') %}
  {{ ''.join(acl_entry) }}
{%-             else %}
  acl is_websocket always_true
{%-             endif %}
  http-request set-header X-Forwarded-Proto {{ scheme }} if !is_websocket
  http-request set-header X-Forwarded-Port {{ configuration[scheme + '-port'] }} if !is_websocket
{%-             if slave_instance['websocket-transparent'] %}
  http-request set-header X-Real-Ip "%ci" if is_websocket
  http-request set-header X-Forwarded-Proto {{ scheme }} if is_websocket
  http-request set-header X-Forwarded-Port {{ configuration[scheme + '-port'] }} if is_websocket
{%-             else %}
{#-               Pass-thourgh: X-Forwarded-Proto, X-Forwarded-Port #}
{%-             endif %}
{%-           else %}
  http-request set-header X-Forwarded-Proto {{ scheme }}
  http-request set-header X-Forwarded-Port {{ configuration[scheme + '-port'] }}
{%-           endif %} {# if slave_instance['type'] == 'websocket' #}
{%-           if slave_instance['type'] == 'zope' %}
{%-             if slave_instance['default-path'] %}
  http-request redirect location {{ scheme}}://%[hdr(host)]/{{ slave_instance['default-path'] | replace('%', '%%') }} code 301 if { path / }
{%-               set not_path_acl = 'if ! { path / }' %}
{%-             else %}
{%-               set not_path_acl = '' %}
{%-             endif %}
{%-             if slave_instance['path'].strip().strip('/') %}
{%-               set zope_path = slave_instance['path'].strip().strip('/').replace('%', '%%') ~ '/' %}
{%-             else %}
{%-               set zope_path = '' %}
{%-             endif %}
  http-request set-path /VirtualHostBase/{{ scheme }}/%[req.hdr(Host),field(1,:)]:{{ slave_instance['virtualhostroot-%s-port' % (scheme,)] }}/{{ zope_path }}VirtualHostRoot%[path] {{ not_path_acl }}
{%-           endif %}
{%-           if info_dict['path'] %}
  http-request set-path {{ info_dict['path'] }}%[path]
{%-           endif %} {# if info_dict['path'] #}
{%-         endif %} {# if slave_instance['type'] == 'redirect' #}
{%-       endif %} {# if 'hostname' in info_dict and 'port' in info_dict #}
{%-     endif %} {# if scheme == 'http' and slave_instance['https-only'] #}
{%-   endfor %} {# for (scheme, prefix) in SCHEME_PREFIX_MAPPING.items() #}
{%- endfor %} {# for slave_reference in sorted(frontend_slave_dict) #}

backend BACKEND_NOT_FOUND
  {#- a bit hacky but working way to provide default CDN's 404 #}
  {#- inspired by https://sleeplessbeastie.eu/2020/05/11/how-to-serve-single-file-using-haproxy/ #}
  http-request set-log-level silent
  errorfile 503 {{ configuration['not-found-file'] }}

{# END OF FILE #}
