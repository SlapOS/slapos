{%- import "caucase" as CAUCASE with context %}
{#- BEGIN: Definition of global variables of the profile #}
{%- set NAME_BASE = 'caddy-frontend' %} {#- Hardcoded name of the requested frontend node. Attention: Changing it will result with requesting new nodes. #}
{%- set TRUE_VALUES = ['y', 'yes', '1', 'true'] -%}
{%- set GOOD_CIPHER_LIST = [
  'ECDHE-ECDSA-AES256-GCM-SHA384',
  'ECDHE-RSA-AES256-GCM-SHA384',
  'ECDHE-ECDSA-AES128-GCM-SHA256',
  'ECDHE-RSA-AES128-GCM-SHA256',
] %}
{%- set CIPHER_TRANSLATION_DICT = {
  'ECDHE-ECDSA-WITH-CHACHA20-POLY1305': 'ECDHE-ECDSA-CHACHA20-POLY1305',
  'ECDHE-RSA-WITH-CHACHA20-POLY1305': 'ECDHE-RSA-CHACHA20-POLY1305',
  'ECDHE-RSA-AES256-CBC-SHA': 'ECDHE-RSA-AES256-SHA',
  'ECDHE-RSA-AES128-CBC-SHA': 'ECDHE-RSA-AES128-SHA',
  'ECDHE-ECDSA-AES256-CBC-SHA': 'ECDHE-ECDSA-AES256-SHA',
  'ECDHE-ECDSA-AES128-CBC-SHA': 'ECDHE-ECDSA-AES128-SHA',
  'RSA-AES256-CBC-SHA': 'AES256-SHA',
  'RSA-AES128-CBC-SHA': 'AES128-SHA',
  'ECDHE-RSA-3DES-EDE-CBC-SHA': 'ECDHE-RSA-DES-CBC3-SHA',
  'RSA-3DES-EDE-CBC-SHA': 'DES-CBC3-SHA'
} %}
{%- for key, value in CIPHER_TRANSLATION_DICT.items() %}
{%-   do GOOD_CIPHER_LIST.append(value) %}
{%- endfor %}
{%- set FRONTEND_PARAMETER_DICT = {
  'apache-certificate': instance_parameter_dict['configuration'].get('apache-certificate', CLUSTER_DEFAULTS['apache-certificate']),
  'apache-key': instance_parameter_dict['configuration'].get('apache-key', CLUSTER_DEFAULTS['apache-key']),
  'authenticate-to-backend': instance_parameter_dict['configuration'].get('authenticate-to-backend', CLUSTER_DEFAULTS['authenticate-to-backend']),
  'backend-connect-retries': instance_parameter_dict['configuration'].get('backend-connect-retries', CLUSTER_DEFAULTS['backend-connect-retries']),
  'backend-connect-timeout': instance_parameter_dict['configuration'].get('backend-connect-timeout', CLUSTER_DEFAULTS['backend-connect-timeout']),
  'ciphers': instance_parameter_dict['configuration'].get('ciphers', CLUSTER_DEFAULTS['ciphers']),
  'domain': instance_parameter_dict['configuration'].get('domain', CLUSTER_DEFAULTS['domain']),
  'enable-http2-by-default': instance_parameter_dict['configuration'].get('enable-http2-by-default', CLUSTER_DEFAULTS['enable-http2-by-default']),
  're6st-verification-url': instance_parameter_dict['configuration'].get('re6st-verification-url', CLUSTER_DEFAULTS['re6st-verification-url']),
  'rotate-num': instance_parameter_dict['configuration'].get('rotate-num', 4000),
}
%}
{#- SlapOS Master (but not slapproxy!) merges slave's instance and connection parameters, so the slave information passed to nodes have to be limited only to instance related keys #}
{#- Note: As a result, this feature is very hard to be tested with slapproxy, as it does not pollute the slave information, this kind of whitelist is implemented #}
{%- set FRONTEND_NODE_SLAVE_PASSED_KEY_LIST_SCHEMA = list(SLAVE_DEFAULTS.keys()) %}
{%- set FRONTEND_NODE_SLAVE_PASSED_KEY_LIST_INTERNAL = [
      'slave_reference',
    ]
%}
{%- set FRONTEND_NODE_SLAVE_PASSED_KEY_LIST = FRONTEND_NODE_SLAVE_PASSED_KEY_LIST_SCHEMA + FRONTEND_NODE_SLAVE_PASSED_KEY_LIST_INTERNAL %}
{%- set AIKC_ENABLED = instance_parameter_dict['configuration'].get('automatic-internal-kedifa-caucase-csr', CLUSTER_DEFAULTS['automatic-internal-kedifa-caucase-csr'] | string).lower() in TRUE_VALUES %}
{%- set AIBCC_ENABLED = instance_parameter_dict['configuration'].get('automatic-internal-backend-client-caucase-csr', CLUSTER_DEFAULTS['automatic-internal-backend-client-caucase-csr'] | string).lower() in TRUE_VALUES %}
{#- Ports 8401, 8402 and 8410+1..N are reserved for monitor ports on various partitions #}
{%- set MASTER_PARTITION_MONITOR_HTTPD_PORT = 8401 %}
{%- set KEDIFA_PARTITION_MONITOR_HTTPD_PORT = 8402 %}
{%- set FRONTEND_MONITOR_HTTPD_PORT = 8410 %}
{%- set CAUCASE_NETLOC = '[' ~ instance_parameter_dict['ipv6-random'] ~ ']' ~ ':' ~ instance_parameter_dict['configuration'].get('caucase_backend_client_port', '8990') %}
{%- set CAUCASE_URL = 'http://' ~ CAUCASE_NETLOC %}
[jinja2-template-base]
recipe = slapos.recipe.template:jinja2
output = ${buildout:directory}/${:filename}
extra-context =
context =
    import json_module json
    raw profile_common {{ software_parameter_dict['profile_common'] }}
    ${:extra-context}

{%- set POPEN_FUNCTION = functools_module.partial(subprocess_module.Popen, stdout=subprocess_module.PIPE, stderr=subprocess_module.STDOUT, stdin=subprocess_module.PIPE) %}
{%- set PART_LIST = [] %}
{%- set FRONTEND_LIST = [] %}
{%- set FRONTEND_SECTION_LIST = [] %}
{%- set REQUEST_DICT = {} %}
{#- # XXX Dirty hack, not possible to define default value before #}
{%- if not '-sla-1-computer_guid' in instance_parameter_dict['configuration'] %}
{%-   do instance_parameter_dict['configuration'].__setitem__('-sla-1-computer_guid', '${slap-connection:computer-id}') %}
{%- endif %}
{%- if not '-sla-kedifa-computer_guid' in instance_parameter_dict['configuration'] %}
{%-   do instance_parameter_dict['configuration'].__setitem__('-sla-kedifa-computer_guid', '${slap-connection:computer-id}') %}
{%- endif %}

{#- Here we request individually each frontend.
    The presence of sla parameters is checked and added if found #}
{%- set NODE_SPECIFIC_PARAMETER_DICT = {
  'backend-haproxy-http-port': 21080,
  'backend-haproxy-https-port': 21443,
  'backend-haproxy-statistic-port': 21444,
  'disk-cache-size': CLUSTER_DEFAULTS['disk-cache-size'],
  'enable-http3': CLUSTER_DEFAULTS['enable-http3'],
  'http3-port': CLUSTER_DEFAULTS['http3-port'],
  'plain_http_port': CLUSTER_DEFAULTS['plain_http_port'],
  'port': CLUSTER_DEFAULTS['port'],
  'ram-cache-size': CLUSTER_DEFAULTS['ram-cache-size'],
  'request-timeout': CLUSTER_DEFAULTS['request-timeout'],
  'slave-introspection-https-port': 22443,
} %}
{%- set AUTHORIZED_SLAVE_LIST = [] %}
{%- set REJECTED_SLAVE_DICT = {} %}
{%- set CRITICAL_REJECTED_SLAVE_DICT = {} %}
{%- set WARNING_SLAVE_DICT = {} %}
{%- set USED_HOST_LIST = [] %}
{#- END: Definition of global variables of the profile #}
{#- BEGIN: REQUEST_DICT preparation #}
{%- for i in range(1, (instance_parameter_dict['configuration'].pop('-frontend-quantity', CLUSTER_DEFAULTS['-frontend-quantity']) | int) + 1) %}
{%-   set frontend_name = "%s-%s" % (NAME_BASE, i) %}
{%-   set request_section_title = 'request-%s' % frontend_name %}
{%-   set sla_key = "-sla-%s-" % i %}
{%-   set sla_key_length = sla_key | length %}
{%-   set sla_dict = {} %}
{%-   set config_key = "-frontend-config-%s-" % i %}
{%-   set config_key_length = config_key | length %}
{%-   set config_dict = {} %}
{%-   for key in list(instance_parameter_dict['configuration'].keys()) %}
{%-     if key.startswith(sla_key) %}
{%-       do sla_dict.__setitem__(key[sla_key_length:], instance_parameter_dict['configuration'].pop(key)) %}
{#- We check for specific configuration regarding the frontend #}
{%-     elif key.startswith(config_key) %}
{%-       set node_config_key = key[config_key_length:] %}
{%-       if node_config_key in NODE_SPECIFIC_PARAMETER_DICT.keys() %}
{%-         do config_dict.__setitem__(node_config_key, instance_parameter_dict['configuration'].pop(key) or instance_parameter_dict['configuration'].get(node_config_key) or NODE_SPECIFIC_PARAMETER_DICT[node_config_key]) %}
{%-       else %}
{%-         do config_dict.__setitem__(node_config_key, instance_parameter_dict['configuration'].pop(key)) %}
{%-       endif %}
{%-     endif %}
{%-   endfor %}
{%-   for node_config_key in NODE_SPECIFIC_PARAMETER_DICT.keys() %}
{%-     if node_config_key not in config_dict %}
{%-       do config_dict.__setitem__(node_config_key, instance_parameter_dict['configuration'].get(node_config_key) or NODE_SPECIFIC_PARAMETER_DICT[node_config_key]) %}
{%-     endif %}
{%-   endfor %}
{%-   do config_dict.__setitem__('monitor-httpd-port', FRONTEND_MONITOR_HTTPD_PORT + i) %}
{%-   do config_dict.__setitem__('backend-client-caucase-url', CAUCASE_URL) %}
{%-   set state_key = "-frontend-%s-state" % i %}
{%-   set frontend_state = instance_parameter_dict['configuration'].pop(state_key, None) %}
{%-   if frontend_state != 'destroyed' %}
{%-     do FRONTEND_LIST.append(frontend_name) %}
{%-     do FRONTEND_SECTION_LIST.append(request_section_title) %}
{%-   endif %}
{%-   do PART_LIST.append(request_section_title) %}
{#- Filling request dict for slave #}
{%-   set request_content_dict = {
                                  'config': config_dict,
                                  'name': frontend_name,
                                  'sla': sla_dict,
                                  'state': frontend_state
                                  } %}
{%-   set frontend_software_url_key = "-frontend-%s-software-release-url" % i %}
{%-   do request_content_dict.__setitem__('software-url', instance_parameter_dict['configuration'].get(frontend_software_url_key) or '${slap-connection:software-release-url}') %}
{%-   do REQUEST_DICT.__setitem__(request_section_title, request_content_dict) %}
{%- endfor %}
{#- END: REQUEST_DICT preparation#}

{#- BEGIN: Slave processing #}
{%- for slave in sorted(instance_parameter_dict['slave-instance-list'], key=operator_module.itemgetter('slave_reference')) %}
{%-   set slave_error_list = [] %}
{%-   set slave_critical_error_list = [] %}
{%-   set slave_warning_list = [] %}
{%-   set slave_server_alias_unclashed = [] %}
{%-   set slave_type = slave.get('type') %}
{%-   if slave_type not in [None, '', 'default', 'zope', 'redirect', 'notebook', 'websocket'] %}
{%-     do slave_error_list.append('type:%s is not supported' % (slave_type,)) %}
{%-   endif %}
{#-   Check health-check-* #}
{%-   set health_check = (str(slave.get('health-check', False)) or SLAVE_DEFAULTS['health-check']).lower() %}
{%-   if health_check in TRUE_VALUES %}
{%-     set health_check_http_method = slave.get('health-check-http-method') or SLAVE_DEFAULTS['health-check-http-method'] %}
{%-     if health_check_http_method not in ['GET', 'OPTIONS', 'CONNECT', 'POST'] %}
{%-       do slave_error_list.append('Wrong health-check-http-method %s' % (health_check_http_method,)) %}
{%-     endif %}
{%-     set health_check_http_path = slave.get('health-check-http-path') or SLAVE_DEFAULTS['health-check-http-path'] %}
{%-     set health_check_http_version = slave.get('health-check-http-version') or SLAVE_DEFAULTS['health-check-http-version'] %}
{%-     if health_check_http_version not in ['HTTP/1.1', 'HTTP/1.0'] %}
{%-       do slave_error_list.append('Wrong health-check-http-version %s' % (health_check_http_version,)) %}
{%-     endif %}
{%-     set health_check_timeout = (slave.get('health-check-timeout') or SLAVE_DEFAULTS['health-check-timeout']) | int(false) %}
{%-     if health_check_timeout is false or health_check_timeout <= 0 %}
{%-       do slave_error_list.append('Wrong health-check-timeout %s' % (slave.get('health-check-timeout'),)) %}
{%-     endif %}
{%-     set health_check_interval = (slave.get('health-check-interval') or SLAVE_DEFAULTS['health-check-interval']) | int(false) %}
{%-     if health_check_interval is false or health_check_interval <= 0 %}
{%-       do slave_error_list.append('Wrong health-check-interval %s' % (slave.get('health-check-interval'),)) %}
{%-     endif %}
{%-     set health_check_rise = (slave.get('health-check-rise') or SLAVE_DEFAULTS['health-check-rise']) | int(false) %}
{%-     if health_check_rise is false or health_check_rise <= 0 %}
{%-       do slave_error_list.append('Wrong health-check-rise %s' % (slave.get('health-check-rise'),)) %}
{%-     endif %}
{%-     set health_check_fall = (slave.get('health-check-fall') or SLAVE_DEFAULTS['health-check-fall']) | int(false) %}
{%-     if health_check_fall is false or health_check_fall <= 0 %}
{%-       do slave_error_list.append('Wrong health-check-fall %s' % (slave.get('health-check-fall'),)) %}
{%-     endif %}
{%-   endif %}
{#-   Check virtualhostroot-http-port and virtualhostroot-https-port #}
{%-   for key in ['virtualhostroot-http-port', 'virtualhostroot-https-port'] %}
{%-     set value = (slave.get(key) or SLAVE_DEFAULTS[key]) | int(false) %}
{%-     if value is false or value < 0 %}
{%-       do slave_error_list.append('Wrong %s %r' % (key, slave.get(key))) %}
{%-     endif %}
{%-   endfor %}
{#-   Check ciphers #}
{%-   set slave_cipher_list = (slave.get('ciphers') or '').strip().split() %}
{%-   if len(slave_cipher_list) > 0 %}
{%-     for cipher in slave_cipher_list %}
{%-       if cipher not in GOOD_CIPHER_LIST %}
{%-         if cipher in CIPHER_TRANSLATION_DICT %}
{#-           Real translation happens in instance-slave-list.cfg.in #}
{%-           do slave_warning_list.append('Cipher %r translated to %r' % (cipher, CIPHER_TRANSLATION_DICT[cipher])) %}
{%-         else %}
{%-           do slave_error_list.append('Cipher %r is not supported.' % (cipher,)) %}
{%-         endif %}
{%-       endif %}
{%-     endfor %}
{%-   endif %}
{#-   Check strict-transport-security #}
{%-     set strict_transport_security = (slave.get('strict-transport-security') or SLAVE_DEFAULTS['strict-transport-security']) | int(false) %}
{%-     if strict_transport_security is false or strict_transport_security < 0 %}
{%-       do slave_error_list.append('Wrong strict-transport-security %s' % (slave.get('strict-transport-security'),)) %}
{%-     endif %}
{%-   set custom_domain = slave.get('custom_domain') %}
{%-   if custom_domain and custom_domain in USED_HOST_LIST %}
{%-      set message = 'custom_domain %r clashes' % (custom_domain,) %}
{%-      do slave_error_list.append(message) %}
{%-      do slave_critical_error_list.append(message) %}
{%-   else %}
{%-      do USED_HOST_LIST.append(custom_domain) %}
{%-   endif %}
{%-   if slave.get('server-alias') %}
{%-     for slave_alias in ('' ~ slave['server-alias']).split() %}
{%-       if slave_alias.startswith('*.') %}
{%-         set clean_slave_alias = slave_alias[2:] %}
{%-       else %}
{%-         set clean_slave_alias = slave_alias %}
{%-       endif %}
{%-       if not validators_module.domain(clean_slave_alias) %}
{%-         do slave_error_list.append('server-alias \'%s\' not valid' % (slave_alias,)) %}
{%-       else %}
{%-         if slave_alias in slave_server_alias_unclashed or slave_alias == custom_domain %}
{#-           optionally do something about reporting back that server-alias has been unclashed #}
{%-         elif slave_alias in USED_HOST_LIST %}
{%-           set message = 'server-alias \'%s\' clashes' % (slave_alias,) %}
{%-           do slave_error_list.append(message) %}
{%-           do slave_critical_error_list.append(message) %}
{%-         else %}
{%-           do slave_server_alias_unclashed.append(slave_alias) %}
{%-           do USED_HOST_LIST.append(slave_alias) %}
{%-         endif %}
{%-       endif %}
{%-     endfor %}
{%-     do slave.__setitem__('server-alias', ' '.join(slave_server_alias_unclashed)) %}
{%-   endif %}
{%-   for url_key in ['url', 'https-url', 'health-check-failover-url', 'health-check-failover-https-url'] %}
{%-     if url_key in slave %}
{%-       set url = ('' ~ slave[url_key] or '').strip() %}
{%-       if not validators_module.url(url) %}
{%-         do slave_error_list.append('slave %s %r invalid' % (url_key, url)) %}
{%-       elif url != slave[url_key] %}
{%-         do slave_warning_list.append('slave %s %r has been converted to %r' % (url_key, slave[url_key], url)) %}
{%-       endif %}
{%-     endif %}
{%-   endfor %}
{%-   for url_key in ['url-netloc-list', 'https-url-netloc-list', 'health-check-failover-url-netloc-list'] %}
{%-     if url_key in slave %}
{%-       for netloc in slave[url_key].split() %}
{%-         if not software_module.validate_netloc(netloc) %}
{%-           do slave_error_list.append('slave %s %r invalid' % (url_key, netloc)) %}
{%-         endif %}
{%-       endfor %}
{%-     endif %}
{%-   endfor %}
{%-   for k in ['ssl_proxy_ca_crt', 'health-check-failover-ssl-proxy-ca-crt'] %}
{%-     if k in slave %}
{%-       set crt = ('' ~ slave.get(k) or '') %}
{%-       set check_popen = POPEN_FUNCTION([software_parameter_dict['openssl'], 'x509', '-noout']) %}
{%-       do check_popen.communicate(crt.encode()) %}
{%-       if check_popen.returncode != 0 %}
{%-         do slave_error_list.append('%s is invalid' % (k,)) %}
{%-       endif %}
{%-     endif %}
{%-   endfor %}
{#- BBB: SlapOS Master non-zero knowledge BEGIN #}
{%-   for key in ['ssl_key', 'ssl_crt', 'ssl_ca_crt'] %}
{%-     if key in slave %}
{%-       do slave_warning_list.append('%s is obsolete, please use key-upload-url' % (key,)) %}
{%-     endif %}
{%-   endfor %}
{%-   if slave.get('ssl_ca_crt') and not (slave.get('ssl_crt') and slave.get('ssl_key')) %}
{%-     do slave_error_list.append('ssl_ca_crt is present, so ssl_crt and ssl_key are required')  %}
{%-   endif %}
{%-   if slave.get('ssl_key') and slave.get('ssl_crt') %}
{%-     set key_popen = POPEN_FUNCTION([software_parameter_dict['openssl'], 'rsa', '-noout', '-modulus']) %}
{%-     set crt_popen = POPEN_FUNCTION([software_parameter_dict['openssl'], 'x509', '-noout', '-modulus']) %}
{%-     set key_modulus = key_popen.communicate(('' ~ slave['ssl_key']).encode())[0] | trim %}
{%-     set crt_modulus = crt_popen.communicate(('' ~ slave['ssl_crt']).encode())[0] | trim %}
{%-     if not key_modulus or key_modulus != crt_modulus  %}
{%-       do slave_error_list.append('slave ssl_key and ssl_crt does not match')  %}
{%-     endif %}
{%-   endif %}
{#- BBB: SlapOS Master non-zero knowledge END #}
{%-   if slave.get('custom_domain') %}
{%-     set slave_custom_domain = '' ~ slave['custom_domain'] %}
{%-     if slave_custom_domain.startswith('*.') %}
{%-       set clean_custom_domain = slave_custom_domain[2:] %}
{%-     else %}
{%-       set clean_custom_domain = slave_custom_domain %}
{%-     endif %}
{%-     if not validators_module.domain(clean_custom_domain) %}
{%-       do slave_error_list.append('custom_domain %r invalid' % (slave['custom_domain'],)) %}
{%-     endif %}
{%-   endif %}
{%-   if len(slave_error_list) == 0 %}
{#-   Cleanup slave from not needed keys which come from implementation of SlapOS Master #}
{#-   Send only controlled information about the slave to node #}
{%-     set authorized_slave = {} %}
{%-     for key in FRONTEND_NODE_SLAVE_PASSED_KEY_LIST %}
{%-       if key in slave %}
{%-         do authorized_slave.__setitem__(key, slave[key]) %}
{%-       endif %}
{%-     endfor %}
{%-     do AUTHORIZED_SLAVE_LIST.append(authorized_slave) %}
{%-   else %}
{%-     do REJECTED_SLAVE_DICT.__setitem__(slave.get('slave_reference'), sorted(slave_error_list)) %}
{%-   endif %}
{%-   if len(slave_critical_error_list) > 0 %}
{%-     do CRITICAL_REJECTED_SLAVE_DICT.__setitem__(slave.get('slave_reference'), sorted(slave_critical_error_list)) %}
{%-   endif %}
{%-   if len(slave_warning_list) > 0 %}
{%-     do WARNING_SLAVE_DICT.__setitem__(slave.get('slave_reference'), sorted(slave_warning_list)) %}
{%-   endif %}
{%- endfor %}
{%- do AUTHORIZED_SLAVE_LIST.sort(key=operator_module.itemgetter('slave_reference')) %}
{#- END: Slave processing #}

[monitor-instance-parameter]
monitor-httpd-port = {{ MASTER_PARTITION_MONITOR_HTTPD_PORT }}

[replicate]
<= slap-connection
recipe = slapos.cookbook:requestoptional.serialised
config-monitor-cors-domains = {{ instance_parameter_dict['configuration'].get('monitor-cors-domains', 'monitor.app.officejs.com') }}
config-monitor-username = ${monitor-instance-parameter:username}
config-monitor-password = ${monitor-htpasswd:passwd}

software-type = single-custom-personal
return = slave-instance-information-list monitor-base-url backend-client-csr-url kedifa-csr-url csr-certificate backend-haproxy-statistic-url node-information-json

{#- BEGIN: Frontend node request #}
{%- set base_node_configuration_dict = {} %}
{%- for key, value in FRONTEND_PARAMETER_DICT.items() %}
{%-   do base_node_configuration_dict.__setitem__(key,  value) %}
{%- endfor %}
{%- for section, frontend_request in REQUEST_DICT.items() %}
{%-   set state = frontend_request.get('state', '') %}
[{{section}}]
<= replicate
name = {{ frontend_request.get('name') }}
software-url = {{ frontend_request['software-url'] }}
{%-   if state %}
state = {{ state }}
{%-   endif %}
{#-   Do not send additional parameters for destroyed nodes #}
{%-   if state != 'destroyed' %}
config-slave-kedifa-information = ${request-kedifa:connection-slave-kedifa-information}
config-kedifa-caucase-url = ${request-kedifa:connection-caucase-url}
config-backend-client-caucase-url = {{ CAUCASE_URL }}
config-master-key-download-url = ${request-kedifa:connection-master-key-download-url}
config-cluster-identification = {{ instance_parameter_dict['root-instance-title'] }}
{%-     set node_configuration_dict = {} %}
{%-     do node_configuration_dict.update(frontend_request.get('config')) %}
{#- sort_keys are important in order to avoid shuffling parameters on each run #}
{%-     do node_configuration_dict.__setitem__("extra_slave_instance_list", json_module.dumps(AUTHORIZED_SLAVE_LIST, sort_keys=True)) %}
{%-     do node_configuration_dict.__setitem__("frontend-name", frontend_request.get('name')) %}
{%-     for config_key, config_value in node_configuration_dict.items() %}
config-{{ config_key }} = {{ dumps(config_value) }}
{%-     endfor %}
{%-     for config_key, config_value in base_node_configuration_dict.items() %}
config-{{ config_key }} = {{ dumps(config_value) }}
{%-     endfor %}
{%-     if frontend_request.get('sla') %}
{%-       for parameter, value in frontend_request.get('sla').items() %}
sla-{{ parameter }} = {{ value }}
{%-       endfor %}
{%-     endif %}
{%-   else %}
{#-   Ignore return for destroyed nodes #}
return =
{%-   endif %}
{%- endfor %}
{#- END: Frontend node request #}

[publish-information]
<= monitor-publish
recipe = slapos.cookbook:publish
domain = {{ instance_parameter_dict['configuration'].get('domain') }}
slave-amount = {{ instance_parameter_dict['slave-instance-list'] | length }}
accepted-slave-amount = {{ AUTHORIZED_SLAVE_LIST | length }}
rejected-slave-amount = {{ REJECTED_SLAVE_DICT | length }}
backend-client-caucase-url = {{ CAUCASE_URL }}
{#- sort_keys are important in order to avoid shuffling parameters on each run #}
rejected-slave-dict = {{ dumps(json_module.dumps(REJECTED_SLAVE_DICT, sort_keys=True)) }}
rejected-slave-promise-url = ${rejected-slave-promise:config-url}
publish-failsafe-error-promise-url = ${publish-failsafe-error-promise:config-url}
master-key-upload-url = ${request-kedifa:connection-master-key-upload-url}
master-key-generate-auth-url = ${request-kedifa:connection-master-key-generate-auth-url}
kedifa-caucase-url = ${request-kedifa:connection-caucase-url}
{%-  set warning_list = [] %}
{%-  for key in ['apache-certificate', 'apache-key'] %}
{%-    if key in instance_parameter_dict['configuration'] %}
{%-      do warning_list.append('%s is obsolete, please use master-key-upload-url' % (key, )) %}
{%-    endif %}
{%-  endfor %}
{%- if len(warning_list) > 0 %}
{#- sort_keys are important in order to avoid shuffling parameters on each run #}
warning-list = {{ dumps(json_module.dumps(warning_list, sort_keys=True)) }}
{%- endif %}
{%- if len(WARNING_SLAVE_DICT) > 0 %}
{#- sort_keys are important in order to avoid shuffling parameters on each run #}
warning-slave-dict = {{ dumps(json_module.dumps(WARNING_SLAVE_DICT, sort_keys=True)) }}
{%- endif %}
{%- if not AIKC_ENABLED or not AIBCC_ENABLED %}
{%-   for index, frontend in enumerate(FRONTEND_LIST) %}
{%-     set section_part = '${request-' + frontend %}
frontend-node-{{ index + 1 }}-csr-certificate = {{ section_part }}:connection-csr-certificate}
{%-   endfor %}
{%- endif %}
{%- if not AIKC_ENABLED %}
kedifa-csr-url = ${request-kedifa:connection-kedifa-csr-url}
kedifa-csr-certificate = ${request-kedifa:connection-csr-certificate}
{%- for index, frontend in enumerate(FRONTEND_LIST) %}
{%-   set section_part = '${request-' + frontend %}
frontend-node-{{ index + 1 }}-kedifa-csr-url = {{ section_part }}:connection-kedifa-csr-url}
{%-  endfor %}
{%- endif %}
{%- for index, frontend in enumerate(FRONTEND_LIST) %}
{%-   set section_part = '${request-' + frontend %}
frontend-node-{{ index + 1 }}-backend-haproxy-statistic-url = {{ section_part }}:connection-backend-haproxy-statistic-url}
frontend-node-{{ index + 1 }}-node-information-json = ${frontend-information:frontend-node-{{ index + 1 }}-node-information-json}
{%-   endfor %}
{%- if not AIBCC_ENABLED %}
{%-  for index, frontend in enumerate(FRONTEND_LIST) %}
{%-    set section_part = '${request-' + frontend %}
frontend-node-{{ index + 1 }}-backend-client-csr-url = {{ section_part }}:connection-backend-client-csr-url}
{%-   endfor %}
{%- endif %}

{#- Generate promises for requested frontend nodes #}
{%- for index, frontend in enumerate(FRONTEND_LIST) %}
{%-   set part_name = 'promise-backend-haproxy-statistic-url-' + frontend %}
{%-   do PART_LIST.append(part_name) %}
{%-   set section_part = '${request-' + frontend %}
[{{ part_name }}]
<= monitor-promise-base
promise = check_url_available
name = check-backend-haproxy-statistic-url-frontend-node-{{ index + 1 }}.py
config-url =
  {{ section_part }}:connection-backend-haproxy-statistic-url}
{%- endfor %}

[publish-slave-information]
recipe = slapos.cookbook:switch-softwaretype
default = instance-publish-slave-information:output
RootSoftwareInstance = ${:default}
replicate = instance-publish-slave-information:output
custom-personal = instance-publish-slave-information:output
custom-group = instance-publish-slave-information:output

[request-kedifa]
<= slap-connection
recipe = slapos.cookbook:requestoptional.serialised
config-monitor-cors-domains = {{ instance_parameter_dict['configuration'].get('monitor-cors-domains', 'monitor.app.officejs.com') }}
config-monitor-username = ${monitor-instance-parameter:username}
config-monitor-password = ${monitor-htpasswd:passwd}
config-monitor-httpd-port = {{ KEDIFA_PARTITION_MONITOR_HTTPD_PORT }}
config-caucase_port = {{ dumps(instance_parameter_dict['configuration'].get('caucase_port', 8890)) }}
config-kedifa_port = {{ dumps(instance_parameter_dict['configuration'].get('kedifa_port', 7879)) }}
config-rotate-num = {{ dumps(instance_parameter_dict['configuration'].get('rotate-num', 4000)) }}
{%- for key in ['kedifa_port', 'caucase_port'] -%}
{%-   if key in instance_parameter_dict['configuration'] %}
config-{{ key }} = {{ dumps(instance_parameter_dict['configuration'][key]) }}
{%-   endif %}
{%- endfor %}
config-slave-list = {{ dumps(AUTHORIZED_SLAVE_LIST) }}
config-cluster-identification = {{ instance_parameter_dict['root-instance-title'] }}

{%- if '-kedifa-software-release-url' in instance_parameter_dict['configuration'] %}
software-url = {{ instance_parameter_dict['configuration'].pop('-kedifa-software-release-url') }}
{%- else %}
software-url = ${slap-connection:software-release-url}
{%- endif %}
software-type = kedifa
name = kedifa
return = slave-kedifa-information master-key-generate-auth-url master-key-upload-url master-key-download-url caucase-url kedifa-csr-url csr-certificate  monitor-base-url
{%- set sla_kedifa_key = "-sla-kedifa-" %}
{%- set sla_kedifa_key_length = sla_kedifa_key | length %}
{%- for key in list(instance_parameter_dict['configuration'].keys()) %}
{%-   if key.startswith(sla_kedifa_key) %}
sla-{{ key[sla_kedifa_key_length:] }} = {{ instance_parameter_dict['configuration'].pop(key) }}
{%-   endif %}
{%- endfor %}

[rejected-slave-information]
rejected-slave-dict = {{ dumps(REJECTED_SLAVE_DICT) }}

[warning-slave-information]
warning-slave-dict = {{ dumps(WARNING_SLAVE_DICT) }}

[slave-information]
{%- for frontend_section in FRONTEND_SECTION_LIST %}
{{ frontend_section }} = {{ "${%s:connection-slave-instance-information-list}" % frontend_section }}
{%- endfor %}

[active-slave-instance]
{%- set active_slave_instance_list = [] %}
{%- for slave_instance in instance_parameter_dict['slave-instance-list'] %}
{#-   Provide a list of slave titles send by master, in order to filter out already destroyed slaves #}
{#-   Note: This functionality is not yet covered by tests, please modify with care #}
{%-   do active_slave_instance_list.append(slave_instance['slave_reference']) %}
{%- endfor %}
{#- sort_keys are important in order to avoid shuffling parameters on each run #}
active-slave-instance-list = {{ json_module.dumps(active_slave_instance_list, sort_keys=True) }}

[frontend-information]
{%- for index, frontend in enumerate(FRONTEND_LIST) %}
{%-   set section_part = '${request-' + frontend %}
frontend-node-{{ index + 1 }}-node-information-json = {{ section_part }}:connection-node-information-json}
{%- endfor %}

[instance-publish-slave-information]
< = jinja2-template-base
url = {{ software_parameter_dict['profile_master_publish_slave_information'] }}
filename = instance-publish-slave-information.cfg
extensions = jinja2.ext.do
extra-context =
    section slave_information slave-information
    section frontend_information frontend-information
    section rejected_slave_information rejected-slave-information
    section active_slave_instance_dict active-slave-instance
    section warning_slave_information warning-slave-information
    key slave_kedifa_information request-kedifa:connection-slave-kedifa-information
    key publish_failsafe_error directory:publish-failsafe-error-var

[monitor-base-url-dict]
kedifa = ${request-kedifa:connection-monitor-base-url}
{%- for frontend in FRONTEND_SECTION_LIST %}
{{ frontend }} = {{ '${' + frontend + ':connection-monitor-base-url}' }}
{%- endfor %}

[directory]
recipe = slapos.cookbook:mkdirectory
bin = ${buildout:directory}/bin/
srv = ${buildout:directory}/srv/
tmp = ${buildout:directory}/tmp/
backup = ${:srv}/backup
caucased = ${:srv}/caucased
backup-caucased = ${:backup}/caucased
master-introspection-var = ${:var}/master-introspection-nginx
publish-failsafe-error-var = ${:var}/publish-failsafe-error
publish-failsafe-check-var = ${:var}/publish-failsafe-check
service = ${:etc}/service
promise-output = ${:srv}/promise-output

{%- if AIKC_ENABLED %}
[directory]
aikc = ${:srv}/aikc

[aikc-config]
caucase-url = ${request-kedifa:connection-caucase-url}

csr = ${directory:aikc}/csr.pem
key = ${directory:aikc}/key.pem
ca-certificate = ${directory:aikc}/cas-ca-certificate.pem
crl = ${directory:aikc}/crl.pem
user-ca-certificate = ${directory:aikc}/user-ca-certificate.pem
user-crl = ${directory:aikc}/user-crl.pem
user-created = ${directory:aikc}/user-created
data_dir = ${directory:aikc}/caucase-updater

[aikc-user-csr]
recipe = plone.recipe.command
organization = {{ instance_parameter_dict['root-instance-title'] }}
organizational_unit = Automatic Internal Kedifa Caucase CSR
command =
  if [ ! -f ${:csr} ] && [ ! -f ${:key} ]  ; then
    {{ software_parameter_dict['openssl'] }} req -new -sha256 \
      -newkey rsa -nodes -keyout ${:key} \
      -subj "/O=${:organization}/OU=${:organizational_unit}" \
      -out ${:csr}
  fi
update-command = ${:command}
csr = ${aikc-config:csr}
key = ${aikc-config:key}
{#-   Can be stopped on error, as does not rely on self provided service #}
stop-on-error = True


[aikc-caucase-wrapper]
{#-   jinja2 instead of wrapper is used with context to remove py'u' #}
recipe = slapos.recipe.template:jinja2
context =
  key caucase_url aikc-config:caucase-url
inline =
  #!{{ software_parameter_dict['dash'] }}/bin/dash
  exec {{ software_parameter_dict['bin_directory'] }}/caucase \
  --ca-url {{ '{{ caucase_url }}' }} \
  --ca-crt ${aikc-config:ca-certificate} \
  --user-ca-crt ${aikc-config:user-ca-certificate} \
  --user-crl ${aikc-config:user-crl} \
  --crl ${aikc-config:crl} \
  "$@"

output = ${directory:bin}/aikc-caucase-wrapper

{%-   do PART_LIST.append('aikc-create-user') %}
[aikc-create-user]
recipe = plone.recipe.command
{#-   The called command is smart enough to survive errors and retry #}
stop-on-error = False
update-command = ${:command}
csr_id = ${directory:aikc}/csr_id
command =
  if ! [ -f ${aikc-config:user-created} ] ; then
    ${aikc-caucase-wrapper:output} --mode user --send-csr ${aikc-user-csr:csr} > ${:csr_id} || exit 1
    cut -d ' ' -f 1 ${:csr_id} || exit 1
    csr_id=`cut -d ' ' -f 1 ${:csr_id}`
    sleep 1
    ${aikc-caucase-wrapper:output} --mode user --get-crt $csr_id ${aikc-config:key} || exit 1
    touch ${aikc-config:user-created}
  fi

{%-   do PART_LIST.append('aikc-user-caucase-updater') %}
{%-   do PART_LIST.append('aikc-user-caucase-updater-promise') %}
{{ CAUCASE.updater(
     prefix='aikc-user-caucase-updater',
     buildout_bin_directory=software_parameter_dict['bin_directory'],
     updater_path='${directory:service}/aikc-user-caucase-updater',
     url='${aikc-config:caucase-url}',
     data_dir='${aikc-config:data_dir}',
     crt_path='${aikc-config:key}',
     ca_path='${aikc-config:user-ca-certificate}',
     crl_path='${aikc-config:user-crl}',
     key_path='${aikc-config:key}',
     mode='user',
)}}

[aikc-sign-promise-wrapper]
recipe = slapos.cookbook:wrapper
command-line = {{ software_parameter_dict['caucase_csr_sign_check'] }}
  ${aikc-config:caucase-url}
  ${aikc-config:ca-certificate}
  ${aikc-config:key}
wrapper-path = ${directory:bin}/aikc-caucase-csr-sign-check

{%-   do PART_LIST.append('aikc-sign-promise') %}
[aikc-sign-promise]
<= monitor-promise-base
promise = check_command_execute
name = ${:_buildout_section_name_}.py
config-command = ${aikc-sign-promise-wrapper:wrapper-path}

{%-   for csr in FRONTEND_LIST + ['kedifa'] %}
[aikc-{{ csr }}-wrapper]
recipe = slapos.cookbook:wrapper
wrapper-path = ${directory:bin}/aikc-{{ csr }}-wrapper
command-line = {{ software_parameter_dict['smart_caucase_signer'] }}
  ${aikc-config:caucase-url}
  ${aikc-config:ca-certificate}
  ${directory:aikc}/{{ csr }}-done
  ${aikc-config:key}
  ${request-{{ csr }}:connection-kedifa-csr-url}
  "${request-{{ csr }}:connection-csr-certificate}"

{%-     do PART_LIST.append('aikc-%s' % (csr,)) %}
[aikc-{{ csr }}]
recipe = plone.recipe.command
{#-   The called command is smart enough to survive errors and retry #}
stop-on-error = False
command =
  ${aikc-{{ csr }}-wrapper:wrapper-path}
update-command = ${:command}
{%-   endfor %}
{%- endif %} {# if AIKC_ENABLED #}

{%- if AIBCC_ENABLED %}
[directory]
aibcc = ${:srv}/aibcc

[aibcc-config]
caucase-url = {{ CAUCASE_URL }}

csr = ${directory:aibcc}/csr.pem
key = ${directory:aibcc}/key.pem
ca-certificate = ${directory:aibcc}/cas-ca-certificate.pem
crl = ${directory:aibcc}/crl.pem
user-ca-certificate = ${directory:aibcc}/user-ca-certificate.pem
user-crl = ${directory:aibcc}/user-crl.pem
user-created = ${directory:aibcc}/user-created
data_dir = ${directory:aibcc}/caucase-updater

[aibcc-user-csr]
recipe = plone.recipe.command
organization = {{ instance_parameter_dict['root-instance-title'] }}
organizational_unit = Automatic Sign Backend Client Caucase CSR
command =
  if [ ! -f ${:csr} ] && [ ! -f ${:key} ]  ; then
    {{ software_parameter_dict['openssl'] }} req -new -sha256 \
      -newkey rsa -nodes -keyout ${:key} \
      -subj "/O=${:organization}/OU=${:organizational_unit}" \
      -out ${:csr}
  fi
update-command = ${:command}
csr = ${aibcc-config:csr}
key = ${aibcc-config:key}
{#-   Can be stopped on error, as does not rely on self provided service #}
stop-on-error = True


[aibcc-caucase-wrapper]
{#-   jinja2 instead of wrapper is used with context to remove py'u' #}
recipe = slapos.recipe.template:jinja2
context =
  key caucase_url aibcc-config:caucase-url
inline =
  #!{{ software_parameter_dict['dash'] }}/bin/dash

  exec {{ software_parameter_dict['bin_directory'] }}/caucase \
  --ca-url {{ '{{ caucase_url }}' }} \
  --ca-crt ${aibcc-config:ca-certificate} \
  --user-ca-crt ${aibcc-config:user-ca-certificate} \
  --user-crl ${aibcc-config:user-crl} \
  --crl ${aibcc-config:crl} \
  "$@"

output = ${directory:bin}/aibcc-caucase-wrapper

{%-   do PART_LIST.append('aibcc-create-user') %}
[aibcc-create-user]
recipe = plone.recipe.command
# the caucase for this part is provided in this profile, so we can't fail
# as otherwise caucase will never be started...
{#-   XXX: Create promise #}
stop-on-error = False
update-command = ${:command}
csr_id = ${directory:aibcc}/csr_id
command =
  if ! [ -f ${aibcc-config:user-created} ] ; then
    ${aibcc-caucase-wrapper:output} --mode user --send-csr ${aibcc-user-csr:csr} > ${:csr_id} || exit 1
    cut -d ' ' -f 1 ${:csr_id} || exit 1
    csr_id=`cut -d ' ' -f 1 ${:csr_id}`
    sleep 1
    ${aibcc-caucase-wrapper:output} --mode user --get-crt $csr_id ${aibcc-config:key} || exit 1
    touch ${aibcc-config:user-created}
  fi

{%-   do PART_LIST.append('aibcc-user-caucase-updater') %}
{%-   do PART_LIST.append('aibcc-user-caucase-updater-promise') %}
{{ CAUCASE.updater(
     prefix='aibcc-user-caucase-updater',
     buildout_bin_directory=software_parameter_dict['bin_directory'],
     updater_path='${directory:service}/aibcc-user-caucase-updater',
     url='${aibcc-config:caucase-url}',
     data_dir='${aibcc-config:data_dir}',
     crt_path='${aibcc-config:key}',
     ca_path='${aibcc-config:user-ca-certificate}',
     crl_path='${aibcc-config:user-crl}',
     key_path='${aibcc-config:key}',
     mode='user',
)}}

[aibcc-sign-promise-wrapper]
recipe = slapos.cookbook:wrapper
command-line = {{ software_parameter_dict['caucase_csr_sign_check'] }}
  ${aibcc-config:caucase-url}
  ${aibcc-config:ca-certificate}
  ${aibcc-config:key}
wrapper-path = ${directory:bin}/aibcc-caucase-csr-sign-check

{%-   do PART_LIST.append('aibcc-sign-promise') %}
[aibcc-sign-promise]
<= monitor-promise-base
promise = check_command_execute
name = ${:_buildout_section_name_}.py
config-command = ${aibcc-sign-promise-wrapper:wrapper-path}

{%-   for csr in FRONTEND_LIST %}
[aibcc-{{ csr }}-wrapper]
recipe = slapos.cookbook:wrapper
wrapper-path = ${directory:bin}/aibcc-{{ csr }}-wrapper
command-line = {{ software_parameter_dict['smart_caucase_signer'] }}
  ${aibcc-config:caucase-url}
  ${aibcc-config:ca-certificate}
  ${directory:aibcc}/{{ csr }}-done
  ${aibcc-config:key}
  ${request-{{ csr }}:connection-backend-client-csr-url}
  "${request-{{ csr }}:connection-csr-certificate}"

{%-     do PART_LIST.append('aibcc-%s' % (csr,)) %}
[aibcc-{{ csr }}]
recipe = plone.recipe.command
{#-     The called command is smart enough to survive errors and retry #}
stop-on-error = False
command =
  ${aibcc-{{ csr }}-wrapper:wrapper-path}
update-command = ${:command}
{%-   endfor %}
{%- endif %} {# if AIBCC_ENABLED #}

[rejected-slave-json]
recipe = slapos.recipe.template:jinja2
filename = rejected-slave.json
directory = ${directory:promise-output}
output = ${:directory}/${:filename}
url = {{ software_parameter_dict['template_empty'] }}
{%- if CRITICAL_REJECTED_SLAVE_DICT %}
{# sort_keys are important in order to avoid shuffling parameters on each run #}
content = {{ dumps(json_module.dumps(CRITICAL_REJECTED_SLAVE_DICT, indent=2, sort_keys=True)) }}
{%- else %}
content =
{%- endif %}
context =
  key content :content

[master-introspection-server-configuration]
ip = {{ instance_parameter_dict['ipv6-random'] }}
port = 14455

[master-introspection-server]
ip = ${master-introspection-server-configuration:ip}
port = ${master-introspection-server-configuration:port}
recipe = slapos.cookbook:wrapper
command-line = {{ software_parameter_dict['nginx'] }}
  -c ${master-introspection-template:output}

wrapper-path = ${directory:service}/master-introspection-server
hash-existing-files =
  ${buildout:directory}/software_release/buildout.cfg
hash-files =
  ${master-introspection-template:output}
  ${master-introspection-certificate:certificate}

[master-introspection-frontend]
<= slap-connection
recipe = slapos.cookbook:requestoptional
name = Master Introspection Frontend
software-url = http://git.erp5.org/gitweb/slapos.git/blob_plain/HEAD:/software/apache-frontend/software.cfg
shared = true
config-url = https://[${master-introspection-server:ip}]:${master-introspection-server:port}/
config-https-only = true
return = secure_access

[master-introspection-frontend-url]
recipe = slapos.recipe.build
url = ${master-introspection-frontend:connection-secure_access}
user = ${master-introspection-password:user}
password = ${master-introspection-password:passwd}
init =
  import furl
  url = furl.furl(options['url'])
  url.set(username = options['user'].lower())
  url.set(password = options['password'])
  url.set(path = '')
  options['frontend-url'] = url.tostr()

[rejected-slave-publish]
url = ${master-introspection-frontend-url:frontend-url}/${master-introspection-template:rejected-slave-path}/${rejected-slave-json:filename}

[master-introspection-certificate]
recipe = plone.recipe.command
certificate = ${directory:etc}/master-introspection.pem
key = ${:certificate}

{#- Can be stopped on error, as does not rely on self provided service #}
stop-on-error = True
update-command = ${:command}
command =
  [ -f ${:certificate} ] && {{ software_parameter_dict['findutils'] }}/bin/find ${:certificate} -type f -mtime +3 -delete
  if ! [ -f ${:certificate} ] ; then
    openssl req -new -newkey rsa -sha256 -subj \
      "/CN=${master-introspection-server-configuration:ip}" \
      -days 5 -nodes -x509 -keyout ${:certificate} -out ${:certificate}
  fi

[master-introspection-password]
recipe = slapos.cookbook:generate.password
storage-path = ${directory:etc}/.master-introspection.passwd
bytes = 8
user = admin

[master-introspection-htpasswd]
recipe = plone.recipe.command
{#- Can be stopped on error, as does not rely on self provided service #}
stop-on-error = True
file = ${directory:var}/master-introspection.htpasswd
{#- update-command is not needed, as if the ${:password} would change, the whole part will be recalculated #}
password = ${master-introspection-password:passwd}
command = {{ software_parameter_dict['htpasswd'] }} -cb ${:file} ${master-introspection-password:user} ${:password}

[master-introspection-template]
recipe = slapos.recipe.template:jinja2
var = ${directory:master-introspection-var}
pid = ${directory:var}/nginx-master-introspection-server.pid
rejected-slave-path = rejected-slave
publish-failsafe-error-path = publish-failsafe-error
inline =
  daemon off;
  pid ${:pid};
  error_log stderr;
  events {
  }
  http {
    include {{ software_parameter_dict['nginx_mime'] }};
    server {
      server_name_in_redirect off;
      port_in_redirect off;
      error_log stderr;
      access_log /dev/null;
      listen [${master-introspection-server-configuration:ip}]:${master-introspection-server-configuration:port} ssl;
      ssl_certificate ${master-introspection-certificate:certificate};
      ssl_certificate_key ${master-introspection-certificate:certificate};
      default_type application/octet-stream;
      client_body_temp_path ${:var} 1 2;
      proxy_temp_path ${:var} 1 2;
      fastcgi_temp_path ${:var} 1 2;
      uwsgi_temp_path ${:var} 1 2;
      scgi_temp_path ${:var} 1 2;
      auth_basic "Master Introspection";
      auth_basic_user_file ${master-introspection-htpasswd:file};
      location /${:rejected-slave-path} {
        alias ${rejected-slave-json:directory}/;
        autoindex off;
        sendfile on;
        sendfile_max_chunk 1m;
      }
      location /${:publish-failsafe-error-path} {
        alias ${check-publish-failsafe-error:directory}/;
        autoindex off;
        sendfile on;
        sendfile_max_chunk 1m;
      }
    }
  }

output = ${directory:etc}/nginx-master-introspection.conf

[master-introspection-server-ip-port]
<= monitor-promise-base
promise = check_socket_listening
name = master-introspection-server-ip-port-listening.py
config-host = ${master-introspection-server-configuration:ip}
config-port = ${master-introspection-server-configuration:port}

[rejected-slave-promise]
<= monitor-promise-base
promise = check_file_state
name = rejected-slave.py
config-filename = ${rejected-slave-json:output}
config-state = empty
config-url = ${rejected-slave-publish:url}

[master-key-upload-url-ready]
recipe = slapos.recipe.build
directory = ${directory:var}
output = ${directory:var}/${:_buildout_section_name_}.txt
key = ${request-kedifa:connection-master-key-upload-url}
init =
  import os
  # protect against early init
  if os.path.isdir(options['directory']):
    with open(options['output'], 'w') as fh:
      if 'NotReadyYet' in options['key']:
        fh.write('NotReadyYet')
      else:
        fh.write('')

[master-key-upload-url-ready-promise]
<= monitor-promise-base
promise = check_file_state
name = ${:_buildout_section_name_}.py
config-filename = ${master-key-upload-url-ready:output}
config-state = empty

[master-key-generate-auth-url-ready]
<= master-key-upload-url-ready
key = ${request-kedifa:connection-master-key-generate-auth-url}

[master-key-generate-auth-url-ready-promise]
<= master-key-upload-url-ready-promise
config-filename = ${master-key-generate-auth-url-ready:output}

[master-key-download-url-ready]
<= master-key-upload-url-ready
key = ${request-kedifa:connection-master-key-download-url}

[master-key-download-url-ready-promise]
<= master-key-upload-url-ready-promise
config-filename = ${master-key-download-url-ready:output}

[caucased-backend-client]
hash-existing-files = ${buildout:directory}/software_release/buildout.cfg
{{ CAUCASE.caucased(
      prefix='caucased-backend-client',
      buildout_bin_directory=software_parameter_dict['bin_directory'],
      caucased_path='${directory:service}/caucased-backend-client',
      backup_dir='${directory:backup-caucased}',
      data_dir='${directory:caucased}',
      netloc=CAUCASE_NETLOC,
      tmp='${directory:tmp}',
      service_auto_approve_count=0,
      user_auto_approve_count=1,
      key_len=2048
)}}

[check-publish-failsafe-error]
recipe = plone.recipe.command
directory = ${directory:publish-failsafe-check-var}
filename = publish-failsafe-error.txt
file = ${:directory}/${:filename}
command = {{ software_parameter_dict['findutils'] }}/bin/find ${directory:publish-failsafe-error-var} -type f -printf "%f\n" > ${:file}
update-command = ${:command}

[check-publish-failsafe-error-publish]
url = ${master-introspection-frontend-url:frontend-url}/${master-introspection-template:publish-failsafe-error-path}/${check-publish-failsafe-error:filename}

[publish-failsafe-error-promise]
<= monitor-promise-base
promise = check_file_state
name = publish-failsafe-error.py
config-filename = ${check-publish-failsafe-error:file}
config-state = empty
config-url = ${check-publish-failsafe-error-publish:url}

[buildout]
extends =
  {{ software_parameter_dict['profile_common'] }}
  {{ software_parameter_dict['profile_monitor2'] }}
parts =
  monitor-base
  publish-slave-information
  check-publish-failsafe-error
  publish-failsafe-error-promise
  publish-information
  request-kedifa
  rejected-slave-promise
  master-introspection-server-ip-port
  caucased-backend-client
  caucased-backend-client-promise
  master-key-upload-url-ready-promise
  master-key-generate-auth-url-ready-promise
  master-key-download-url-ready-promise
  master-introspection-frontend
{%- for part in PART_LIST %}
{{ '  %s' % part }}
{%- endfor %}
