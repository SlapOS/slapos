{%- set kedifa_updater_mapping = [] %}
{%- set cached_server_dict = {} %}
{%- set backend_slave_dict = {} %}
{%- set frontend_slave_dict = {} %}
{%- set part_list = [] %}
{%- set cache_port = frontend_haproxy_configuration.get('cache-port') %}
{%- set cache_access = "http://%s:%s/HTTP" % (instance_parameter_dict['ipv4-random'], cache_port) %}
{%- set ssl_cache_access = "http://%s:%s/HTTPS" % (instance_parameter_dict['ipv4-random'], cache_port) %}
{%- set backend_haproxy_http_url = 'http://%s:%s' % (instance_parameter_dict['ipv4-random'], backend_haproxy_configuration['http-port']) %}
{%- set backend_haproxy_https_url = 'http://%s:%s' % (instance_parameter_dict['ipv4-random'], backend_haproxy_configuration['https-port']) %}
{%- set TRUE_VALUES = ['y', 'yes', '1', 'true'] %}
{%- set generic_instance_parameter_dict = { 'cache_access': cache_access, 'local_ipv4': instance_parameter_dict['ipv4-random'], 'http_port': configuration['plain_http_port'], 'https_port': configuration['port']} %}
{%- set slave_log_dict = {} %}
{%- set slave_instance_information_list = [] %}
{%- set slave_instance_list = instance_parameter_dict['slave-instance-list'] %}
{%- if configuration['extra_slave_instance_list'] %}
{%-   do slave_instance_list.extend(json_module.loads(configuration['extra_slave_instance_list'])) %}
{%- endif %}
{%- if master_key_download_url %}
{%-   do kedifa_updater_mapping.append((master_key_download_url, frontend_haproxy_configuration['master-certificate'], apache_certificate)) %}
{%- else %}
{%-   do kedifa_updater_mapping.append(('notreadyyet', frontend_haproxy_configuration['master-certificate'], apache_certificate)) %}
{%- endif %}
{%- if kedifa_configuration['slave_kedifa_information'] %}
{%-   set slave_kedifa_information = json_module.loads(kedifa_configuration['slave_kedifa_information']) %}
{%- else %}
{%-   set slave_kedifa_information = {} %}
{%- endif -%}
[jinja2-template-base]
recipe = slapos.recipe.template:jinja2
extensions = jinja2.ext.do
extra-context =
context =
    raw profile_common {{ profile_common }}
    ${:extra-context}

# empty sections if no slaves are available
[slave-log-directory-dict]
{#- Note: This section is only to build dictionary of all slave information about their directories #}
{#-       It shall not be referenced as ${slave-log-directory-dict: by slaves, as this section is often updated #}
[slave-password]
[slave-htpasswd]

{#- Prepare configuration parameters #}
{%- set CIPHER_TRANSLATION_DICT = {
  'ECDHE-ECDSA-WITH-CHACHA20-POLY1305': 'ECDHE-ECDSA-CHACHA20-POLY1305',   
  'ECDHE-RSA-WITH-CHACHA20-POLY1305': 'ECDHE-RSA-CHACHA20-POLY1305',
  'ECDHE-RSA-AES256-CBC-SHA': 'ECDHE-RSA-AES256-SHA',
  'ECDHE-RSA-AES128-CBC-SHA': 'ECDHE-RSA-AES128-SHA',
  'ECDHE-ECDSA-AES256-CBC-SHA': 'ECDHE-ECDSA-AES256-SHA',
  'ECDHE-ECDSA-AES128-CBC-SHA': 'ECDHE-ECDSA-AES128-SHA',
  'RSA-AES256-CBC-SHA': 'AES256-SHA',
  'RSA-AES128-CBC-SHA': 'AES128-SHA',
  'ECDHE-RSA-3DES-EDE-CBC-SHA': 'ECDHE-RSA-DES-CBC3-SHA',
  'RSA-3DES-EDE-CBC-SHA': 'DES-CBC3-SHA'
} %}
{%- set DEFAULT_PORT = {'http': 80, 'https': 443, '': None} %}
{%- for key in ['enable-http2-by-default'] %}
{%-   do configuration.__setitem__(key, ('' ~ configuration[key]).lower() in TRUE_VALUES) %}
{%- endfor %}
{#- Loop thought slave list to set up slaves #}
{%- for slave_instance in slave_instance_list %}
{#-   Prepare slave parameters: #}
{#-     * convert strings to booleans (as slapproxy and SlapOS Master differ a bit) #}
{#-     * create real lists from string lists #}
{#-     * setup defaults to simplify other profiles #}
{#-     * stabilise values for backend #}
{%-   for key, prefix in [('url', 'http_backend'), ('https-url', 'https_backend')] %}
{%-     set parsed = urllib_module.parse.urlparse(slave_instance.get(key, '').strip()) %}
{%-     set info_dict = {'scheme': parsed.scheme, 'hostname': parsed.hostname, 'port': parsed.port or DEFAULT_PORT[parsed.scheme], 'path': parsed.path, 'fragment': parsed.fragment, 'query': parsed.query, 'netloc-list': slave_instance.get(key + '-netloc-list', '').split()} %}
{%-     do slave_instance.__setitem__(prefix, info_dict) %}
{%-   endfor %}
{%-   do slave_instance.__setitem__('ssl_proxy_verify', ('' ~ slave_instance.get('ssl-proxy-verify', '')).lower() in TRUE_VALUES) %}
{%-   for key, prefix in [('health-check-failover-url', 'http_backend'), ('health-check-failover-https-url', 'https_backend')] %}
{%-     set parsed = urllib_module.parse.urlparse(slave_instance.get(key, '').strip()) %}
{%-     set info_dict = slave_instance[prefix] %}
{%-     do info_dict.__setitem__('health-check-failover-scheme', parsed.scheme) %}
{%-     do info_dict.__setitem__('health-check-failover-hostname', parsed.hostname) %}
{%-     do info_dict.__setitem__('health-check-failover-port', parsed.port or DEFAULT_PORT[parsed.scheme]) %}
{%-     do info_dict.__setitem__('health-check-failover-path', parsed.path) %}
{%-     do info_dict.__setitem__('health-check-failover-query', parsed.query) %}
{%-     do info_dict.__setitem__('health-check-failover-fragment', parsed.fragment) %}
{%-     do info_dict.__setitem__('health-check-netloc-list', slave_instance.get('health-check-failover-url-netloc-list', '').split()) %}
{%-     do slave_instance.__setitem__(prefix, info_dict) %}
{%-   endfor %}
{%-   do slave_instance.__setitem__('health-check-failover-ssl-proxy-verify', ('' ~ slave_instance.get('health-check-failover-ssl-proxy-verify', '')).lower() in TRUE_VALUES) %}
{%-   for key in ['https-only', 'websocket-transparent'] %}
{%-     do slave_instance.__setitem__(key, ('' ~ slave_instance.get(key, 'true')).lower() in TRUE_VALUES) %}
{%-   endfor %}
{%-   for key in ['enable_cache', 'disable-no-cache-request', 'disable-via-header', 'prefer-gzip-encoding-to-backend', 'strict-transport-security-sub-domains', 'strict-transport-security-preload'] %}
{%-     do slave_instance.__setitem__(key, ('' ~ slave_instance.get(key, 'false')).lower() in TRUE_VALUES) %}
{%-   endfor %}
{%-   for key in ['disabled-cookie-list'] %}
{%-     do slave_instance.__setitem__(key, slave_instance.get(key, '').split()) %}
{%-   endfor %}
{%-   for key, default in [('virtualhostroot-http-port', '80'), ('virtualhostroot-https-port', '443'), ('strict-transport-security', '0')] %}
{%-     do slave_instance.__setitem__(key, int(slave_instance.get(key, default))) %}
{%-   endfor %}
{%-   do slave_instance.__setitem__('default-path', slave_instance.get('default-path', '').strip('/') | urlencode) %}
{%-   do slave_instance.__setitem__('path', slave_instance.get('path', '').strip('/')) %}
{#-   Manage ciphers #}
{%-   set slave_ciphers = [] %}
{%-   for cipher in slave_instance.get('ciphers', '').strip().split() %}
{%-     do slave_ciphers.append(CIPHER_TRANSLATION_DICT.get(cipher, cipher)) %}
{%-   endfor %}
{%-   if slave_ciphers %}
{%-     set slave_cipher_list = ':'.join(slave_ciphers) %}
{%-   else %}
{%-     set slave_cipher_list = ':'.join(configuration['ciphers'].strip().split()) %}
{%-   endif %}
{%-   do slave_instance.__setitem__('ciphers', slave_cipher_list) %}
{#-   Manage common instance parameters #}
{%-   set slave_type = slave_instance.get('type', '') %}
{%-   set enable_cache = (slave_instance['enable_cache'] and slave_type != 'redirect') %}
{%-   set slave_reference = slave_instance.get('slave_reference') %}
{%-   set slave_kedifa = slave_kedifa_information.get(slave_reference) %}

{#-   Setup backend URLs for frontend-haproxy #}
{%-   if slave_type == 'redirect' %}
{%-     do slave_instance.__setitem__('backend-http-url', slave_instance.get('url', '').rstrip('/')) %}
{%-     if slave_instance.get('https-url') %}
{%-       do slave_instance.__setitem__('backend-https-url', slave_instance.get('https-url', '').rstrip('/')) %}
{%-     endif %}
{%-   elif enable_cache %}
{%-     if 'domain' in slave_instance %}
{%-       if not slave_instance.get('custom_domain') %}
{%-         do slave_instance.__setitem__('custom_domain', slave_instance.get('domain')) %}
{%-       endif %}
{%-     endif %}
{%-     do slave_instance.__setitem__('backend-http-url', cache_access) %}
{%-     if slave_instance.get('https-url') %}
{%-       do slave_instance.__setitem__('backend-https-url', ssl_cache_access) %}
{%-     endif %}
{%-     do cached_server_dict.__setitem__(slave_reference, slave_configuration_section_name) %}
{%-   else %}
{%-     do slave_instance.__setitem__('backend-http-url', backend_haproxy_http_url) %}
{%-     if slave_instance.get('https-url') %}
{%-       do slave_instance.__setitem__('backend-https-url', backend_haproxy_https_url) %}
{%-     endif %}
{%-   endif %}
{%-   for frontend_key, key in [('backend-http-info', 'backend-http-url'), ('backend-https-info', 'backend-https-url')] %}
{%-     if key in slave_instance %}
{%-       set parsed = urllib_module.parse.urlparse(slave_instance[key]) %}
{%-       do slave_instance.__setitem__(frontend_key, {
            'scheme': parsed.scheme,
            'hostname': parsed.hostname,
            'port': parsed.port or DEFAULT_PORT[parsed.scheme],
            'path': parsed.path,
            'fragment': parsed.fragment,
            'query': parsed.query }) %}
            {%-     endif %}
{%-   endfor %}

{%-   if slave_kedifa %}
{%-     set key_download_url = slave_kedifa.get('key-download-url') %}
{%-   else %}
{%-     set key_download_url = 'notreadyyet' %}
{%-   endif %}
{%-   set slave_parameter_dict = generic_instance_parameter_dict.copy() %}
{%-   set slave_publish_dict = {} %}
{%-   set slave_configuration_section_name = 'slave-instance-%s-configuration' % slave_reference %}
{%-   set slave_logrotate_section = slave_reference + "-logs" %}
{%-   set slave_log_directory_section = slave_reference + "-log-directory" %}
{%-   set slave_password_section = slave_reference + "-password" %}
{%-   set slave_htpasswd_section = slave_reference + "-htpasswd" %}
{%-   set slave_ln_section = slave_reference + "-ln" %}
{#-   extend parts #}
{%-   do part_list.extend([slave_ln_section]) %}
{%-   set slave_log_folder = '${logrotate-directory:logrotate-backup}/' + slave_reference + "-logs" %}
{#-   Pass backend timeout values #}
{%-   for key in ['backend-connect-timeout', 'backend-connect-retries', 'request-timeout', 'authenticate-to-backend'] %}
{%-     if slave_instance.get(key, '') == '' %}
{%-       do slave_instance.__setitem__(key, configuration[key]) %}
{%-     endif %}
{%-   endfor %}
{%-   do slave_instance.__setitem__('strict-transport-security', int(slave_instance['strict-transport-security'])) %}
{%-   do slave_instance.__setitem__('authenticate-to-backend', ('' ~ slave_instance.get('authenticate-to-backend', '')).lower() in TRUE_VALUES) %}
{%-   do slave_instance.__setitem__('health-check-authenticate-to-failover-backend', ('' ~ slave_instance.get('health-check-authenticate-to-failover-backend', '')).lower() in TRUE_VALUES) %}
{#-   Setup active check #}
{%-   do slave_instance.__setitem__('health-check',  ('' ~ slave_instance.get('health-check', '')).lower() in TRUE_VALUES) %}
{%-   if slave_instance['health-check']  %}
{%-     if 'health-check-http-method' not in slave_instance %}
{%-       do slave_instance.__setitem__('health-check-http-method', 'GET') %}
{%-     endif %}
{%-     if 'health-check-interval' not in slave_instance %}
{%-       do slave_instance.__setitem__('health-check-interval', '5') %}
{%-     endif %}
{%-     if 'health-check-rise' not in slave_instance %}
{%-       do slave_instance.__setitem__('health-check-rise', '1') %}
{%-     endif %}
{%-     if 'health-check-fall' not in slave_instance %}
{%-       do slave_instance.__setitem__('health-check-fall', '2') %}
{%-     endif %}
{%-     if 'health-check-timeout' not in slave_instance %}
{%-       do slave_instance.__setitem__('health-check-timeout', '2') %}
{%-     endif %}
{%-     do slave_instance.__setitem__('health-check-http-path', slave_instance.get('health-check-http-path') or '/') %}
{%-   else %}
{%-     do slave_instance.__setitem__('health-check-http-method', '') %}
{%-     do slave_instance.__setitem__('health-check-http-path', '') %}
{%-   endif %} {# if slave_instance['health-check'] #}
{#-   Set Up log files #}
{%-   do slave_parameter_dict.__setitem__('access_log', '/'.join([frontend_directory['slave-log'], '%s_access_log' % slave_reference])) %}
{%-   do slave_parameter_dict.__setitem__('frontend_log', '/'.join([frontend_directory['slave-log'], '%s_frontend_log' % slave_reference])) %}
{%-   do slave_parameter_dict.__setitem__('backend_log', '/'.join([frontend_directory['slave-log'], '%s_backend_log' % slave_reference])) %}
{%-   do slave_instance.__setitem__('access_log', slave_parameter_dict.get('access_log')) %}
{%-   do slave_instance.__setitem__('frontend_log', slave_parameter_dict.get('frontend_log')) %}
{%-   do slave_instance.__setitem__('backend_log', slave_parameter_dict.get('backend_log')) %}
{#-   Add slave log directory to the slave log access dict #}
{%-   do slave_log_dict.__setitem__(slave_reference, slave_log_folder) %}
{%-   set furled = furl_module.furl(frontend_configuration['slave-introspection-secure_access']) %}
{%-   do furled.set(username = slave_reference.lower()) %}
{%-   do furled.set(password = '${'+ slave_password_section +':passwd}') %}
{%-   do furled.set(path = slave_reference + '/') %}
{#-   We unquote, as furl quotes automatically, but there is buildout value on purpose like ${...:...} in the passwod #}
{%-   set slave_log_access_url = urllib_module.parse.unquote(furled.tostr()) %}
{%-   do slave_publish_dict.__setitem__('log-access', slave_log_access_url) %}
{%-   do slave_publish_dict.__setitem__('slave-reference', slave_reference) %}
{%-   do slave_publish_dict.__setitem__('backend-client-caucase-url', backend_client_caucase_url) %}
{#-   Set slave domain if none was defined #}
{%-   if slave_instance.get('custom_domain', None) == None %}
{%-     set domain_prefix = slave_instance.get('slave_reference').replace("-", "").replace("_", "").lower() %}
{%-     do slave_instance.__setitem__('custom_domain', "%s.%s" % (domain_prefix, slapparameter_dict.get('domain'))) %}
{%-   endif %}
{%-   do slave_publish_dict.__setitem__('domain', slave_instance.get('custom_domain')) %}
{%-   do slave_publish_dict.__setitem__('url', "http://%s" % slave_instance.get('custom_domain')) %}
{%-   do slave_publish_dict.__setitem__('site_url', "http://%s" % slave_instance.get('custom_domain')) %}
{%-   do slave_publish_dict.__setitem__('secure_access', 'https://%s' % slave_instance.get('custom_domain')) %}
{%-   do slave_instance.__setitem__('server-alias', slave_instance.get('server-alias', '').split()) %}
{%-   set host_list = slave_instance['server-alias'] %}
{%-   if slave_instance.get('custom_domain') not in host_list %}
{%-     do host_list.append(slave_instance.get('custom_domain')) %}
{%-   endif %}
{%-   do slave_instance.__setitem__('host_list', host_list) %}
{%-   do slave_instance.__setitem__('type', slave_instance.get('type', '')) %}
{%-   if slave_instance['type'] in ['notebook', 'websocket'] %}
{#-     For websocket like sites forcibly disable HTTP2 and HTTP3 #}
{%-     do slave_instance.__setitem__('enable-http2', False) %}
{%-     do slave_instance.__setitem__('enable-http3', False) %}
{%-   else %}
{%-     do slave_instance.__setitem__('enable-http2', ('' ~ slave_instance.get('enable-http2', configuration['enable-http2-by-default'])).lower() in TRUE_VALUES) %}
{%-     if slave_instance['enable-http2'] %}
{%-       do slave_instance.__setitem__('enable-http3', ('' ~ slave_instance.get('enable-http3', configuration['enable-http3'])).lower() in TRUE_VALUES) %}
{%-     else %}
{%-       do slave_instance.__setitem__('enable-http3', False) %}
{%-     endif %}
{%-   endif %}
{%-   set websocket_path_list = [] %}
{%-   for websocket_path in ('' ~ (slave_instance.get('websocket-path-list', '')) or '').split() %}
{%-     set websocket_path = websocket_path.strip('/') %}
{#-   Unquote the path, so %20 and similar can be represented correctly #}
{%-     set websocket_path = urllib_module.parse.unquote(websocket_path.strip()) %}
{%-     if websocket_path %}
{%-       do websocket_path_list.append(websocket_path) %}
{%-     endif %}
{%-   endfor %}
{%-   do slave_instance.__setitem__('websocket-path-list', websocket_path_list) %}
{#- Handle alpn negotiation -#}
{%-   if not slave_instance['enable-http2'] %}
{%-     do slave_instance.__setitem__('alpn', "alpn http/1.1,http/1.0") %}
{%-   else %}
{%-     if http3_enable.lower() in TRUE_VALUES and slave_instance['enable-http3'] %}
{%-       do slave_instance.__setitem__('alpn', "alpn h3,h2,http/1.1,http/1.0") %}
{%-     else %}
{%-       do slave_instance.__setitem__('alpn', "alpn h2,http/1.1,http/1.0") %}
{%-     endif %}
{%-   endif %}

[slave-log-directory-dict]
{{slave_reference}} = {{ slave_log_folder }}

[slave-password]
{{ slave_reference }} = {{ '${' + slave_password_section + ':passwd}' }}

[slave-htpasswd]
{{ slave_reference }} = {{ '${' + slave_htpasswd_section + ':file}' }}

{#-   Set slave logrotate entry #}
[{{slave_log_directory_section}}]
recipe = slapos.cookbook:mkdirectory
{#- Direct reference to slave_log_folder is on purpose to not depend on slave-log-directory-dict #}
log-directory = {{ slave_log_folder }}

[{{slave_logrotate_section}}]
<= logrotate-entry-base
name = ${:_buildout_section_name_}
log = {{slave_parameter_dict.get('access_log')}} {{slave_parameter_dict.get('frontend_log')}} {{slave_parameter_dict.get('backend_log')}}
backup = {{ '${' + slave_log_directory_section + ':log-directory}' }}
rotate-num = {{ dumps('' ~ configuration['rotate-num']) }}
# disable delayed compression, as log filenames shall be stable
delaycompress =

{#-   integrate current logs inside #}

[{{slave_ln_section}}]
recipe = plone.recipe.command
stop-on-error = false
log-directory = {{ '${' + slave_logrotate_section + ':backup}' }}
command =
  ln -sf {{slave_parameter_dict.get('access_log')}} ${:log-directory}/access.log
  ln -sf {{slave_parameter_dict.get('frontend_log')}} ${:log-directory}/frontend.log
  ln -sf {{slave_parameter_dict.get('backend_log')}} ${:log-directory}/backend.log

{#-   Set password for slave #}

[{{slave_password_section}}]
recipe = slapos.cookbook:generate.password
storage-path = {{ frontend_directory['slave-configuration'] }}/.{{slave_reference}}.passwd
bytes = 8

[{{ slave_htpasswd_section }}]
recipe = plone.recipe.command
{#- Can be stopped on error, as does not rely on self provided service #}
stop-on-error = True
file = {{ frontend_directory['slave-configuration'] }}/.{{ slave_reference }}.htpasswd
{#- update-command is not needed, as if the ${:password} would change, the whole part will be recalculated #}
password = {{ '${' + slave_password_section + ':passwd}' }}
command = {{ software_parameter_dict['htpasswd'] }} -cb ${:file} {{ slave_reference.lower() }} ${:password}

{#-   ################################################## #}
{#-   Set Slave Certificates if needed                   #}
{#-   Set certificate key for custom configuration       #}
{%-   set cert_name = slave_reference.replace('-','.') + '.pem' %}
{%-   set certificate = '%s/%s' % (frontend_directory['autocert'], cert_name) %}
{%-   do slave_parameter_dict.__setitem__('certificate', certificate )%}
{%-   do slave_instance.__setitem__('certificate', certificate )%}
{#-   Set ssl certificates for each slave #}
{%-     for cert_name in ('ssl_csr', 'ssl_proxy_ca_crt', 'health-check-failover-ssl-proxy-ca-crt')%}
{%-       set cert_file_key = 'path_to_' + cert_name %}
{%-       if cert_name in slave_instance %}
{%-         set cert_title = '%s-%s' % (slave_reference, cert_name.replace('ssl_', '')) %}
{%-         set cert_file = '/'.join([frontend_directory['custom-ssl-directory'], cert_title.replace('-','.')]) %}
{%-         do part_list.append(cert_title) %}
{%-         do slave_parameter_dict.__setitem__(cert_name, cert_file) %}
{%-         do slave_instance.__setitem__(cert_file_key, cert_file) %}
{#-         Store certificates on fs #}
[{{ cert_title }}]
< = jinja2-template-base
url = {{ empty_template }}
output = {{ cert_file }}
extra-context =
    key content {{ cert_title + '-config:value' }}
{#-         BBB: SlapOS Master non-zero knowledge BEGIN #}
{#-         Store certificate in config #}
[{{ cert_title + '-config' }}]
value = {{ dumps(slave_instance.get(cert_name)) }}
{%-       else %}
{%-         do slave_instance.__setitem__(cert_file_key, None) %}
{%-       endif %} {#- if cert_name in slave_instance #}
{%-     endfor %}
{#-   Set Up Certs #}
{%-   if 'ssl_key' in slave_instance and 'ssl_crt' in slave_instance %}
{%-     set cert_title = '%s-crt' % (slave_reference) %}
{%-     set cert_file = '/'.join([directory['bbb-ssl-dir'], cert_title.replace('-','.')]) %}
{%-     do kedifa_updater_mapping.append((key_download_url, certificate, cert_file)) %}
{%-     do part_list.append(cert_title) %}
{%-     do slave_parameter_dict.__setitem__("ssl_crt", cert_file) %}

[{{cert_title}}]
< = jinja2-template-base
url = {{ empty_template }}
output = {{ cert_file }}
cert-content = {{ dumps(slave_instance.get('ssl_crt') + '\n' + slave_instance.get('ssl_ca_crt', '') + '\n' + slave_instance.get('ssl_key')) }}
extra-context =
    key content :cert-content
{%-   else %}
{%-     do kedifa_updater_mapping.append((key_download_url, certificate, frontend_haproxy_configuration['master-certificate'])) %}
{%-   endif %}
{#-   BBB: SlapOS Master non-zero knowledge END #}

{#-   ########################################## #}
{#-   Set Slave Configuration                    #}

[{{ slave_configuration_section_name }}]
certificate = {{ certificate }}
https_port = {{ dumps('' ~ configuration['port']) }}
http_port = {{ dumps('' ~ configuration['plain_http_port']) }}
local_ipv4 = {{ dumps('' ~ instance_parameter_dict['ipv4-random']) }}
{%-   for key, value in slave_instance.items() %}
{%-     if value is not none %}
{{ key }} = {{ dumps(value) }}
{%-     endif %}
{%-   endfor %}

{#-   ###############################  #}
{#-   Prepare Slave Information        #}
{%-   do slave_instance_information_list.append(slave_publish_dict) %}
{%-   do frontend_slave_dict.__setitem__(slave_instance['slave_reference'], slave_instance) %}
{%-   if slave_type != 'redirect' %}
{%-     do backend_slave_dict.__setitem__(slave_instance['slave_reference'], slave_instance) %}
{%-   endif %}
{%- endfor %} {# Slave iteration ends for slave_instance in slave_instance_list #}

{%- do part_list.append('slave-introspection') %}
{#- ############################################## #}
{#- ## Prepare virtualhost for slaves using cache  #}
[slave-introspection-parameters]
local-ipv4 = {{ dumps(instance_parameter_dict['ipv4-random']) }}
global-ipv6 = {{ dumps(global_ipv6) }}
https-port = {{ frontend_configuration['slave-introspection-https-port'] }}
ip-access-certificate = {{ frontend_configuration.get('ip-access-certificate') }}
nginx-mime = {{ software_parameter_dict['nginx_mime'] }}
access-log = {{ dumps(frontend_haproxy_configuration['slave-introspection-access-log']) }}
error-log = {{ dumps(frontend_haproxy_configuration['slave-introspection-error-log']) }}
var = {{ directory['slave-introspection-var'] }}
pid = {{ frontend_haproxy_configuration['slave-introspection-pid-file'] }}

[slave-introspection-config]
<= jinja2-template-base
url = {{ software_parameter_dict['template_slave_introspection_httpd_nginx'] }}
output = {{ frontend_configuration['slave-introspection-configuration'] }}
extra-context =
    section slave_log_directory slave-log-directory-dict
    section slave_htpasswd slave-htpasswd
    section parameter_dict slave-introspection-parameters

[slave-introspection]
recipe = slapos.cookbook:wrapper
command-line = {{ software_parameter_dict['nginx'] }}
  -c ${slave-introspection-config:output}

wrapper-path = {{ directory['service'] }}/slave-instrospection-nginx
hash-existing-files = ${buildout:directory}/software_release/buildout.cfg



{#- Publish information for the instance #}
[publish]
recipe = slapos.cookbook:publish.serialised
{%- if configuration['extra_slave_instance_list'] %}
{#-   sort_keys are important in order to avoid shuffling parameters on each run #}
slave-instance-information-list = {{ json_module.dumps(slave_instance_information_list, sort_keys=True) }}
{%- endif %}
monitor-base-url = {{ monitor_base_url }}
kedifa-csr-url = ${expose-csr:url}/${expose-csr-link-csr-kedifa:filename}
backend-client-csr-url = ${expose-csr:url}/${expose-csr-link-csr-backend-haproxy:filename}
csr-certificate = ${expose-csr-certificate-get:certificate}
{%-   set furled = furl_module.furl(backend_haproxy_configuration['statistic-frontend-secure_access']) %}
{%-   do furled.set(username = backend_haproxy_configuration['statistic-username']) %}
{%-   do furled.set(password = backend_haproxy_configuration['statistic-password']) %}
{%-   do furled.set(path = '/') %}
{#-   We unquote, as furl quotes automatically, but there is buildout value on purpose like ${...:...} in the passwod #}
{%-   set statistic_url = urllib_module.parse.unquote(furled.tostr()) %}
backend-haproxy-statistic-url = {{ statistic_url }}
{#-   sort_keys are important in order to avoid shuffling parameters on each run #}
node-information-json = {{ json_module.dumps(node_information, sort_keys=True) }}

[kedifa-updater]
recipe = slapos.cookbook:wrapper
command-line = {{ software_parameter_dict['kedifa-updater'] }}
  --server-ca-certificate {{ kedifa_configuration['ca-certificate'] }}
  --identity {{ kedifa_configuration['certificate'] }}
  --master-certificate {{ frontend_haproxy_configuration['master-certificate'] }}
  --on-update "{{ frontend_haproxy_configuration['frontend-graceful-command'] }}"
  ${kedifa-updater-mapping:file}
  {{ kedifa_configuration['kedifa-updater-state-file'] }}

wrapper-path = {{ directory['service'] }}/kedifa-updater
hash-existing-files = ${buildout:directory}/software_release/buildout.cfg

[kedifa-updater-run]
recipe = plone.recipe.command
{#- Can be stopped on error, as does not rely on self provided service but on service which comes from another partition #}
stop-on-error = True
command = {{ software_parameter_dict['kedifa-updater'] }} --prepare-only ${kedifa-updater-mapping:file} --on-update "{{ frontend_haproxy_configuration['frontend-graceful-command'] }}"
update-command = ${:command}

[kedifa-updater-mapping]
recipe = slapos.recipe.template:jinja2
file = {{ kedifa_configuration['kedifa-updater-mapping-file'] }}
inline =
{%- for mapping in kedifa_updater_mapping %}
  {{ mapping[0] }} {{ mapping[1] }} {{ mapping[2] }}
{%- endfor %}

output = ${:file}

##<Frontend haproxy>
[frontend-haproxy-slave-list]
dict = {{ dumps(frontend_slave_dict) }}
{%- set slave_instance_hostname_frontend_order = [] %}
{%- for slave_instance in frontend_slave_dict.values() %}
{%-   for hostname in slave_instance['host_list'] %}
{%-     if '*' in hostname %}
{%-       set order_value = hostname.count('.') %}
{%-     else %}
{%-       set order_value = 1000 %}
{%-     endif %}
{%-     do slave_instance_hostname_frontend_order.append({
  'index': order_value,
  'hostname': hostname,
  'slave_reference': slave_instance['slave_reference']}) %}
{%-   endfor  %}
{%- endfor %}
order = {{ dumps(slave_instance_hostname_frontend_order) }}

[frontend-haproxy-crt-list]
<= jinja2-template-base
template = {{ template_frontend_haproxy_crt_list }}
rendered = ${frontend-haproxy-config:crt-list}
extra-context =
  key frontend_slave_dict frontend-haproxy-slave-list:dict
  key frontend_slave_order frontend-haproxy-slave-list:order
  section configuration frontend-haproxy-config

[frontend-haproxy-configuration]
< = jinja2-template-base
template = {{ template_frontend_haproxy_configuration }}
rendered = ${frontend-haproxy-config:file}
extra-context =
  key frontend_slave_dict frontend-haproxy-slave-list:dict
  key frontend_slave_order frontend-haproxy-slave-list:order
  key crt_list frontend-haproxy-crt-list:rendered
  section configuration frontend-haproxy-config

[frontend-haproxy-config]
{%- for key, value in frontend_haproxy_configuration.items() %}
{{ key }} = {{ value }}
{%- endfor %}
local-ipv4 = {{ dumps('' ~ instance_parameter_dict['ipv4-random']) }}
global-ipv6 = ${slap-configuration:ipv6-random}
request-timeout = {{ dumps('' ~ configuration['request-timeout']) }}
autocert-directory = {{ frontend_directory['autocert'] }}

##</Frontend haproxy>

##<Backend haproxy>
[backend-haproxy-configuration]
< = jinja2-template-base
url = {{ template_backend_haproxy_configuration }}
output = ${backend-haproxy-config:file}
backend_slave_dict = {{ dumps(backend_slave_dict) }}
{%- set slave_instance_hostname_backend_order = [] %}
{%- for slave_instance in backend_slave_dict.values() %}
{%-   for hostname in slave_instance['host_list'] %}
{%-     if '*' in hostname %}
{%-       set order_value = hostname.count('.') %}
{%-     else %}
{%-       set order_value = 1000 %}
{%-     endif %}
{%-     do slave_instance_hostname_backend_order.append({
  'index': order_value,
  'hostname': hostname,
  'slave_reference': slave_instance['slave_reference']}) %}
{%-   endfor  %}
{%- endfor %}
order = {{ dumps(slave_instance_hostname_backend_order) }}
extra-context =
  key backend_slave_dict :backend_slave_dict
  key backend_slave_order :order
  section configuration backend-haproxy-config

[backend-haproxy-config]
{%- for key, value in backend_haproxy_configuration.items() %}
{{ key }} = {{ value }}
{%- endfor %}
local-ipv4 = {{ dumps('' ~ instance_parameter_dict['ipv4-random']) }}
global-ipv6 = ${slap-configuration:ipv6-random}
request-timeout = {{ dumps('' ~ configuration['request-timeout']) }}
backend-connect-timeout = {{ dumps('' ~ configuration['backend-connect-timeout']) }}
backend-connect-retries =  {{ dumps('' ~ configuration['backend-connect-retries']) }}

[template-expose-csr-link-csr]
recipe = plone.recipe.command
stop-on-error = False
update-command = ${:command}
csr_path = {{ directory['expose-csr'] }}/${:filename}
command =
  ln -sf ${:csr} ${:csr_path}

[expose-csr-link-csr-backend-haproxy]
<= template-expose-csr-link-csr
filename = backend-haproxy-csr.pem
csr = {{ backend_haproxy_configuration['csr'] }}

[expose-csr-link-csr-kedifa]
<= template-expose-csr-link-csr
filename = kedifa-csr.pem
csr = {{ kedifa_configuration['csr'] }}

##</Backend haproxy>

[buildout]
extends =
  {{ profile_common }}
  {{ profile_logrotate_base }}
  {{ profile_monitor }}

parts +=
    kedifa-updater
    kedifa-updater-run
    frontend-haproxy-configuration
    backend-haproxy-configuration
    promise-key-download-url-ready
{%- for part in part_list %}
{{ '    %s' % part }}
{%- endfor %}
    publish
    promise-expose-csr-ip-port

cache-access = {{ cache_access }}

[expose-csr-certificate]
recipe = plone.recipe.command
certificate = {{ directory['expose-csr-etc'] }}/certificate.pem
key = {{ directory['expose-csr-etc'] }}/key.pem

{#- Can be stopped on error, as does not rely on self provided service #}
stop-on-error = True
update-command = ${:command}
command =
  if ! [ -f ${:key} ] && ! [ -f ${:certificate} ] ; then
    openssl req -new -newkey rsa -sha256 -subj \
      "/O={{ expose_csr_organization }}/OU={{ expose_csr_organizational_unit }}/CN=${slap-configuration:ipv6-random}" \
      -days 5 -nodes -x509 -keyout ${:key} -out ${:certificate}
  fi

[expose-csr-configuration]
ip = ${slap-configuration:ipv6-random}
port = 17001
key = ${expose-csr-certificate:key}
certificate = ${expose-csr-certificate:certificate}
error-log = {{ directory['log'] }}/expose-csr.log
var = {{ directory['expose-csr-var'] }}
pid = {{ directory['var'] }}/nginx-expose-csr.pid
root = {{ directory['expose-csr'] }}
nginx_mime = {{ software_parameter_dict['nginx_mime'] }}

[expose-csr-template]
recipe = slapos.recipe.template:jinja2
output = {{ directory['expose-csr-etc'] }}/nginx.conf
url = {{ template_expose_csr_nginx_conf }}
context =
  section configuration expose-csr-configuration

[promise-expose-csr-ip-port]
<= monitor-promise-base
promise = check_socket_listening
name = expose-csr-ip-port-listening.py
config-host = ${expose-csr-configuration:ip}
config-port = ${expose-csr-configuration:port}

[expose-csr]
recipe = slapos.cookbook:wrapper
command-line = {{ software_parameter_dict['nginx'] }}
  -c ${expose-csr-template:output}
url = https://[${expose-csr-configuration:ip}]:${expose-csr-configuration:port}

wrapper-path = {{ directory['service'] }}/expose-csr
hash-existing-files = ${buildout:directory}/software_release/buildout.cfg

[expose-csr-certificate-get]
recipe = slapos.recipe.build
certificate-file = ${expose-csr-certificate:certificate}
init =
  import os
  options['certificate'] = ''
  if os.path.exists(options['certificate-file']):
    with open(options['certificate-file'], 'r') as fh:
      options['certificate'] = fh.read()

[key-download-url-ready]
recipe = slapos.recipe.build
output = {{ url_ready_file }}
master-key-download-url = {{ master_key_download_url }}
slave-kedifa-information = {{ dumps(slave_kedifa_information) }}
init =
  not_ready_count = 0
  if not options['master-key-download-url'] or 'NotReadyYet' in options['master-key-download-url']:
    not_ready_count += 1
  for slave_kedifa_reference, slave_kedifa_information in options['slave-kedifa-information'].items():
    key_download_url = slave_kedifa_information.get('key-download-url')
    if not key_download_url or 'NotReadyYet' in key_download_url:
      not_ready_count += 1
  with open(options['output'], 'w') as fh:
    if not_ready_count > 0:
      fh.write('%s' % (not_ready_count,))
    else:
      fh.write('')

[promise-key-download-url-ready]
<= monitor-promise-base
promise = check_file_state
name = ${:_buildout_section_name_}.py
config-filename = ${key-download-url-ready:output}
config-state = empty
