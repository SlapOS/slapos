{%- import "caucase" as caucase with context %}
[buildout]
extends =
  {{ software_parameter_dict['template-common'] }}
  {{ software_parameter_dict['template-monitor2'] }}

parts +=
  kedifa-caucase-updater
  front-haproxy

[directory]
kedifa-ssl = ${:srv}/kedifa-ssl
kedifa-caucase-updater = ${:srv}/kedifa-caucase-updater

[kedifa-config]
certificate = ${directory:kedifa-ssl}/certificate.pem
key = ${:certificate}
ca-certificate = ${directory:kedifa-ssl}/ca-certificate.pem
crl = ${directory:kedifa-ssl}/crl.pem
template-csr = ${directory:kedifa-ssl}/template-csr.pem

[kedifa-csr]
<= csr
organizational_unit = {{ slapparameter_dict['node-name'] }}
template-csr = ${kedifa-config:template-csr}
key = ${kedifa-config:key}
ip = {{ instance_parameter_dict['ipv6-random'] }}

[kedifa-caucase-updater]
hash-existing-files = ${buildout:directory}/software_release/buildout.cfg
{{ caucase.updater(
     prefix='kedifa-caucase-updater',
     buildout_bin_directory=software_parameter_dict['bin-directory'],
     updater_path='${directory:service}/kedifa-caucase-updater',
     url=slapparameter_dict['kedifa-caucase-url'],
     data_dir='${directory:kedifa-caucase-updater}',
     crt_path='${kedifa-config:certificate}',
     ca_path='${kedifa-config:ca-certificate}',
     crl_path='${kedifa-config:crl}',
     key_path='${kedifa-csr:key}',
     template_csr='${kedifa-csr:template-csr}'
)}}

[directory]
backend-haproxy-rsyslogd-spool = ${:run}/backend-haproxy-rsyslogd-spool

[jinja2-template-base]
recipe = slapos.recipe.template:jinja2
extensions = jinja2.ext.do
extra-context =
context =
    ${:extra-context}

[front-rsyslogd-configuration-section]
log-socket = ${directory:run}/frlog.sck
log-file = ${directory:log}/front-haproxy.log
pid-file = ${directory:run}/front-rsyslogd.pid
spool-directory = ${directory:backend-haproxy-rsyslogd-spool}

[front-rsyslogd-configuration]
<= jinja2-template-base
template = {{ software_parameter_dict['template-front-rsyslogd'] }}
rendered = ${directory:etc}/front-rsyslogd.conf
extra-context =
  section configuration front-rsyslogd-configuration-section

[front-rsyslogd]
recipe = slapos.cookbook:wrapper
command-line = {{ software_parameter_dict['rsyslogd'] }} -n -i ${front-rsyslogd-configuration-section:pid-file} -f ${front-rsyslogd-configuration:rendered}
wrapper-path = ${directory:service}/${:_buildout_section_name_}
log-socket = ${front-rsyslogd-configuration-section:log-socket}
hash-existing-files = ${buildout:directory}/software_release/buildout.cfg

[front-configuration-section]
log-socket = ${front-rsyslogd:log-socket}
frontend-list = {{ dumps(slapparameter_dict['frontend-list']) }}
pid-file = ${directory:run}/front-haproxy.pid
# XXX!
request-timeout = 100
backend-connect-timeout = 100
backend-connect-retries = 3
http-port = 8080
https-port = 4443
global-ipv6 = ::1
local-ipv4 = 127.0.0.1
statistic-port = 9696
statistic-certificate = /dev/null
statistic-identification = oink
statistic-username = statu
statistic-password = statp
certificate = /dev/null


[front-configuration]
<= jinja2-template-base
binary = {{ software_parameter_dict['haproxy'] }}
template = {{ software_parameter_dict['template-front-haproxy'] }}
rendered = ${directory:etc}/front-haproxy.cfg
extra-context =
  section configuration front-configuration-section

[front-haproxy]
recipe = slapos.cookbook:wrapper
command-line = ${front-configuration:binary} -f ${front-configuration:rendered}
wrapper-path = ${directory:service}/${:_buildout_section_name_}
hash-existing-files = ${buildout:directory}/software_release/buildout.cfg
