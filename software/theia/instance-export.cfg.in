[buildout]
extends = ${theia:rendered}
          ${template-pbsready-export:rendered}

# The resilient stack makes the 'resilient' instance
# request the 'export' instance with a 'namebase' parameter.
# The export template then expects to receive it in
# slap-parameter:namebase
parts +=
  monitor-base
  $${:theia-parts}
  $${:theia-environment-parts}
  publish-connection-parameter

# The resilient stack makes the 'resilient' instance
# request the 'export' instance with a 'namebase' parameter.
# The export template then expects to receive it in
# slap-parameter:namebase
[slap-parameter]
namebase = ${slap-configuration:configuration.namebase}

# Change frontend name to help disambiguation
[apache-frontend]
name = Theia Export Frontend

# The resilient export stack periodically calls exporter:wrapper
# and then notifies the pull-backup instance that data is ready
# to be pulled from the export instance.
# All it expects is that a script be available in exporter:wrapper.
[exporter]
wrapper = $${theia-export-script:rendered}

[theia-export-script]
recipe = slapos.recipe.template:jinja2
template = ${software-info:theia-export-script}
rendered = $${directory:bin}/theia-export-script
mode = 0700
context =
  raw python ${software-info:python-with-eggs}
  raw rsync ${software-info:rsync}
  raw sqlite3 ${software-info:sqlite3}
  raw home_path $${buildout:directory}
  raw backup_path $${directory:backup}
  raw instance_path $${directory:runner}/instance
  raw proxy_path $${directory:runner}/var/proxy.db
  raw project_path $${directory:project}
  raw public_path $${directory:frontend-static-public}

# Extends publish section with resilient parameters
[publish-connection-parameter]
<= resilient-publish-connection-parameter
