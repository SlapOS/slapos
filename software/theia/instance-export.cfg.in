[buildout]
extends = ${theia:rendered}
          ${template-pbsready-export:rendered}


parts +=
  monitor-base
  $${:theia-parts}
  $${:theia-environment-parts}
  publish-connection-parameter


# The resilient stack makes the 'resilient' instance
# request the 'export' instance with a 'namebase' parameter.
# The export template then expects to receive it in
# slap-parameter:namebase
[slap-parameter]
namebase = ${slap-configuration:configuration.namebase}


# Change frontend name to help disambiguation
[apache-frontend]
name = Theia Export Frontend


# The resilient export stack periodically calls exporter:wrapper
# and then notifies the pull-backup instance that data is ready
# to be pulled from the export instance.
# All it expects is that a script be available in exporter:wrapper.
[exporter]
wrapper = $${theia-export-script:rendered}

[theia-export-script]
recipe = slapos.recipe.template:jinja2
rendered = $${directory:bin}/theia-export-script
mode = 0700
exitcode-file = $${directory:srv}/exporter-exit-code-file
error-file = $${directory:srv}/exporter-error-message-file
context =
  raw python ${software-info:python-with-eggs}
  raw theia_export ${software-info:theia-export}
  raw bash ${software-info:bash}
  raw rsync ${software-info:rsync}
  raw sqlite3 ${software-info:sqlite3}
  raw root_path $${buildout:directory}
  raw backup_path $${directory:backup}
  raw slapos_cfg $${directory:runner}/etc/slapos.cfg
  raw project_path $${directory:project}
  raw public_path $${directory:frontend-static-public}
  raw exitfile $${:exitcode-file}
  raw errorfile $${:error-file}
template =
  inline:#!{{ bash }}
  {{ python }} {{ theia_export }} \
  --rsync {{ rsync }} \
  --sqlite3 {{ sqlite3 }} \
  --root {{ root_path }} \
  --backup {{ backup_path }} \
  --cfg {{ slapos_cfg }} \
  --dirs {{ project_path }} {{ public_path }} \
  --exitfile {{ exitfile }} \
  --errorfile {{ errorfile }}


# Extends publish section with resilient parameters
[publish-connection-parameter]
<= resilient-publish-connection-parameter
