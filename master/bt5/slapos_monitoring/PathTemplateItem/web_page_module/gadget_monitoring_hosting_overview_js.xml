<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="Web Script" module="erp5.portal_type"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Access_contents_information_Permission</string> </key>
            <value>
              <tuple>
                <string>Anonymous</string>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Associate</string>
                <string>Auditor</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Add_portal_content_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Change_local_roles_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Modify_portal_content_Permission</string> </key>
            <value>
              <tuple>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_View_Permission</string> </key>
            <value>
              <tuple>
                <string>Anonymous</string>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Associate</string>
                <string>Auditor</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>categories</string> </key>
            <value>
              <tuple>
                <string>classification/collaborative/public</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>content_md5</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>default_reference</string> </key>
            <value> <string>gadget_monitoring_hosting_overview.js</string> </value>
        </item>
        <item>
            <key> <string>description</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>gadget_monitoring_hosting_overview_js</string> </value>
        </item>
        <item>
            <key> <string>language</string> </key>
            <value> <string>en</string> </value>
        </item>
        <item>
            <key> <string>portal_type</string> </key>
            <value> <string>Web Script</string> </value>
        </item>
        <item>
            <key> <string>short_title</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>text_content</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*global window, rJS, btoa */\n
/*jslint nomen: true, indent: 2, maxerr: 3*/\n
(function (window, rJS) {\n
  "use strict";\n
\n
  var gadget_klass = rJS(window),\n
    templater = gadget_klass.__template_element,\n
\n
    hosting_widget_template = Handlebars.compile(\n
      templater.getElementById("template-hostings-list").innerHTML\n
    ),\n
    parameters_widget_template = Handlebars.compile(\n
      templater.getElementById("parameters-widget-template").innerHTML\n
    ),\n
    instance_widget_template = Handlebars.compile(\n
      templater.getElementById("instance-details-widget-overview").innerHTML\n
    );\n
\n
  function keysrt(key,desc) {\n
    return function(a,b){\n
     return desc ? ~~(a[key] < b[key]) : ~~(a[key] > b[key]);\n
    };\n
  }\n
\n
  function safeGet(gadget, url) {\n
    var document_id = \'monitor.global\';\n
    gadget.props.jio_gadget.createJio({\n
      type: "query",\n
      sub_storage: {\n
        type: "drivetojiomapping",\n
        sub_storage: {\n
          type: "dav",\n
          url: url\n
        }\n
      }\n
    });\n
    return gadget.props.jio_gadget.get(document_id)\n
      .push(function (doc) {\n
        return doc;\n
      }, function (error) {\n
        console.log(error);\n
        return undefined;\n
      });\n
  }\n
\n
  function getHostingData(gadget, url_list) {\n
    var promise_list = [],\n
      i;\n
    for (i = 0; i < url_list.length; i += 1) {\n
      gadget.props.jio_gadget.createJio({\n
        type: "query",\n
        sub_storage: {\n
          type: "drivetojiomapping",\n
          sub_storage: {\n
            type: "dav",\n
            url: url_list[i]\n
          }\n
        }\n
      });\n
      promise_list.push(safeGet(gadget, url_list[i]));\n
    }\n
    return RSVP.all(promise_list);\n
  }\n
\n
  gadget_klass\n
    .ready(function (gadget) {\n
      gadget.props = {};\n
      gadget.props.hosting_list = [];\n
      gadget.props.opml_key_list = [];\n
      return gadget.getDeclaredGadget("login_gadget")\n
        .push(function (login_gadget) {\n
          gadget.props.login_gadget = login_gadget;\n
        });\n
    })\n
    .ready(function (gadget) {\n
      return gadget.getElement()\n
        .push(function (element) {\n
          gadget.props.element = element;\n
          gadget.props.render_deferred = RSVP.defer();\n
        });\n
    })\n
    .ready(function (gadget) {\n
      return gadget.getDeclaredGadget("jio_gadget")\n
        .push(function (jio_gadget) {\n
          gadget.props.jio_gadget = jio_gadget;\n
        });\n
    })\n
    /*.ready(function (gadget) {\n
      return gadget.getDeclaredGadget("config_gadget")\n
        .push(function (config_gadget) {\n
          gadget.props.config_gadget = config_gadget;\n
        });\n
    })*/\n
    .declareAcquiredMethod("redirect", "redirect")\n
    .declareAcquiredMethod("getSetting", "getSetting")\n
    .declareAcquiredMethod("setSetting", "setSetting")\n
    .declareAcquiredMethod("updateHeader", "updateHeader")\n
    .declareMethod("render", function (options) {\n
      var gadget = this,\n
        opml_tmp_key_list,\n
        hosting_url_list;\n
      //return gadget.props.jio_gadget.getMonitorUrlList()\n
      gadget.props.options = options;\n
      return gadget.updateHeader({\n
          title: \'Monitoring Registered Applications\'\n
        })\n
        .push(function () {\n
          return gadget.getSetting(\'monitor_url_description\');\n
        })\n
        .push(function (url_description_dict) {\n
          var key,\n
            promise_list = [];\n
          gadget.props.opml_dict = url_description_dict;\n
          opml_tmp_key_list = [];\n
          for (key in url_description_dict) {\n
            opml_tmp_key_list.push(key);\n
            promise_list.push(gadget.props.jio_gadget.getMonitorUrlListFromOpml(\n
              url_description_dict[key].href\n
            ));\n
          }\n
          return RSVP.all(promise_list);\n
        })\n
        .push(function (url_list) {\n
          var i,\n
            j,\n
            promise_list = [];\n
          for (i = 0; i < url_list.length; i += 1) {\n
            if (url_list[i]) {\n
              promise_list.push(getHostingData(gadget, url_list[i]));\n
            } else {\n
              //This Feed is not available, remove from key_list\n
              opml_tmp_key_list[i] = undefined;\n
            }\n
          }\n
          return RSVP.all(promise_list);\n
        })\n
        .push(function (document_list) {\n
          var i,\n
            status,\n
            hosting_dict,\n
            hosting_title,\n
            date,\n
            content,\n
            j;\n
\n
          for (i = 0; i < document_list.length; i += 1) {\n
            hosting_dict = {};\n
            status = \'OK\';\n
            hosting_dict.instance_list = [];\n
            date = \'\';\n
            for (j = 0; j < document_list[i].length; j += 1) {\n
              if (document_list[i][j] === undefined) {\n
                continue;\n
              }\n
              hosting_dict.instance_list.push({\n
                title: document_list[i][j].title,\n
                status: document_list[i][j].status,\n
                url: document_list[i][j]._links.monitor.href\n
              });\n
              if (document_list[i][j].status === \'ERROR\') {\n
                if (status !== \'ERROR\') {\n
                  status = \'ERROR\';\n
                  date = document_list[i][j].date || \'\';\n
                  hosting_title = document_list[i][j][\'hosting-title\'] || \'\';\n
                }\n
              } else if (document_list[i][j].status === \'WARNING\') {\n
                if (status !== \'ERROR\' && status !== \'WARNING\') {\n
                  status = \'WARNING\';\n
                  date = document_list[i][j].date || \'\';\n
                  hosting_title = document_list[i][j][\'hosting-title\'] || \'\';\n
                }\n
              } else if (date === \'\') {\n
                date = document_list[i][j].date || \'\';\n
                hosting_title = document_list[i][j][\'hosting-title\'] || \'\';\n
              }\n
            }\n
            hosting_dict.status = status;\n
            hosting_dict.title = hosting_title;\n
            hosting_dict.date = date;\n
            hosting_dict.index = i;\n
            gadget.props.hosting_list.push(hosting_dict);\n
          }\n
          for (i = 0; i < opml_tmp_key_list.length; i += 1) {\n
            if (opml_tmp_key_list[i] !== undefined)  {\n
              gadget.props.opml_key_list.push(opml_tmp_key_list[i]);\n
            }\n
          }\n
          content = hosting_widget_template({\n
            hosting_list: gadget.props.hosting_list\n
          });\n
          gadget.props.element.querySelector(\'.ui-block-a table tbody\')\n
            .innerHTML = content;\n
\n
          return gadget.props.render_deferred.resolve();\n
        });\n
    })\n
\n
\n
    .declareService(function () {\n
      var gadget = this;\n
\n
      function bindOnClick(element) {\n
        var fieldset = $(element.parentNode.querySelector(\'.ui-collapse-content\')),\n
            line = $(element);\n
        if (line.hasClass(\'ui-icon-plus\')) {\n
          line.removeClass(\'ui-icon-plus\');\n
          line.addClass(\'ui-icon-minus\');\n
        } else {\n
          line.removeClass(\'ui-icon-minus\');\n
          line.addClass(\'ui-icon-plus\');\n
        }\n
        if (fieldset !== undefined) {\n
          fieldset.toggleClass(\'ui-content-hidden\');\n
        }\n
        return false;\n
      }\n
\n
      function updateParameterBox(parameter_list, title) {\n
        var element = gadget.props.element.querySelector(\'table[title="\' + title + \'"]\'),\n
        tmp,\n
          i;\n
\n
        if (!element) {\n
          return;\n
        }\n
        for (i = 0; i < parameter_list.length; i += 1) {\n
          if (!parameter_list[i].key) {\n
            continue;\n
          }\n
          element.querySelector(\'.v-\' + parameter_list[i].key).innerHTML = parameter_list[i].value;\n
        }\n
      }\n
\n
      function editMonitorProps (element) {\n
        var index = parseInt($(element).attr(\'rel\'), 10),\n
          promise_list = [];\n
\n
        if (isNaN(index) || gadget.props.document_list.length < index) {\n
          return;\n
        }\n
        \n
        return new RSVP.Queue()\n
          .push(function () {\n
            if (gadget.props.config_gadget) {\n
              return gadget.dropGadget(\'config_gadget\');\n
            }\n
            return false;\n
          })\n
          .push(function () {\n
            gadget.props.config_gadget = null;\n
            return gadget.declareGadget("gadget_monitoring_document_edit.html",\n
              {\n
                element: gadget.props.element,\n
                scope: \'config_gadget\',\n
                sandbox: "public"\n
              }\n
            );\n
          })\n
          .push(function (config_gadget) {\n
            gadget.props.config_gadget = config_gadget;\n
            return gadget.props.config_gadget.popupEdit({\n
              url: gadget.props.document_list[index]._links.private_url.href,\n
              parameters: gadget.props.document_list[index].parameters,\n
              title: gadget.props.document_list[index].title,\n
              root_title: gadget.props.document_list[index][\'hosting-title\'],\n
              page_options: gadget.props.options,\n
              path: \'config\',\n
              key: \'config.tmp\'\n
            }, function (data) {\n
              var update_promise = [],\n
                i,\n
                monitor_user = \'\',\n
                monitor_password = \'\';\n
\n
              // Try to save monitor credential if they are pres\n
              for (i = 0; i < data.length; i += 1) {\n
                if (data[i].key === \'monitor-password\') {\n
                  monitor_password = data[i].value;\n
                }\n
                if ((data[i].key || data[i].title) === \'monitor-user\') {\n
                  monitor_user = data[i].value;\n
                }\n
              }\n
              if (monitor_password && monitor_user) {\n
                update_promise.push(gadget.props.login_gadget.updateUrlValue(\n
                  gadget.props.document_list[index]._links.private_url.href,\n
                  monitor_user,\n
                  monitor_password\n
                ));\n
              }\n
              gadget.props.document_list[index].parameters = data;\n
              updateParameterBox(data, gadget.props.document_list[index].title);\n
              return RSVP.push(update_promise);\n
            });\n
          });\n
      }\n
\n
      function getMonitorCredentials(monitor, hosting_title, index) {\n
        return gadget.props.login_gadget.loginRedirect(\n
          monitor.url,\n
          {\n
            page: \'hosting_overview\',\n
            select: index\n
          },\n
          monitor.title,\n
          hosting_title\n
        );\n
      }\n
\n
      function getSecureDocument(url, auth_login) {\n
        var jio_options = {\n
            type: "query",\n
            sub_storage: {\n
              type: "drivetojiomapping",\n
              sub_storage: {\n
                type: "dav",\n
                url: url\n
              }\n
            }\n
          },\n
          document_id = \'monitor.global\';\n
\n
        jio_options.sub_storage.sub_storage.basic_login = auth_login;\n
        gadget.props.jio_gadget.createJio(jio_options);\n
        return gadget.props.jio_gadget.get(document_id);\n
      }\n
\n
      function getInstanceDict(monitor_dict) {\n
        var instance_dict,\n
          tmp_url,\n
          tmp_process_url;\n
\n
        // Resource view URLs\n
        tmp_url = "#page=resource_view&title=" + monitor_dict.title +\n
          "&root=" + monitor_dict[\'hosting-title\'] +\n
          "&jio_for=" + monitor_dict._links.private_url.href;\n
\n
        tmp_process_url = "#page=process_view&title=" + monitor_dict.title +\n
          "&root=" + monitor_dict[\'hosting-title\'] +\n
          "&jio_for=" + monitor_dict._links.private_url.href;\n
\n
        instance_dict = {\n
          title: monitor_dict.title,\n
          root_title: monitor_dict[\'hosting-title\'],\n
          date: monitor_dict.date,\n
          status: monitor_dict.status,\n
          instance: monitor_dict._embedded.instance || \'\',\n
          public_url: monitor_dict._links.hasOwnProperty(\'public_url\') ? monitor_dict._links.public_url.href : \'\',\n
          private_url: monitor_dict._links.hasOwnProperty(\'private_url\') ? monitor_dict._links.private_url.href : \'\',\n
          rss_url: monitor_dict._links.hasOwnProperty(\'rss_url\') ? monitor_dict._links.rss_url.href : \'\',\n
          resource_url: tmp_url,\n
          process_url: tmp_process_url\n
        };\n
        return instance_dict;\n
      }\n
\n
      function showHostingConfiguration(element) {\n
        var index = parseInt($(element).attr(\'rel\'), 10);\n
\n
        if (isNaN(index) || gadget.props.hosting_list.length < index) {\n
          return;\n
        }\n
        return new RSVP.Queue()\n
          .push(function () {\n
            return $(gadget.props.element.querySelectorAll(\'.ui-block-b .ui-listview-container li > a\')).unbind( "click" );\n
          })\n
          .push(function () {\n
            return $(gadget.props.element.querySelectorAll(\'.ui-block-b .line-edit\')).unbind( "click" );\n
          })\n
          .push(function () {\n
            var old_element = $(gadget.props.element.querySelector(\'.ui-listview-container table td > a.selected\'));\n
\n
            if (old_element) {\n
              old_element.removeClass(\'selected\');\n
            }\n
            return $(element.querySelector(\'td:first-child > a\')).addClass(\'selected\');\n
          })\n
          .push(function () {\n
            var i,\n
              cred_promise_list = [];\n
            for (i = 0; i < gadget.props.hosting_list[index].instance_list.length; i += 1) {\n
              cred_promise_list.push(\n
                getMonitorCredentials(gadget.props.hosting_list[index].instance_list[i],\n
                gadget.props.hosting_list[index].title,\n
                index\n
              ));\n
            }\n
            return RSVP.all(cred_promise_list);\n
          })\n
          .push(function (cred_list) {\n
            var i,\n
              promise_list = [];\n
            for (i = 0; i < gadget.props.hosting_list[index].instance_list.length; i += 1) {\n
              promise_list.push(getSecureDocument(\n
                gadget.props.hosting_list[index].instance_list[i].url,\n
                cred_list[i].hash\n
              ));\n
            }\n
            return RSVP.all(promise_list);\n
          })\n
          .push(function (document_list) {\n
            var parameter_content,\n
              instance_list = [],\n
              parameter_list = [],\n
              status_url = \'\',\n
              i,\n
              instance_content,\n
              content_panel = $(gadget.props.element.querySelector(\'.ui-block-b .ui-panel-overview\'));\n
\n
            if (content_panel.hasClass(\'ui-content-hidden\')) {\n
              content_panel.removeClass(\'ui-content-hidden\');\n
            }\n
            gadget.props.document_list = document_list;\n
            gadget.props.element.querySelector(\'.ui-block-b .overview-title span\')\n
              .innerHTML = gadget.props.hosting_list[index].title; // + \'<span class="label label-{{status}}">{{status}}</span>\';\n
\n
            for (i = 0; i < document_list.length; i += 1) {\n
              instance_list.push(\n
                getInstanceDict(document_list[i])\n
              );\n
              if (document_list[i].hasOwnProperty(\'parameters\')) {\n
                parameter_list.push({\n
                  title: document_list[i].title,\n
                  parameters: document_list[i].parameters,\n
                  base_url: document_list[i]._links.hasOwnProperty(\'private_url\') ? document_list[i]._links.private_url.href : \'\',\n
                  index: i\n
                });\n
              }\n
            }\n
            if (gadget.props.opml_dict[gadget.props.opml_key_list[index]] !== undefined) {\n
              status_url = "#page=status_list&opml_url=" + gadget.props.opml_dict[gadget.props.opml_key_list[index]].href;\n
            }\n
            parameter_content = parameters_widget_template({parameter_list: parameter_list});\n
            instance_content = instance_widget_template({\n
              instance_list: instance_list,\n
              status_list_url: status_url\n
            });\n
\n
            gadget.props.element.querySelector(\'.ui-block-b .instances-parameters\')\n
              .innerHTML = parameter_content;\n
            gadget.props.element.querySelector(\'.ui-block-b .instances-status\')\n
              .innerHTML = instance_content;\n
            return \'\';\n
          })\n
          .push(function () {\n
            return $(gadget.props.element.querySelectorAll(\'.ui-block-b .ui-listview-outer\')).listview().listview("refresh");\n
          })\n
          .push(function () {\n
            \n
            var promise_list = [],\n
              element_list = gadget.props.element.querySelectorAll(\'.ui-block-b .ui-listview-container li > a\'),\n
              edit_list = gadget.props.element.querySelectorAll(\'.ui-block-b .line-edit\'),\n
              i;\n
            for (i = 0; i < element_list.length; i += 1) {\n
              promise_list.push(loopEventListener(\n
                element_list[i],\n
                \'click\',\n
                false,\n
                bindOnClick.bind(gadget, element_list[i])\n
              ));\n
            }\n
            for (i = 0; i < edit_list.length; i += 1) {\n
              promise_list.push(loopEventListener(\n
                edit_list[i],\n
                \'click\',\n
                false,\n
                editMonitorProps.bind(gadget, edit_list[i])\n
              ));\n
            }\n
            return RSVP.all(promise_list);\n
          });\n
      }\n
\n
      return new RSVP.Queue()\n
        .push(function () {\n
          return gadget.props.render_deferred.promise;\n
        })\n
        .push(function () {\n
          var promise_list = [],\n
            element_list = gadget.props.element.querySelectorAll(\'.ui-listview-container table tr\'),\n
            i;\n
          for (i = 0; i < element_list.length; i += 1) {\n
            promise_list.push(loopEventListener(\n
              element_list[i],\n
              \'click\',\n
              false,\n
              showHostingConfiguration.bind(gadget, element_list[i])\n
            ));\n
          }\n
          return RSVP.all(promise_list);\n
        });\n
    });\n
\n
}(window, rJS));

]]></string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>Monitoring Hosting Subscription Overview Js</string> </value>
        </item>
        <item>
            <key> <string>version</string> </key>
            <value> <string>001</string> </value>
        </item>
        <item>
            <key> <string>workflow_history</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <global name="PersistentMapping" module="Persistence.mapping"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>data</string> </key>
            <value>
              <dictionary>
                <item>
                    <key> <string>document_publication_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAM=</string> </persistent>
                    </value>
                </item>
                <item>
                    <key> <string>edit_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAQ=</string> </persistent>
                    </value>
                </item>
                <item>
                    <key> <string>processing_status_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAU=</string> </persistent>
                    </value>
                </item>
              </dictionary>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="3" aka="AAAAAAAAAAM=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.patches.WorkflowTool"/>
    </pickle>
    <pickle>
      <tuple>
        <none/>
        <list>
          <dictionary>
            <item>
                <key> <string>action</string> </key>
                <value> <string>publish</string> </value>
            </item>
            <item>
                <key> <string>actor</string> </key>
                <value> <string>zope</string> </value>
            </item>
            <item>
                <key> <string>comment</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>error_message</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>time</string> </key>
                <value>
                  <object>
                    <klass>
                      <global name="DateTime" module="DateTime.DateTime"/>
                    </klass>
                    <tuple>
                      <none/>
                    </tuple>
                    <state>
                      <tuple>
                        <float>1457347208.26</float>
                        <string>UTC</string>
                      </tuple>
                    </state>
                  </object>
                </value>
            </item>
            <item>
                <key> <string>validation_state</string> </key>
                <value> <string>published</string> </value>
            </item>
          </dictionary>
        </list>
      </tuple>
    </pickle>
  </record>
  <record id="4" aka="AAAAAAAAAAQ=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.patches.WorkflowTool"/>
    </pickle>
    <pickle>
      <tuple>
        <none/>
        <list>
          <dictionary>
            <item>
                <key> <string>action</string> </key>
                <value> <string>edit</string> </value>
            </item>
            <item>
                <key> <string>actor</string> </key>
                <value> <string>zope</string> </value>
            </item>
            <item>
                <key> <string>comment</string> </key>
                <value>
                  <none/>
                </value>
            </item>
            <item>
                <key> <string>error_message</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>serial</string> </key>
                <value> <string>950.3039.65061.43776</string> </value>
            </item>
            <item>
                <key> <string>state</string> </key>
                <value> <string>current</string> </value>
            </item>
            <item>
                <key> <string>time</string> </key>
                <value>
                  <object>
                    <klass>
                      <global name="DateTime" module="DateTime.DateTime"/>
                    </klass>
                    <tuple>
                      <none/>
                    </tuple>
                    <state>
                      <tuple>
                        <float>1459761305.99</float>
                        <string>UTC</string>
                      </tuple>
                    </state>
                  </object>
                </value>
            </item>
          </dictionary>
        </list>
      </tuple>
    </pickle>
  </record>
  <record id="5" aka="AAAAAAAAAAU=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.patches.WorkflowTool"/>
    </pickle>
    <pickle>
      <tuple>
        <none/>
        <list>
          <dictionary>
            <item>
                <key> <string>action</string> </key>
                <value> <string>detect_converted_file</string> </value>
            </item>
            <item>
                <key> <string>actor</string> </key>
                <value> <string>zope</string> </value>
            </item>
            <item>
                <key> <string>comment</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>error_message</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>external_processing_state</string> </key>
                <value> <string>converted</string> </value>
            </item>
            <item>
                <key> <string>serial</string> </key>
                <value> <string>0.0.0.0</string> </value>
            </item>
            <item>
                <key> <string>time</string> </key>
                <value>
                  <object>
                    <klass>
                      <global name="DateTime" module="DateTime.DateTime"/>
                    </klass>
                    <tuple>
                      <none/>
                    </tuple>
                    <state>
                      <tuple>
                        <float>1457347073.74</float>
                        <string>UTC</string>
                      </tuple>
                    </state>
                  </object>
                </value>
            </item>
          </dictionary>
        </list>
      </tuple>
    </pickle>
  </record>
</ZopeData>
