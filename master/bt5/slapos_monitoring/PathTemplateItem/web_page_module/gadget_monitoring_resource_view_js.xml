<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="Web Script" module="erp5.portal_type"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Access_contents_information_Permission</string> </key>
            <value>
              <tuple>
                <string>Anonymous</string>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Associate</string>
                <string>Auditor</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Add_portal_content_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Change_local_roles_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Modify_portal_content_Permission</string> </key>
            <value>
              <tuple>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_View_Permission</string> </key>
            <value>
              <tuple>
                <string>Anonymous</string>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Associate</string>
                <string>Auditor</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>categories</string> </key>
            <value>
              <tuple>
                <string>classification/collaborative/public</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>content_md5</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>default_reference</string> </key>
            <value> <string>gadget_monitoring_resource_view.js</string> </value>
        </item>
        <item>
            <key> <string>description</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>gadget_monitoring_resource_view_js</string> </value>
        </item>
        <item>
            <key> <string>language</string> </key>
            <value> <string>en</string> </value>
        </item>
        <item>
            <key> <string>portal_type</string> </key>
            <value> <string>Web Script</string> </value>
        </item>
        <item>
            <key> <string>short_title</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>text_content</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*global window, rJS, RSVP, Handlebars, $ */\n
/*jslint nomen: true, indent: 2, maxerr: 3*/\n
(function (window, rJS, RSVP, Handlebars, $) {\n
  "use strict";\n
\n
  var gadget_klass = rJS(window),\n
    templater = gadget_klass.__template_element,\n
    graph_labels_widget = Handlebars.compile(\n
      templater.getElementById("graph-label-widget-template").innerHTML\n
    );\n
\n
  gadget_klass\n
    .ready(function (gadget) {\n
      gadget.property_dict = {};\n
      return gadget.getElement()\n
        .push(function (element) {\n
          gadget.property_dict.element = element;\n
          gadget.property_dict.ressource_list = [];\n
          gadget.property_dict.render_deferred = RSVP.defer();\n
          gadget.property_dict.ressource_dict = {\n
            memory_resource: "monitor_resource_memory.data",\n
            cpu_resource: "monitor_resource_process.data",\n
            io_resource: "monitor_resource_io.data"\n
          };\n
        });\n
    })\n
    .ready(function (gadget) {\n
      return gadget.getDeclaredGadget("graph_memory_used")\n
        .push(function (graph_memory_used) {\n
          gadget.property_dict.graph_mem_used = graph_memory_used;\n
        });\n
    })\n
    .ready(function (gadget) {\n
      return gadget.getDeclaredGadget("graph_memory_percent")\n
        .push(function (graph_memory_percent) {\n
          gadget.property_dict.graph_mem_percent = graph_memory_percent;\n
        });\n
    })\n
    .ready(function (gadget) {\n
      return gadget.getDeclaredGadget("graph_cpu")\n
        .push(function (graph_cpu) {\n
          gadget.property_dict.graph_cpu = graph_cpu;\n
          gadget.property_dict.graph_cpu_label_list = [];\n
        });\n
    })\n
    .ready(function (gadget) {\n
      return gadget.getDeclaredGadget("graph_io_counter")\n
        .push(function (graph_io_counter) {\n
          gadget.property_dict.graph_io_counter = graph_io_counter;\n
        });\n
    })\n
    .ready(function (gadget) {\n
      return gadget.getDeclaredGadget("graph_io_rw")\n
        .push(function (graph_io_rw) {\n
          gadget.property_dict.graph_io_rw = graph_io_rw;\n
        });\n
    })\n
    .ready(function (gadget) {\n
      return gadget.getDeclaredGadget("graph_disk_used")\n
        .push(function (graph_disk_used) {\n
          gadget.property_dict.graph_disk_used = graph_disk_used;\n
        });\n
    })\n
    .ready(function (gadget) {\n
      return gadget.getDeclaredGadget("jio_gadget")\n
        .push(function (jio_gadget) {\n
          gadget.property_dict.jio_gadget = jio_gadget;\n
        });\n
    })\n
    .ready(function (gadget) {\n
      return gadget.getDeclaredGadget("login_gadget")\n
        .push(function (login_gadget) {\n
          gadget.property_dict.login_gadget = login_gadget;\n
        });\n
    })\n
    .declareMethod("render", function (options) {\n
      var gadget = this,\n
        graph_promise_list = [],\n
        promise_list = [],\n
        url_options = $.extend(true, {}, options),\n
        i,\n
        key;\n
\n
      function loadGraphData (jio_url, key, credential) {\n
        var jio_options = {\n
            type: "query",\n
            sub_storage: {\n
              type: "drivetojiomapping",\n
              sub_storage: {\n
                type: "dav",\n
                url: jio_url,\n
                basic_login: credential.hash\n
              }\n
            }\n
          };\n
        gadget.property_dict.jio_gadget.createJio(jio_options);\n
        return gadget.property_dict.jio_gadget.get(gadget.property_dict.ressource_dict[key])\n
          .push(function (jio_element) {\n
            if (!jio_element.hasOwnProperty(\'data\')) {\n
              return {};\n
            }\n
            // FIX\n
            jio_element.data[0] = jio_element.data[0].replace(\'%\', \'percent\');\n
            switch (key) {\n
              case "memory_resource":\n
                gadget.property_dict.mem_data = jio_element;\n
                break;\n
              case "cpu_resource":\n
                gadget.property_dict.process_data = jio_element;\n
                gadget.property_dict.graph_cpu_label_list = jio_element.data[0].split(\',\');\n
                break;\n
              case "io_resource":\n
                gadget.property_dict.io_data = jio_element;\n
                break;\n
              default:\n
                \n
            }\n
            return jio_element;\n
          });\n
      }\n
\n
      /*function renderGraph (jio_element, graph_key) {\n
        var promise_list = [];\n
        if (!jio_element.hasOwnProperty(\'data\')) {\n
          return [];\n
        }\n
        if (graph_key === \'graph_memory\') {\n
          \n
          .push(function () {\n
            );\n
        } else if (graph_key === \'grap_cpu\') {\n
          promise_list.push();\n
        } else if (graph_key === \'graph_io\') {\n
          promise_list.push();\n
          promise_list.push();\n
          promise_list.push();\n
        }\n
        return RSVP.all(promise_list);\n
      }*/\n
\n
      url_options.t = Date.now() / 1000 | 0;\n
\n
      return gadget.getUrlFor(url_options)\n
        .push(function (refresh_url) {\n
          return RSVP.all([\n
            gadget.updateHeader({\n
              title: \'Monitoring Resource Consumption\'\n
              //refresh_url: refresh_url\n
            })\n
          ]);\n
        })\n
        .push(function () {\n
            return gadget.property_dict.login_gadget.loginRedirect(\n
              options.jio_for,\n
              options,\n
              options.title,\n
              options.root);\n
        })\n
        .push(function (cred) {\n
          var key;\n
          gadget.property_dict.element.querySelector(".ui-panel-overview .overview-title > span")\n
            .innerHTML += options.title || \'Monitoring Instance Resource Status\';\n
\n
          for (key in gadget.property_dict.ressource_dict) {\n
            promise_list.push(loadGraphData (options.jio_for + \'data/\', key, cred));\n
            gadget.property_dict.ressource_list.push({url: options.jio_for + \'data/\', key: key});\n
          }\n
          return RSVP.all(promise_list);\n
        })\n
        .push(function () {\n
          return gadget.property_dict.render_deferred.resolve();\n
        });\n
    })\n
    \n
    .declareAcquiredMethod("getUrlFor", "getUrlFor")\n
    .declareAcquiredMethod("updateHeader", "updateHeader")\n
\n
    /////////////////////////////////////////////////////////////////\n
    // declared service\n
    /////////////////////////////////////////////////////////////////\n
    .declareService(function () {\n
      var gadget = this;\n
\n
      function toggleSerieVisibility(evt) {\n
        var checkbox = evt.target.nextSibling,\n
          index = $(evt.target).attr(\'rel\');\n
        if ($(checkbox).prop("checked")) {\n
          $(checkbox).prop("checked", false).checkboxradio("refresh");\n
        }\n
        else {\n
          $(checkbox).prop("checked", true).checkboxradio("refresh");\n
        }\n
        return gadget.property_dict.graph_cpu.setVisibility(parseInt(index, 10), $(checkbox).prop("checked"))\n
          .push(function () {\n
            return evt;\n
          });\n
      }\n
\n
      function updateGraphData (jio_url, key) {\n
        return gadget.property_dict.jio_gadget.get(gadget.property_dict.ressource_dict[key])\n
          .push(function (jio_element) {\n
            if (!jio_element.hasOwnProperty(\'data\')) {\n
              return {};\n
            }\n
            // FIX\n
            jio_element.data[0] = jio_element.data[0].replace(\'%\', \'percent\');\n
            switch (key) {\n
              case "memory_resource":\n
                gadget.property_dict.mem_data = jio_element;\n
                break;\n
              case "cpu_resource":\n
                gadget.property_dict.process_data = jio_element;\n
                break;\n
              case "io_resource":\n
                gadget.property_dict.io_data = jio_element;\n
                break;\n
              default:\n
                \n
            }\n
            return jio_element;\n
          });\n
      }\n
\n
      function updateGraph () {\n
        return new RSVP.Queue()\n
          .push(function () {\n
            var i,\n
              promise_list = [];\n
            for (i = 0; i < gadget.property_dict.ressource_list.length; i += 1) {\n
              promise_list.push(updateGraphData(\n
                gadget.property_dict.ressource_list[i].url,\n
                gadget.property_dict.ressource_list[i].key\n
              ));\n
            }\n
            return RSVP.all(promise_list);\n
          })\n
          .push(function () {\n
            return gadget.property_dict.graph_mem_used.updateOptions({\n
              file: gadget.property_dict.mem_data.data.join(\'\\n\')\n
            });\n
          })\n
          .push(function () {\n
            return gadget.property_dict.graph_mem_percent.updateOptions({\n
              file: gadget.property_dict.mem_data.data.join(\'\\n\')\n
            });\n
          })\n
          .push(function () {\n
            return gadget.property_dict.graph_io_rw.updateOptions({\n
              file: gadget.property_dict.io_data.data.join(\'\\n\')\n
            });\n
          })\n
          .push(function () {\n
            return gadget.property_dict.graph_io_counter.updateOptions({\n
              file: gadget.property_dict.io_data.data.join(\'\\n\')\n
            });\n
          })\n
          .push(function () {\n
            return gadget.property_dict.graph_disk_used.updateOptions({\n
              file: gadget.property_dict.io_data.data.join(\'\\n\')\n
            });\n
          })\n
          .push(function () {\n
            return gadget.property_dict.graph_cpu.updateOptions({\n
              file: gadget.property_dict.process_data.data.join(\'\\n\')\n
            });\n
          });\n
      }\n
\n
      function updateGraphTimer() {\n
        if (gadget.property_dict.loading && gadget.property_dict.timer) {\n
          clearInterval(gadget.property_dict.timer);\n
        }\n
        gadget.property_dict.timer = setInterval(function(){\n
            updateGraph();\n
          },\n
          300000);\n
      }\n
\n
      return new RSVP.Queue()\n
        .push(function () {\n
          gadget.property_dict.timer = null;\n
          gadget.property_dict.loading = false;\n
          return gadget.property_dict.render_deferred.promise;\n
        })\n
        .push(function () {\n
          return gadget.property_dict.graph_mem_used.render(\n
            gadget.property_dict.mem_data.data.join(\'\\n\'),\n
            {\n
              ylabel: \'<span class="graph-label"><i class="fa fa-bar-chart"></i> Memory used (Mo)</span>\',\n
              labelsDivStyles: { \'textAlign\': \'right\' },\n
              legend: \'always\',\n
              visibility: [false, true],\n
              fillGraph: true\n
            },\n
            "customInteractionModel"\n
          );\n
        })\n
        .push(function () {\n
          return gadget.property_dict.graph_mem_percent.render(\n
            gadget.property_dict.mem_data.data.join(\'\\n\'),\n
            {\n
              ylabel: \'<span class="graph-label"><i class="fa fa-bar-chart"></i> Memory used %</span>\',\n
              labelsDivStyles: { \'textAlign\': \'right\' },\n
              legend: \'always\',\n
              visibility: [true, false],\n
              fillGraph: true\n
            },\n
            "customInteractionModel"\n
          );\n
        })\n
        .push(function () {\n
          return gadget.property_dict.graph_io_rw.render(\n
            gadget.property_dict.io_data.data.join(\'\\n\'),\n
            {\n
              ylabel: \'<span class="graph-label"><i class="fa fa-bar-chart"></i> IO RW Bytes</span>\',\n
              labelsDivStyles: { \'textAlign\': \'right\' },\n
              legend: \'always\',\n
              visibility: [true, false, false],\n
              fillGraph: true\n
            },\n
            "customInteractionModel"\n
          );\n
        })\n
        .push(function () {\n
          return gadget.property_dict.graph_io_counter.render(\n
            gadget.property_dict.io_data.data.join(\'\\n\'),\n
            {\n
              ylabel: \'<span class="graph-label"><i class="fa fa-bar-chart"></i> IO RW counter</span>\',\n
              labelsDivStyles: { \'textAlign\': \'right\' },\n
              legend: \'always\',\n
              visibility: [false, true, false],\n
              fillGraph: true\n
            },\n
            "customInteractionModel"\n
          );\n
        })\n
        .push(function () {\n
          return gadget.property_dict.graph_disk_used.render(\n
            gadget.property_dict.io_data.data.join(\'\\n\'),\n
            {\n
              ylabel: \'<span class="graph-label"><i class="fa fa-bar-chart"></i> Disk used (Mo)</span>\',\n
              labelsDivStyles: { \'textAlign\': \'right\' },\n
              legend: \'always\',\n
              visibility: [false, false, true],\n
              fillGraph: true\n
            },\n
            "customInteractionModel"\n
          );\n
        })\n
        .push(function () {\n
          return gadget.property_dict.graph_cpu.render(\n
            gadget.property_dict.process_data.data.join(\'\\n\'),\n
            {\n
              ylabel: \'<span class="graph-label"><i class="fa fa-bar-chart"></i> Process resources</span>\',\n
              labelsDivStyles: { \'textAlign\': \'right\' }\n
            },\n
            "customInteractionModel"\n
          );\n
        })\n
        .push(function () {\n
          var label_list = gadget.property_dict.graph_cpu_label_list,\n
            element = \'graph_cpu\';\n
          if (gadget.property_dict.graph_cpu_label_list.length > 0) {\n
            label_list = label_list.slice(1); // remove date column\n
            return gadget.property_dict.graph_cpu.getColors()\n
              .push(function (color_list) {\n
                //return promise_list.push(renderGraphLabel(gadget, color_list, label_list, element));\n
                var label_content,\n
                  name_list = [],\n
                  i;\n
                for (i = 0; i < label_list.length; i += 1) {\n
                  name_list.push({\n
                    name: label_list[i],\n
                    id: "label_" + label_list[i].trim().replace(/\\s/g, \'_\'),\n
                    color: color_list[i],\n
                    graph: element,\n
                    index: i\n
                  });\n
                }\n
                label_content = graph_labels_widget({\n
                  label_list: name_list\n
                });\n
                gadget.property_dict.element.querySelector(".ui-panel-overview ." + element + " .ui-grid-span-1")\n
                  .innerHTML = label_content;\n
                return RSVP.all([\n
                  $(gadget.property_dict.element.querySelectorAll("[type=checkbox]"))\n
                  .checkboxradio()]);\n
                  /*$(gadget.property_dict.element.querySelectorAll("[data-role=controlgroup]"))\n
                  .controlgroup("refresh")]);*/\n
              });\n
          }\n
        })\n
        .push(function () {\n
          var promise_list = [],\n
            element_list = gadget.property_dict.element.querySelectorAll("label.graph_cpu"),\n
            i;\n
          for (i = 0; i < element_list.length; i += 1) {\n
            promise_list.push(\n
              loopEventListener(\n
                element_list[i],\n
                \'click\',\n
                false,\n
                toggleSerieVisibility\n
              )\n
            );\n
            if ($(element_list[i]).attr(\'for\').toLowerCase() !== \'label_cpu_percent\') {\n
              promise_list.push(gadget.property_dict.graph_cpu.setVisibility(\n
                parseInt($(element_list[i]).attr(\'rel\'), 10), false)\n
              );\n
              promise_list.push($(element_list[i]).click());\n
            }\n
          }\n
          RSVP.all(promise_list);\n
          return updateGraphTimer();\n
        });\n
    });\n
\n
}(window, rJS, RSVP, Handlebars, $));

]]></string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>Gadget Monitoring Resource View JS</string> </value>
        </item>
        <item>
            <key> <string>version</string> </key>
            <value> <string>001</string> </value>
        </item>
        <item>
            <key> <string>workflow_history</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <global name="PersistentMapping" module="Persistence.mapping"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>data</string> </key>
            <value>
              <dictionary>
                <item>
                    <key> <string>document_publication_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAM=</string> </persistent>
                    </value>
                </item>
                <item>
                    <key> <string>edit_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAQ=</string> </persistent>
                    </value>
                </item>
                <item>
                    <key> <string>processing_status_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAU=</string> </persistent>
                    </value>
                </item>
              </dictionary>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="3" aka="AAAAAAAAAAM=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.patches.WorkflowTool"/>
    </pickle>
    <pickle>
      <tuple>
        <none/>
        <list>
          <dictionary>
            <item>
                <key> <string>action</string> </key>
                <value> <string>publish</string> </value>
            </item>
            <item>
                <key> <string>actor</string> </key>
                <value> <string>zope</string> </value>
            </item>
            <item>
                <key> <string>comment</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>error_message</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>time</string> </key>
                <value>
                  <object>
                    <klass>
                      <global name="DateTime" module="DateTime.DateTime"/>
                    </klass>
                    <tuple>
                      <none/>
                    </tuple>
                    <state>
                      <tuple>
                        <float>1454340318.24</float>
                        <string>UTC</string>
                      </tuple>
                    </state>
                  </object>
                </value>
            </item>
            <item>
                <key> <string>validation_state</string> </key>
                <value> <string>published</string> </value>
            </item>
          </dictionary>
        </list>
      </tuple>
    </pickle>
  </record>
  <record id="4" aka="AAAAAAAAAAQ=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.patches.WorkflowTool"/>
    </pickle>
    <pickle>
      <tuple>
        <none/>
        <list>
          <dictionary>
            <item>
                <key> <string>action</string> </key>
                <value> <string>edit</string> </value>
            </item>
            <item>
                <key> <string>actor</string> </key>
                <value> <string>zope</string> </value>
            </item>
            <item>
                <key> <string>comment</string> </key>
                <value>
                  <none/>
                </value>
            </item>
            <item>
                <key> <string>error_message</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>serial</string> </key>
                <value> <string>949.5267.64321.15581</string> </value>
            </item>
            <item>
                <key> <string>state</string> </key>
                <value> <string>current</string> </value>
            </item>
            <item>
                <key> <string>time</string> </key>
                <value>
                  <object>
                    <klass>
                      <global name="DateTime" module="DateTime.DateTime"/>
                    </klass>
                    <tuple>
                      <none/>
                    </tuple>
                    <state>
                      <tuple>
                        <float>1455209635.58</float>
                        <string>UTC</string>
                      </tuple>
                    </state>
                  </object>
                </value>
            </item>
          </dictionary>
        </list>
      </tuple>
    </pickle>
  </record>
  <record id="5" aka="AAAAAAAAAAU=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.patches.WorkflowTool"/>
    </pickle>
    <pickle>
      <tuple>
        <none/>
        <list>
          <dictionary>
            <item>
                <key> <string>action</string> </key>
                <value> <string>detect_converted_file</string> </value>
            </item>
            <item>
                <key> <string>actor</string> </key>
                <value> <string>zope</string> </value>
            </item>
            <item>
                <key> <string>comment</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>error_message</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>external_processing_state</string> </key>
                <value> <string>converted</string> </value>
            </item>
            <item>
                <key> <string>serial</string> </key>
                <value> <string>0.0.0.0</string> </value>
            </item>
            <item>
                <key> <string>time</string> </key>
                <value>
                  <object>
                    <klass>
                      <global name="DateTime" module="DateTime.DateTime"/>
                    </klass>
                    <tuple>
                      <none/>
                    </tuple>
                    <state>
                      <tuple>
                        <float>1454340276.13</float>
                        <string>UTC</string>
                      </tuple>
                    </state>
                  </object>
                </value>
            </item>
          </dictionary>
        </list>
      </tuple>
    </pickle>
  </record>
</ZopeData>
