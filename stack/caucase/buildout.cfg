[buildout]
extends =
  buildout.hash.cfg
  ../slapos.cfg
  ../monitor/buildout.cfg
  ../../component/python-cryptography/buildout.cfg
parts =
  slapos-cookbook

[caucase-eggs]
recipe = zc.recipe.egg
eggs =
  ${python-cryptography:egg}
  caucase
scripts =
  caucase
  caucase-probe
  caucase-updater
  caucase-rerequest
  caucase-key-id
  caucased
  caucased-manage
interpreter = caucase-py

[caucase-jinja2-library-eggs]
recipe = zc.recipe.egg
eggs =
  ${slapos-cookbook:eggs}
  plone.recipe.command
  slapos.recipe.template
scripts =

[caucase-jinja2-library]
recipe = slapos.recipe.build:download
url = ${:_profile_base_location_}/${:filename}
depends =
  ${caucase-jinja2-library-eggs:eggs}
  ${caucase-sign-csr:recipe}

[caucase-sign-csr]
recipe = slapos.recipe.template
output = ${buildout:bin-directory}/${:_buildout_section_name_}
inline =
  #!${buildout:bin-directory}/${caucase-eggs:interpreter}
  import argparse
  from caucase.client import CaucaseClient, utils
  parser = argparse.ArgumentParser()
  parser.add_argument('--ca-url')
  parser.add_argument('--ca-crt')
  parser.add_argument('--user-key')
  parser.add_argument('--csr-path')
  args = parser.parse_args()
  client = CaucaseClient(
    args.ca_url + '/cas',
    utils.getCertList(args.ca_crt),
    user_key=args.user_key,
  )
  csr_pem_list = utils._getPEMListFromPath(
    args.csr_path,
    utils.pem.CertificateRequest
  )
  for entry in client.getPendingCertificateRequestList():
    pending_csr = utils.toBytes(entry['csr'])
    if pending_csr in csr_pem_list:
      client.createCertificate(int(entry['id']))

[versions]
caucase = 0.9.16
pem = 21.1.0
PyJWT = 2.4.0

[versions:python2]
PyJWT = 1.7.1
