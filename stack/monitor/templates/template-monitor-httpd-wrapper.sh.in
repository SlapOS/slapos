#!{{ dash_binary }}
# BEWARE: This file is operated by slapos node
# BEWARE: It will be overwritten automatically

pid_file="{{ pid_file }}"
monitor_httpd_conf_file={{ monitor_httpd_conf }}

if [ -f "$pid_file" ]; then
    pid=$(cat "$pid_file")
    result=$(ps aux | grep "^\S*\s*$pid\s")

    if [ -n "$result" ]; then
        # The process with the specified PID is running
        echo "there is a process running with the same pid"
        # Get the command line of the process and replace null characters with spaces
        cmdline=$(tr '\0' ' ' < "/proc/$pid/cmdline")

        # There is a process running with the pid,
        # but it is not one using our monitor-httpd.conf
        if ! expr "$cmdline" : ".*$monitor_httpd_conf_file" > /dev/null; then
            echo "The process is not running with the monitor_httpd_conf"
            rm -f {{ pid_file }};
        fi
    else
        # No process is running with this PID. If we do nothing, httpd should
        # be able to start. However, we already experienced some case where
        # httpd was not able to recover. For example, a thread with TID equal
        # to PID would lead to a failure from httpd to start. So we "help"
        # httpd by removing the file proactively.
        echo "No process is running with PID $pid, removing the pid file"
        rm -f {{ pid_file }};
    fi
fi

exec {{ monitor_httpd_wrapper_path }} "$@"
