#!{{ dash }}
set -eu

if [ $# -ne 7 ]; then
  echo "Bootstrap a mariadb instance from available backup data so it replicates from given master."
  echo "  $0 <BACKUP FILE> <MASTER HOST> <MASTER PORT> <MASTER USER> <MASTER SSL CA FILE> <MASTER SSL CERT FILE> <MASTER SSL KEY FILE>"
  exit 1
fi

dump=$1
master_host=$2
master_port=$3
master_user=$4
master_ssl_ca=$5
master_ssl_cert=$6
master_ssl_key=$7

mysql_executable='{{ mysql_executable }}'
mariadb_data_directory='{{ data_directory }}'
pid_file='{{ pid_file }}'
server_executable='{{ server_executable }}'
server_socket='{{ socket }}'

# Make sure mariadb is not already running
if [ -e "$pid_file" ]; then
  if ! pid=$(cat "$pid_file"); then
    echo "Cannot read Mariadb pidfile, assuming running. Aborting."
    exit 1
  fi
  if kill -0 "$pid"; then
    echo "Mariadb is already running with pid $pid. Aborting."
    exit 1
  fi
fi

backup_head="$(zcat "$dump" | head -n 100)"

sql_change_master=$(printf "%s" "$backup_head" | grep "^--\s*CHANGE MASTER TO " | sed "s/^--\s*//")
if [ -z "$sql_change_master" ]; then
  echo "'CHANGE MASTER TO' statement not found in given backup file."
  echo "Is replication enabled on future master ?"
  exit 1
fi

sql_set_gtid="$(printf "%s" "$backup_head" | grep "^--\s*SET GLOBAL gtid_slave_pos=" | sed "s/^--\s*//")"
if [ -z "$sql_set_gtid" ]; then
  echo "Info: GTID not found in backup, it will not be enabled."
  master_use_gtid=0
else
  echo "Info: GTID found in backup, it will be enabled."
  master_use_gtid=1
fi

echo "EXISTING DATABASE CONTENT WILL BE DESTROYED"
echo "You have 5 seconds to interrupt this script..."
if sleep 5; then
  echo "Expired, proceeding"
else
  echo "Interrupted, aborting"
  exit 1
fi

echo "Emptying data directory..."
find "$mariadb_data_directory" -mindepth 1 -delete

echo -n "Starting mariadb for backup restoration"
"$server_executable" --innodb-flush-method=nosync --skip-innodb-doublewrite --innodb-flush-log-at-trx-commit=0 --sync-frm=0 --slow-query-log=0 --skip-log-bin &
mysqld_pid=$!
trap "kill $mysqld_pid; wait; exit 1" EXIT TERM INT
while true; do
  if [ ! -e "/proc/$mysqld_pid" ]; then
    trap EXIT TERM INT
    echo "Service exited, check logs"
    wait
    exit 1
  fi
  if [ -e "$server_socket" ]; then
    echo "started."
    break
  fi
  echo -n .
  sleep 0.5
done

echo "Importing $dump ..."
zcat "$dump" | "$mysql_executable" || {
  RESTORE_EXIT_CODE=$?
  echo 'Backup restoration failed.'
  exit $RESTORE_EXIT_CODE
}

echo "Configuring server as slave..."
if [ "$master_use_gtid" -eq 1 ]; then
  "$mysql_executable" -e "$sql_set_gtid"
  maser_use_gtid_sql="slave_pos"
else
  maser_use_gtid_sql="NO"
fi
"$mysql_executable" -e "
  CHANGE MASTER TO
  MASTER_HOST='$master_host',
  MASTER_USER='$master_user',
  MASTER_PORT=$master_port,
  MASTER_SSL=1,
  MASTER_SSL_CA='$master_ssl_ca',
  MASTER_SSL_CERT='$master_ssl_cert',
  MASTER_SSL_KEY='$master_ssl_key',
  MASTER_SSL_VERIFY_SERVER_CERT=1,
  MASTER_USE_GTID=$maser_use_gtid_sql;
"
if [ "$master_use_gtid" -eq 0 ]; then
  # No GTID, use binlog name & offset as provided by backup file.
  # Example: CHANGE MASTER TO MASTER_LOG_FILE='binlog.003447', MASTER_LOG_POS=360;
  # Notes:
  # - Must happen after setting master_host & master_port.
  # - Implicitly sets master_use_gtid=NO if it was set before.
  "$mysql_executable" -e "$sql_change_master"
fi
"$mysql_executable" -e "START SLAVE;"

echo "Stopping mariadb..."
trap EXIT TERM INT
kill $mysqld_pid
wait

echo "Done. Start mariadb normally. You may use 'show slave status' SQL command to monitor progress."
