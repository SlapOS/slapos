{% set part_list = [] -%}
{% macro section(name) %}{% do part_list.append(name) %}{{ name }}{% endmacro -%}
{% set use_ipv6 = slapparameter_dict.get('use-ipv6', False) -%}
{% set database_list = slapparameter_dict.get('database-list', [{'name': 'erp5', 'user': 'user', 'password': 'insecure', 'with-process-privilege': True}]) -%}
{% set test_database_list = [] %}
{% for database_count in range(slapparameter_dict.get('test-database-amount', 1)) -%}
{%   do test_database_list.append({'name': 'erp5_test_' ~ database_count, 'user': 'testuser_' ~ database_count, 'password': 'testpassword' ~ database_count}) -%}
{% endfor -%}
{% set catalog_backup = slapparameter_dict.get('catalog-backup', {}) -%}
{% set backup_periodicity = slapparameter_dict.get('backup-periodicity', 'daily') -%}
{% set full_backup_retention_days = catalog_backup.get('full-retention-days', 7) -%}
{% set incremental_backup_retention_days = catalog_backup.get('incremental-retention-days', full_backup_retention_days) -%}
{% set port = slapparameter_dict['tcpv4-port'] %}
{% if use_ipv6 -%}
{%   set ip = (ipv6_set | list)[0] -%}
{%   set ip_as_host = '[%s]' % ip -%}
{% else -%}
{%   set ip = (ipv4_set | list)[0] -%}
{%   set ip_as_host = ip -%}
{% endif -%}
{% set bash = parameter_dict['bash'] ~ '/bin/bash' -%}
{% set dash = parameter_dict['dash-location'] ~ '/bin/dash' -%}

{#- Replication parameters -#}
{% set replication = slapparameter_dict.get('replication', {}) -%}
{% if replication -%}
{# cast to assert types -#}
{% set replica_threshold = int(replication.get('seconds-behind-master-threshold', -1)) -%}
{% set upstream_mariadb_url = str(replication['upstream-mariadb-url']) -%}
{% set upstream_bootstrap_url = replication.get('upstream-bootstrap-url') -%}
{% set upstream = urllib_parse.urlsplit(upstream_mariadb_url) -%}
{% else -%}
{% set upstream_mariadb_url = None -%}
{% set upstream = {'hostname': None, 'port': None, 'username': None} -%}
{% set replica_threshold = None -%}
{% endif -%}


[{{ section('publish') }}]
recipe = slapos.cookbook:publish.serialised
-extends = publish-early
{% macro render_database_list(database_list) -%}
{% set publish_database_list = [] -%}
{% for database in database_list -%}
{%   if database.get('user') -%}
{%     do publish_database_list.append("mysql://" ~ database['user'] ~ ":" ~ database['password'] ~ "@" ~ ip_as_host ~ ":" ~ port ~ "/" ~ database['name']) -%}
{%   else -%}
{%     do publish_database_list.append("mysql://" ~ ip_as_host ~ ":" ~ port ~ "/" ~ database['name']) -%}
{%   endif -%}
{% endfor -%}
{{ dumps(publish_database_list) }}
{% endmacro -%}
database-list = {{ render_database_list(database_list) }}
test-database-list = {{ render_database_list(test_database_list) }}
monitor-base-url = ${monitor-publish-parameters:monitor-base-url}
replication-bootstrap-url = ${mariadb-backup-static-http-server:bootstrap-url}
replication-primary-url = mysql://replication_user:${replication-password:passwd}@{{ ip_as_host }}:{{ port }}

[publish-early]
recipe = slapos.cookbook:publish-early
-init =
  server-id gen-server-id:value
{%- set server_id = slapparameter_dict.get('server-id') %}
{%- if server_id %}
server-id = {{ dumps(server_id) }}
{%- endif %}

[gen-server-id]
recipe = slapos.cookbook:random.integer
minimum = {{ dumps(1) }}
maximum = {{ dumps(2**32 - 1) }}

[simplefile]
recipe = slapos.recipe.template:jinja2
inline = {{ '{{ content }}' }}

{% macro simplefile(section_name, file_path, content, mode='') -%}
{%   set content_section_name = section_name ~ '-content' -%}
[{{  content_section_name }}]
content = {{ dumps(content) }}

[{{  section(section_name) }}]
< = simplefile
output = {{ file_path }}
context = key content {{content_section_name}}:content
mode = {{ mode }}
{%- endmacro %}
{% set ssl_dict = {} -%}
{% macro sslfile(key, content, mode='644') -%}
{%   set path = '${directory:mariadb-ssl}/' ~ key ~ '.pem' -%}
{%   do ssl_dict.__setitem__(key, path) -%}
{{   simplefile('ssl-file-' ~ key, path, content, mode) }}
{%- endmacro %}
{% set ssl_parameter_dict = slapparameter_dict.get('ssl') -%}
{% if ssl_parameter_dict -%}
{%   set base_directory = '${directory:mariadb-ssl}/' -%}
{# Note: The key content will be stored in .installed.cfg, and this template's
rendering, so the only point of mode is to avoid risking mariadb complaining
about laxist file mode. -#}
{{   sslfile('key', ssl_parameter_dict['key'], mode='600') }}
{{   sslfile('crt', ssl_parameter_dict['crt']) }}
{%   if 'ca-crt' in ssl_parameter_dict -%}
{{     sslfile('ca-crt', ssl_parameter_dict['ca-crt']) }}
{%   endif -%}
{%   if 'crl' in ssl_parameter_dict -%}
{{     sslfile('crl', ssl_parameter_dict['crl']) }}
{%   endif -%}
{%- endif %}

{% if full_backup_retention_days > -1 -%}
[mariadb-backup-script]
recipe = slapos.recipe.template
output = ${directory:bin}/${:_buildout_section_name_}
most-recent = most-recent.sql.gz
{# When binlogs are enabled:
# flush-logs: used so no manipulation on binlogs is needed to restore from
#   full + binlogs. The first binlog after a dump starts from dump snapshot and
#   can be fully restored.
# master-data: use value "2" as we are not in a replication case
#}
inline =
  #! /bin/sh
  filepath="${directory:mariadb-backup-full}/$({{ parameter_dict['coreutils-location'] }}/bin/date "+%Y%m%d%H%M%S").sql.gz"
  "${binary-wrap-mysqldump:wrapper-path}" --all-databases --flush-privileges --single-transaction --max-allowed-packet=128M {% if incremental_backup_retention_days > -1 %}--flush-logs --master-data=2 {% endif %}| {{ parameter_dict['gzip-location'] }}/bin/gzip > $filepath
  ln -sf $filepath "${directory:mariadb-backup-full}/${:most-recent}"
{# KEEP GLOB PATTERN IN SYNC with generated filenames above
#           YYYYmmddHHMMSS -#}
file-glob = ??????????????.sql.gz

[{{ section('cron-entry-mariadb-backup') }}]
recipe = slapos.cookbook:cron.d
cron-entries = ${cron:cron-entries}
name = mariadb-backup
time = {{ dumps(backup_periodicity) }}
command = ${mariadb-backup-script:output}

{% if full_backup_retention_days > 0 -%}
[{{ section("cron-entry-mariadb-backup-expire") }}]
recipe = slapos.cookbook:cron.d
cron-entries = ${cron:cron-entries}
name = mariadb-backup-expire
time = {{ dumps(backup_periodicity) }}
command = {{ parameter_dict['findutils-location'] }}/bin/find "${directory:mariadb-backup-full}" -maxdepth 1 -name "${mariadb-backup-script:file-glob}" -daystart -mtime +{{ full_backup_retention_days }} -delete
{%- endif %}
{%- endif %}

[my-cnf-parameters]
ip = {{ ip }}
port = {{ port }}
socket = ${directory:run}/mariadb.sock
data-directory = ${directory:srv}/mariadb
tmp-directory = ${directory:tmp}
etc-directory = ${directory:etc}
plugin-directory = {{ dumps(parameter_dict['mroonga-mariadb-plugin-dir']) }}
groonga-plugins-path = {{ parameter_dict['groonga-plugins-path'] }}
pid-file = ${directory:run}/mariadb.pid
error-log = ${directory:log}/mariadb_error.log
slow-query-log = ${directory:log}/mariadb_slowquery.log
long-query-time = {{ dumps(slapparameter_dict.get('long-query-time', 1)) }}
max-connection-count = {{ dumps(slapparameter_dict.get('max-connection-count', 1000)) }}
innodb-buffer-pool-size = {{ dumps(slapparameter_dict.get('innodb-buffer-pool-size', 0)) }}
innodb-buffer-pool-instances = {{ dumps(slapparameter_dict.get('innodb-buffer-pool-instances', 0)) }}
innodb-log-file-size = {{ dumps(slapparameter_dict.get('innodb-log-file-size', 0)) }}
innodb-file-per-table = {{ dumps(slapparameter_dict.get('innodb-file-per-table', 0)) }}
innodb-log-buffer-size = {{ dumps(slapparameter_dict.get('innodb-log-buffer-size', 0)) }}
relaxed-writes = {{ dumps(slapparameter_dict.get('relaxed-writes', False)) }}
character-set-server = {{ dumps(slapparameter_dict.get('character-set-server', 'utf8mb4')) }}
collation-server = {{ dumps(slapparameter_dict.get('collation-server', 'utf8mb4_general_ci')) }}
{% if incremental_backup_retention_days > -1 -%}
binlog-path = ${directory:mariadb-backup-incremental}/binlog
# XXX: binlog rotation happens along with other log's rotation
binlog-expire-days = {{ dumps(incremental_backup_retention_days) }}
server-id = ${publish-early:server-id}
{% else %}
binlog-path =
{%- endif %}
{%- for key, value in ssl_dict.items() -%}
ssl-{{ key }} = {{ value }}
{% endfor %}

[my-cnf]
recipe = slapos.recipe.template:jinja2
output = ${directory:etc}/mariadb.cnf
url = {{ parameter_dict['template-my-cnf'] }}
context = section parameter_dict my-cnf-parameters

[replication-password]
recipe = slapos.cookbook:generate.password
storage-path = ${directory:etc}/mariadb-replication.password

[init-script-parameters]
database-list = {{ dumps(database_list + test_database_list) }}
mroonga-mariadb-install-sql = {{ dumps(parameter_dict['mroonga-mariadb-install-sql']) }}
replication-password = ${replication-password:passwd}

[init-script]
recipe = slapos.recipe.template:jinja2
# XXX: is there a better location ?
output = ${directory:etc}/mariadb_initial_setup.sql
url = {{ parameter_dict['template-mariadb-initial-setup'] }}
context = section parameter_dict init-script-parameters

[{{ section('mysqld') }}]
recipe = slapos.recipe.template:jinja2
output = ${directory:services}/mariadb
url = {{ mariadb['mariadb-service-template'] }}
environ =
  GRN_PLUGINS_PATH='${my-cnf-parameters:groonga-plugins-path}'
  ODBCSYSINI='${my-cnf-parameters:etc-directory}'
  LD_LIBRARY_PATH=$${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}'{{ parameter_dict['unixodbc-location'] }}/lib'
  {%- for variable in slapparameter_dict.get('environment-variables', ()) %}
  {{ variable }}
  {%- endfor %}
context =
  key defaults_file my-cnf:output
  key datadir my-cnf-parameters:data-directory
  key environ :environ
{%- if replication %}
  raw on_creation ${mariadb-setup-replication:output}
{%- else %}
  raw on_creation ${mariadb-setup-db:output}
  raw on_startup ${mariadb-on-startup:output}
# XXX: Run upgrader and tzinfo on replication startup as well,
# or might this break replication? In doubt, avoid.
{%- endif %}

[mariadb-setup-db]
recipe = slapos.recipe.template:jinja2
output = ${directory:bin}/${:_buildout_section_name_}
url = {{ mariadb['mariadb-background-template'] }}
context =
  key mariadb_socket my-cnf-parameters:socket
  key defaults_file my-cnf:output
  key foreground_script :foreground-script
  raw extra_options --skip-networking
foreground-script =
  "${binary-wrap-mysql:wrapper-path}" < "${init-script:output}"

[pytz-path]
recipe = slapos.recipe.build
init =
  import pkg_resources, os, zc.buildout.easy_install
  buildout = self.buildout['buildout']
  e, d = buildout['eggs-directory'], buildout['develop-eggs-directory']
  req = pkg_resources.Requirement.parse('pytz')
  dist = zc.buildout.easy_install.working_set(['pytz'], [e, d]).find(req)
  options['zoneinfo'] = os.path.join(dist.location, 'pytz', 'zoneinfo')

[mariadb-on-startup]
recipe = slapos.recipe.template:jinja2
output = ${directory:bin}/${:_buildout_section_name_}
url = {{ mariadb['mariadb-background-template'] }}
context =
  key mariadb_socket my-cnf-parameters:socket
  key defaults_file my-cnf:output
  key foreground_script :foreground-script
  raw extra_options --skip-networking
foreground-script =
  mysql="${binary-wrap-mysql:wrapper-path}"
  mysql_upgrade="${binary-wrap-mysql_upgrade:wrapper-path}"
  mysql_tzinfo_to_sql="${binary-wrap-mysql_tzinfo_to_sql:wrapper-path}"
  zoneinfo="${pytz-path:zoneinfo}"
  if [ -z "$("$mysql" -e "SHOW SLAVE STATUS")" ]
  then
    "$mysql_upgrade" || true
    "mysql_tzinfo_to_sql" "$zoneinfo" | "$mysql" -B mysql || true
  fi

{% if replication -%}
[{{ section('mariadb-setup-replication') }}]
recipe = slapos.recipe.template:jinja2
output = ${directory:bin}/${:_buildout_section_name_}
url = {{ mariadb['mariadb-background-template'] }}
context =
  key shebang :shebang
  key mariadb_socket my-cnf-parameters:socket
  key defaults_file my-cnf:output
  raw extra_options --innodb-flush-method=nosync --skip-innodb-doublewrite --innodb-flush-log-at-trx-commit=0 --sync-frm=0 --slow-query-log=0 --skip-log-bin
  key foreground_script :foreground-script
shebang =
  #!{{ bash }}
  set -euo pipefail
foreground-script =
  {% if upstream_bootstrap_url -%}
  bootstrap_url={{ six_moves.shlex_quote(upstream_bootstrap_url) }}
  bootstrap_file="${directory:mariadb-backup-full}/bootstrap.sql.gz"
  {%- endif %}
  curl="{{ parameter_dict['curl-location'] }}/bin/curl"
  zcat="{{ parameter_dict['gzip-location'] }}/bin/zcat"
  mysql="${binary-wrap-mysql:wrapper-path}"

  date

  {% if upstream_bootstrap_url -%}
  echo "Fetching $bootstrap_url"
  "$curl" -o "$bootstrap_file" --fail "$bootstrap_url"

  echo "Importing $bootstrap_file"
  "$zcat" "$bootstrap_file" | "$mysql"

  echo "Extracting GTID from backup"
  set +o pipefail
  SQL_SET_GTID=$("$zcat" "$bootstrap_file" 2>/dev/null | sed '100q; /^--\s*SET GLOBAL gtid_slave_pos=/!d; s/^--\s*//; q')
  set -o pipefail
  if [ -z "$SQL_SET_GTID" ]; then
    echo "  \_ GTID not found in backup; ABORT"
    exit 1
  fi
  echo "  \_ OK, found $SQL_SET_GTID"

  {% else -%}
  echo "Skipping bootstrap and using empty GTID"
  SQL_SET_GTID='SET GLOBAL gtid_slave_pos="";'
  echo "  \_ Using $SQL_SET_GTID"
  {%- endif %}

  echo "Configuring server as replica"
  "$mysql" -e "$SQL_SET_GTID"
  "$mysql" -e "
    CHANGE MASTER TO
    MASTER_HOST='{{ upstream.hostname }}',
    MASTER_USER='{{ upstream.username }}',
    MASTER_PASSWORD='{{ upstream.password }}',
    MASTER_PORT={{ upstream.port }},
    MASTER_USE_GTID="slave_pos";
  "
  "$mysql" -e "START SLAVE;"
{%- endif %}

[mariadb-replication-sense]
recipe = slapos.recipe.template
output = ${directory:bin}/${:_buildout_section_name_}
inline =
  from contextlib import closing

  from zope.interface import implementer
  from slapos.grid.promise import interface
  from slapos.grid.promise.generic import GenericPromise

  import pymysql.cursors

  expected_url = {{ repr(upstream_mariadb_url) }}
  expected = {{ repr((upstream.hostname, upstream.port, upstream.username)) }}
  max_delay = {{ replica_threshold }}

  @implementer(interface.IPromise)
  class RunPromise(GenericPromise):
    def sense(self):
      conn = pymysql.connect(
        read_default_file='${my-cnf:output}',
        cursorclass=pymysql.cursors.DictCursor)
      with closing(conn):
        with closing(conn.cursor()) as cursor:
          cursor.execute("SHOW SLAVE STATUS")
          data = cursor.fetchone()
      if data is None:
        if expected_url is None:
          self.logger.info("Mariadb is in primary mode")
        else:
          self.logger.error(
            "Mariadb is not in replica mode. "
            "If this is expected, please unset 'replication' parameter"
          )
        return
      if expected is None:
        self.logger.error(
          "Mariadb is in replica mode. "
          "If this is expected, please set 'replication' parameter"
        )
        return
      primary = tuple(data.get('Master_' + k) for k in ('Host', 'Port', 'User'))
      seconds_behind = data.get('Seconds_Behind_Master')
      if None in primary or seconds_behind is None:
        from pprint import pformat
        self.logger.error("Replication is in bad state:\n%s", pformat(data))
        return
      if primary != expected:
        self.logger.error(
          "Replica is not following given primary %s\n"
          "Instead it's following %r\n"
          "If this is expected, please correct 'replication' parameter'",
          expected_url,
          primary,
        )
        return
      (self.logger.error if seconds_behind > max_delay >= 0 else
       self.logger.info)("Replica is %d seconds behind", seconds_behind)

[{{ section('mariadb-replication-promise') }}]
recipe = slapos.cookbook:promise.plugin
eggs =
  slapos.core
  PyMySQL
file = ${mariadb-replication-sense:output}
output = ${directory:plugins}/mariadb_replication.py

[{{ section('mariadb-backup-static-server-promise') }}]
<= monitor-promise-base
promise = check_socket_listening
name = mariadb_replication_bootstrap_static_server.py
config-host = ${mariadb-backup-static-http-server:host}
config-port = ${mariadb-backup-static-http-server:port}

[{{ section('mariadb-backup-static-http-server') }}]
recipe = slapos.cookbook:simplehttpserver
wrapper = ${directory:services}/${:_buildout_section_name_}
bootstrap-url = http://{{ ip_as_host }}:${:port}/${mariadb-backup-script:most-recent}
host = {{ ip }}
port = {{ port - 1 }}
base-path = ${directory:mariadb-backup-full}
log-file = ${directory:log}/${:_buildout_section_name_}.log

[{{ section('odbc-ini') }}]
recipe = slapos.recipe.template
output = ${directory:etc}/odbc.ini
inline = {{ dumps(slapparameter_dict.get('odbc-ini', ' ')) }}

[{{ section('logrotate-entry-mariadb') }}]
< = logrotate-entry-base
name = mariadb
log = ${my-cnf-parameters:error-log} ${my-cnf-parameters:slow-query-log}
post = "${binary-wrap-mysql:wrapper-path}" -B -e "FLUSH LOGS"

[{{ section('binary-link') }}]
recipe = slapos.cookbook:symbolic.link
target-directory = ${directory:bin}
link-binary = {{ dumps(parameter_dict['link-binary']) }}

[binary-wrap-base]
recipe = slapos.cookbook:wrapper
# Note: --defaults-file must be the first argument, otherwise wrapped binary
# will reject it.
command-line = "{{ mariadb['location'] }}/bin/${:command}" --defaults-file="${my-cnf:output}"
wrapper-path = ${directory:bin}/${:command}

[binary-wrap-mysql]
< = binary-wrap-base
command = mysql

[binary-wrap-mysqldump]
< = binary-wrap-base
command = mysqldump

[binary-wrap-mysql_upgrade]
< = binary-wrap-base
command = mysql_upgrade

[binary-wrap-mysql_tzinfo_to_sql]
< = binary-wrap-base
command-line = "{{ mariadb['location'] }}/bin/${:command}"
command = mysql_tzinfo_to_sql

[binary-wrap-pt-digest]
<= binary-wrap-base
command-line = "{{ parameter_dict['percona-tools-location'] }}/bin/${:command}"
command = pt-query-digest


[directory]
recipe = slapos.cookbook:mkdirectory
bin = ${buildout:directory}/bin
etc = ${buildout:directory}/etc
services = ${:etc}/run
plugin = ${:etc}/plugin
srv = ${buildout:directory}/srv
tmp = ${buildout:directory}/tmp
backup = ${:srv}/backup
mariadb-backup-full = ${:backup}/mariadb-full
mariadb-backup-incremental = ${:backup}/mariadb-incremental
mariadb-ssl = ${:etc}/mariadb-ssl
var = ${buildout:directory}/var
log = ${:var}/log
run = ${:var}/run
slowquery = ${monitor-directory:private}/slowquery_digest

[{{ section('resiliency-exclude-file') }}]
# Generate rdiff exclude file in case of resiliency
recipe = slapos.recipe.template:jinja2
inline = {{ '{{ "${my-cnf-parameters:data-directory}/**\\n${directory:mariadb-backup-incremental}/**\\n${directory:log}/**\\n${directory:tmp}/**\\n" }}' }}
output = ${directory:srv}/exporter.exclude

[{{ section("resiliency-identity-signature-script")}}]
# Generate identity script used by webrunner to check data integrity
recipe = slapos.cookbook:wrapper
command-line = {{ bin_directory }}/backup-identity-script-excluding-path --exclude-path "srv/backup/logrotate/**"
wrapper-path = ${directory:srv}/.backup_identity_script
mode = 770

[dash]
dash = {{ dumps(dash) }}

[{{ section('resiliency-after-import-script') }}]
# Generate after import script used by importer instance of webrunner
recipe = slapos.recipe.template:jinja2
url = {{ parameter_dict['mariadb-resiliency-after-import-script'] }}
output = ${directory:bin}/restore-from-backup
context =
  key dash dash:dash
  key mysql_executable binary-wrap-mysql:wrapper-path
  key mariadb_data_directory my-cnf-parameters:data-directory
  key mariadb_backup_directory directory:mariadb-backup-full
  key pid_file my-cnf-parameters:pid-file
  key binlog_path my-cnf-parameters:binlog-path
  key server_executable mysqld:output

[{{ section('monitor-generate-mariadb-slow-query-report') }}]
recipe = slapos.cookbook:cron.d
cron-entries = ${cron:cron-entries}
name = generate-mariadb-slow-query-report
# The goal is to be executed before logrotate log rotation.
# Here, logrotate-entry-base:frequency = daily, so we run at 23 o'clock every day.
frequency = 0 23 * * *
command = ${monitor-generate-mariadb-slow-query-report-wrapper:output}

[monitor-generate-mariadb-slow-query-report-wrapper]
recipe = slapos.recipe.template:jinja2
url = {{ parameter_dict['mariadb-slow-query-report-script'] }}
output = ${directory:bin}/${:filename}
filename = generate-mariadb-slow-query-report
context =
  raw slow_query_path ${directory:srv}/backup/logrotate/mariadb_slowquery.log
  raw pt_query_exec ${binary-wrap-pt-digest:wrapper-path}
  raw dash {{ dash }}
  raw xz {{ parameter_dict['xz-utils-location'] }}/bin/xz
  key output_folder directory:slowquery

{%if slapparameter_dict.get('max-slowqueries-threshold') and slapparameter_dict.get('slowest-query-threshold') %}
[{{ section('monitor-promise-slowquery-result') }}]
<= monitor-promise-base
promise = check_command_execute
name = check-slow-query-pt-digest-result.py
config-command = "{{ parameter_dict['promise-check-slow-queries-digest-result'] }}" --ptdigest_path "${directory:slowquery}" --status_file ${monitor-directory:private}/mariadb_slow_query.report.json --max_queries_threshold "${:max_queries_threshold}" --slowest_query_threshold "${:slowest_queries_threshold}"
max_queries_threshold = {{ slapparameter_dict['max-slowqueries-threshold'] }}
slowest_queries_threshold = {{ slapparameter_dict['slowest-query-threshold'] }}
{%-endif%}

[{{ section('promise-check-computer-memory') }}]
<= monitor-promise-base
promise = check_command_execute
name = check-computer-memory.py
config-command = "{{ parameter_dict["check-computer-memory-binary"] }}" -db ${monitor-instance-parameter:collector-db} --threshold "{{ slapparameter_dict["computer-memory-percent-threshold"] }}" --unit percent

[{{ section('promise') }}]
<= monitor-promise-base
promise = check_command_execute
name = mariadb.py
mysql = "${binary-wrap-mysql:wrapper-path}"
{%- if not replication and database_list and database_list[0].get('user') %}
netloc = --host="${my-cnf-parameters:ip}" --port="${my-cnf-parameters:port}"
auth = --user="{{ database_list[0]['user'] }}" --password="{{ database_list[0]['password'] }}"
{%- else %}
netloc =
auth =
{%- endif %}
config-command = ${:mysql} --execute ';' ${:netloc} ${:auth}

[monitor-instance-parameter]
monitor-httpd-ipv6 = {{ (ipv6_set | list)[0] }}
monitor-httpd-port = {{ port + 1 }}
monitor-title = {{ slapparameter_dict['name'] }}
password = {{ slapparameter_dict['monitor-passwd'] }}

[buildout]
extends =
  {{ template_monitor }}
parts +=
  {{ part_list | join('\n  ') }}
